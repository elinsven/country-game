{
    "pipes": [],
    "interfaces": [
        {
            "name": "Application",
            "id": "interface-Application-a97fdd4bc91b6f980976adf1c52b15fdcaddacd9602166905ac538a5e9ab2f6891b1849826f3c0a685ca1daabbb9b606204a609c2782068e0061f367a876bc56",
            "file": "projects/mystery-country/src/app/shared/models/application.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Application {\n  img: string;\n  title: string;\n  path: string;\n  playable: boolean;\n}",
            "properties": [
                {
                    "name": "img",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "playable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Country",
            "id": "interface-Country-fe6731e53d6e350581da37a87f64ad252ed794a60052b2bb007f47ad5f4fa2d704b66b24635eda91a36f81c7d7db6d0be12b5be7049ce5fc291c401b6e78ae68",
            "file": "projects/mystery-country/src/app/shared/models/country.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Continent } from \"./continent\";\n\nexport interface Country {\n  country: string;\n  continent: Continent;\n  countryimage: {\n    data: number[];\n    type: string;\n  };\n  location: number[];\n}",
            "properties": [
                {
                    "name": "continent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Continent",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "countryimage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "location",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MenuItem",
            "id": "interface-MenuItem-6400b2faf0fe9fd89845a10419f72a6b20475a03a1c6e4145b87bcebecbf7ff0e7406dbccb562b567c83edc353d3a4ba8add4aa08da5cc7de2a0dcb8fd904004",
            "file": "projects/lib/models/menuItem.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MenuItem {\n  path: string;\n  title?: string;\n  icon?: string;\n  ariaLabel?: string;\n}",
            "properties": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ApiService",
            "id": "injectable-ApiService-aafe7e84379f4741ded07d198036b51e3d8aeb0c1918d074c2e5dbf02038655bf95e8897c51777f545288a087297f258db7a018e09d8f69fa4cead15f2511519",
            "file": "projects/mystery-country/src/app/maps/services/api.service.ts",
            "properties": [
                {
                    "name": "_apiUrl",
                    "defaultValue": "this._baseUrl + \"/getCountries\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_baseUrl",
                    "defaultValue": "environment.baseUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCountries",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { environment } from \"../../../environments/environment\";\nimport { map } from \"rxjs\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ApiService {\n  private _baseUrl: string = environment.baseUrl;\n  private _apiUrl: string = this._baseUrl + \"/getCountries\";\n\n  constructor(private http: HttpClient) { }\n\n  public getCountries() {\n    return this.http.get(this._apiUrl).pipe(\n      map((data) => {\n        return data;\n      }),\n    );\n  }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CommonService",
            "id": "injectable-CommonService-1ae381b9852b319f524bb03a28e1ecdd6dfb51fbfb2fa1582d93b96e342817b854060dab4f7e7167bf9bd838551c4b5b449841ee414b841c52563c115e559395",
            "file": "projects/mystery-country/src/app/maps/services/common.service.ts",
            "properties": [
                {
                    "name": "_allCountries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Country[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_countries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Country[]",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_secretKey",
                    "defaultValue": "\"6GHEI985FNKEN9\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_encrypt",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "decrypt",
                    "args": [
                        {
                            "name": "itemToDecrypt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "itemToDecrypt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterCountriesByContinent",
                    "args": [
                        {
                            "name": "continent",
                            "type": "Continent | string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Country[]",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "continent",
                            "type": "Continent | string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateRandomCountry",
                    "args": [],
                    "optional": false,
                    "returnType": "Country",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getCountries",
                    "args": [],
                    "optional": false,
                    "returnType": "Country[]",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setCountries",
                    "args": [
                        {
                            "name": "countries",
                            "type": "Country[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "countries",
                            "type": "Country[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { Country } from \"../../shared/models/country\";\nimport { Continent } from \"../../shared/models/continent\";\nimport * as crypto from \"crypto-js\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class CommonService {\n  private _allCountries: Country[];\n  private _countries: Country[];\n  private _secretKey = \"6GHEI985FNKEN9\";\n\n  constructor() { }\n\n  public setCountries(countries: Country[]) {\n    this._allCountries = countries;\n    this._countries = countries;\n    if (localStorage.getItem(\"CONTINENT\")) {\n      this._countries = this.filterCountriesByContinent(localStorage.getItem(\"CONTINENT\"));\n    }\n  }\n\n  public filterCountriesByContinent(continent: Continent | string | null): Country[] {\n    if (continent === \"All continents\") {\n      this._countries = this._allCountries;\n      return this._countries;\n    } else {\n      this._countries = this._allCountries.filter(country => country.continent === continent);\n      return this._countries;\n    }\n  }\n\n  public getCountries(): Country[] {\n    return this._countries;\n  }\n\n  public generateRandomCountry(): Country {\n    const random = Math.floor(Math.random() * this._countries.length);\n    const randomCountry = this._countries[random];\n\n    const encryptCountry = this._encrypt(randomCountry.country);\n    const encryptContinent = this._encrypt(randomCountry.continent);\n    randomCountry.country = encryptCountry;\n    randomCountry.continent = encryptContinent;\n    localStorage.setItem(\"RANDOM_COUNTRY\", JSON.stringify(randomCountry));\n\n    const decryptCountry = this.decrypt(randomCountry.country);\n    const decryptContinent: any = this.decrypt(randomCountry.continent);\n    randomCountry.country = decryptCountry;\n    randomCountry.continent = decryptContinent;\n\n    return randomCountry;\n  }\n\n  public decrypt(itemToDecrypt: any) {\n    return crypto.AES.decrypt(itemToDecrypt, this._secretKey.trim()).toString(\n      crypto.enc.Utf8,\n    );\n  }\n\n  private _encrypt(value: any): any {\n    return crypto.AES.encrypt(value, this._secretKey.trim()).toString();\n  }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "type": "injectable"
        },
        {
            "name": "TranslocoHttpLoader",
            "id": "injectable-TranslocoHttpLoader-5ccb1d6465eb1b52a67b732370bfd47d524e05ce79443df804d1c0bb0c4a731098685225f6c5f9948c22acb9d91ec3969fb7b1cebee4dc5fb5a9bd120d939b26",
            "file": "projects/mystery-country/src/app/transloco-root.module.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getTranslation",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport {\n  TRANSLOCO_LOADER,\n  Translation,\n  TranslocoLoader,\n  TRANSLOCO_CONFIG,\n  translocoConfig,\n  TranslocoModule\n} from '@ngneat/transloco';\nimport { Injectable, NgModule } from '@angular/core';\nimport { environment } from '../environments/environment';\n\n@Injectable({ providedIn: 'root' })\nexport class TranslocoHttpLoader implements TranslocoLoader {\n  constructor(private http: HttpClient) {}\n\n  getTranslation(lang: string) {\n    return this.http.get<Translation>(`/assets/i18n/${lang}.json`);\n  }\n}\n\n@NgModule({\n  exports: [ TranslocoModule ],\n  providers: [\n    {\n      provide: TRANSLOCO_CONFIG,\n      useValue: translocoConfig({\n        availableLangs: ['en'],\n        defaultLang: 'en',\n        // Remove this option if your application doesn't support changing language in runtime.\n        reRenderOnLangChange: true,\n        prodMode: environment.production,\n      })\n    },\n    { provide: TRANSLOCO_LOADER, useClass: TranslocoHttpLoader }\n  ]\n})\nexport class TranslocoRootModule {}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-83ef4984380a667ce83bde8bc5d6b9e65c17cda22896037749c513747bf14520eecc4b7e4b37374732c76ec3fe9ab98d3f664c8b28fcd2af330af83f9b2f80bb",
            "file": "projects/mystery-country/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'mystery-country'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'mystery-country';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>"
        },
        {
            "name": "AppShellComponent",
            "id": "component-AppShellComponent-3a7ad8ad76642bd266df5b6b0b0e1f6882bc93e3bb1c4793a90a2e72bebd1de559fbf10cd900f9078f820f2e239e3463ddd28c6144abf5c93974762e071376f2",
            "file": "projects/mystery-country/src/app/core/components/app-shell/app-shell.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "main-app-shell",
            "styleUrls": [
                "./app-shell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app-shell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menuItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "getTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pageChange",
                    "args": [
                        {
                            "name": "menuItem",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "menuItem",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "value",
                            "type": "Theme",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "addTheme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Theme",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "addTheme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "translateMenuItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { MenuItem } from \"projects/lib/models/menuItem\";\nimport { Theme } from \"../../../shared/models/theme\";\n\n@Component({\n  selector: \"main-app-shell\",\n  templateUrl: \"./app-shell.component.html\",\n  styleUrls: [\"./app-shell.component.scss\"]\n})\nexport class AppShellComponent implements OnInit {\n  menuItems: MenuItem[] = [];\n\n  constructor(private router: Router) {\n    this.menuItems = [\n      {\n        path: \"/\",\n        title: \"MYSTERY COUNTRY\"\n      }\n    ]\n  }\n\n  ngOnInit(): void {\n    this.getTheme();\n  }\n\n  getTheme() {\n    const theme = localStorage.getItem(\"THEME\");\n    switch (theme) {\n      case Theme.LIGHT_THEME:\n        this.setTheme(Theme.LIGHT_THEME, \"light-theme\");\n        break;\n      case Theme.DARK_THEME:\n        this.setTheme(Theme.DARK_THEME, \"dark-theme\");\n        break;\n      default:\n        this.setTheme(Theme.LIGHT_THEME, \"light-theme\");\n    }\n  }\n\n  setTheme(value: Theme, addTheme: string) {\n    localStorage.setItem(\"THEME\", value);\n    document.body.classList.add(addTheme);\n  }\n\n  translateMenuItem() {\n\n  }\n\n  pageChange(menuItem: MenuItem) {\n    this.router.navigate([menuItem.path]);\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app-shell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<lib-layout [menuItems]=\"menuItems\" (pageChange)=\"pageChange($event)\"></lib-layout>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "LibLayoutComponent",
            "id": "component-LibLayoutComponent-30684836fd37c1b07870454b19c6c171bcfd8139c45d9fe69006a82e8a9cee894ca0e318a94064499de3cf452ea69b9fcabf25e81f4ab0a078ca8a031efe4c3b",
            "file": "projects/lib/layout/layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-layout",
            "styleUrls": [
                "./layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "menuItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "MenuItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "pageChange",
                    "defaultValue": "new EventEmitter<MenuItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { MenuItem } from '../models/menuItem';\n\n@Component({\n  selector: 'lib-layout',\n  templateUrl: './layout.component.html',\n  styleUrls: ['./layout.component.scss']\n})\nexport class LibLayoutComponent implements OnInit {\n  @Input() menuItems: MenuItem[];\n  @Output() pageChange = new EventEmitter<MenuItem>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../theme/app-theme.scss\";\n\n#header {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 10px;\n\n  h1 {\n    margin: 0 10px;\n    display: inline-block;\n    vertical-align: middle;\n    cursor: pointer;\n  }\n}\n\n.menuItems {\n  margin: 5px 0;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n\n  li {\n    display: inline-block;\n    padding: 0;\n    margin: 0;\n  }\n}\n\n.mat-divider {\n  max-width: 450px;\n  margin-left: auto;\n  margin-right: auto;\n}",
                    "styleUrl": "./layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n  <header id=\"header\">\n\n    <nav class=\"menuItems\">\n      <ul>\n        <li *ngFor=\"let item of menuItems\" (click)=\"pageChange.emit(item)\">\n          <button *ngIf=\"item.icon\" mat-icon-button [attr.aria-label]=\"item.ariaLabel\">\n            <mat-icon>{{ item.icon }}</mat-icon>\n          </button>\n          <h1 *ngIf=\"item.title\">{{ item.title }}</h1>\n        </li>\n      </ul>\n    </nav>\n\n  </header>\n\n  <mat-divider></mat-divider>\n\n  <main id=\"content\">\n    <router-outlet></router-outlet>\n  </main>\n\n</div>"
        },
        {
            "name": "LibLoadingScreenComponent",
            "id": "component-LibLoadingScreenComponent-20d4ff2559177f00371e3f24b35090f8a0bf76a536415ccdc749f266ef3effca7c0362db6f70c6b4aec44bb3002f54d5c157796e3a3106b6e7d1f3a480c1af71",
            "file": "projects/lib/loading-screen/loading-screen.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-loading-screen",
            "styleUrls": [
                "./loading-screen.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loading-screen.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "loadingText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-loading-screen',\n  templateUrl: './loading-screen.component.html',\n  styleUrls: ['./loading-screen.component.scss']\n})\nexport class LibLoadingScreenComponent implements OnInit {\n  @Input() isLoading: boolean = false;\n  @Input() loadingText: string;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../theme/app-theme.scss\";\n\n.loading-screen {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n\n  p {\n    margin-top: 10px;\n  }\n}",
                    "styleUrl": "./loading-screen.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-template [ngIf]=\"isLoading\">\n  <div class=\"loading-screen\">\n    <mat-spinner></mat-spinner>\n    <p>{{ loadingText }}</p>\n  </div>\n</ng-template>"
        },
        {
            "name": "MapsApplicationsComponent",
            "id": "component-MapsApplicationsComponent-f3ac2fe15416aa62c0284574634d7b4cf639ed4fca189a9a16d4f44f9735169f847c54ecc66a8eb2f836fa29f3c57c566f9553d8e088764da11dd117811d8535",
            "file": "projects/mystery-country/src/app/maps/components/applications/applications.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "maps-applications",
            "styleUrls": [
                "./applications.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./applications.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "closePage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'maps-applications',\n  templateUrl: './applications.component.html',\n  styleUrls: ['./applications.component.scss']\n})\nexport class MapsApplicationsComponent implements OnInit {\n\n  constructor(private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  closePage() {\n    this.router.navigate([\"/\"]);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".title {\n  display: flex;\n  justify-content: space-between;\n}",
                    "styleUrl": "./applications.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"wrapper\">\n  <div class=\"title\">\n    <h2>{{ \"maps.applications.applications\" | transloco }}</h2>\n    <button mat-icon-button (click)=\"closePage()\" [attr.aria-label]=\"'maps.applications.closePage' | transloco\">\n      <mat-icon>close</mat-icon>\n    </button>\n  </div>\n</div>"
        },
        {
            "name": "MapsAppShellComponent",
            "id": "component-MapsAppShellComponent-dc4d6d05c5028235c5d492855fdef9945b68e44b19e1537dc1fc26b230e0468ede41651a2e7be10c76fd39a0393ecc0f2952f15dd19720c2d1214cc32a0c780a",
            "file": "projects/mystery-country/src/app/maps/components/app-shell/app-shell.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "maps-app-shell",
            "styleUrls": [
                "./app-shell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app-shell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "countries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Country[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "menuItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "randomCountry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Country",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "getCountries",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pageChange",
                    "args": [
                        {
                            "name": "menuItem",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "menuItem",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "value",
                            "type": "Theme",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "addTheme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Theme",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "addTheme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "translateMenuItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { MenuItem } from 'projects/lib/models/menuItem';\nimport { Country } from 'projects/mystery-country/src/app/shared/models/country';\nimport { Theme } from 'projects/mystery-country/src/app/shared/models/theme';\nimport { ApiService } from '../../services/api.service';\nimport { CommonService } from '../../services/common.service';\nimport { menuData } from './menu-data';\n\n@Component({\n  selector: 'maps-app-shell',\n  templateUrl: './app-shell.component.html',\n  styleUrls: ['./app-shell.component.scss']\n})\nexport class MapsAppShellComponent implements OnInit {\n  countries: Country[];\n  randomCountry: Country;\n  menuItems: MenuItem[];\n\n  constructor(\n    private api: ApiService,\n    private commonService: CommonService,\n    private router: Router) { }\n\n  ngOnInit(): void {\n    this.getCountries();\n    this.getTheme();\n    this.setupMenu();\n  }\n\n  getCountries() {\n    this.api.getCountries().subscribe((res: any) => {\n      this.countries = res;\n      this.commonService.setCountries(this.countries);\n    });\n  }\n\n  getTheme() {\n    const theme = localStorage.getItem(\"THEME\");\n    switch (theme) {\n      case Theme.LIGHT_THEME:\n        this.setTheme(Theme.LIGHT_THEME, \"light-theme\");\n        break;\n      case Theme.DARK_THEME:\n        this.setTheme(Theme.DARK_THEME, \"dark-theme\");\n        break;\n      default:\n        this.setTheme(Theme.LIGHT_THEME, \"light-theme\");\n    }\n  }\n\n  setTheme(value: Theme, addTheme: string) {\n    localStorage.setItem(\"THEME\", value);\n    document.body.classList.add(addTheme);\n  }\n\n  setupMenu() {\n    this.menuItems = menuData;\n  }\n\n  translateMenuItem() {\n\n  }\n\n  pageChange(menuItem: MenuItem) {\n    this.router.navigate([menuItem.path]);\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app-shell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<lib-loading-screen [isLoading]=\"!countries\" [loadingText]=\"'maps.appShell.loadingGame' | transloco\">\n</lib-loading-screen>\n\n<div *ngIf=\"countries\">\n  <lib-layout [menuItems]=\"menuItems\" (pageChange)=\"pageChange($event)\"></lib-layout>\n</div>"
        },
        {
            "name": "MapsGamePageComponent",
            "id": "component-MapsGamePageComponent-9e9aaee9a01816ba4f97bca690ba5bf1209cbe52d385442e5978bf730daad9f00119218af0e646bc76d4e5f3bd09e0fd85404049132f18afd33337087a218b9d",
            "file": "projects/mystery-country/src/app/maps/components/game-page/game-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "maps-game-page",
            "styleUrls": [
                "./game-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./game-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "countries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Country[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "randomCountry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Country",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "arrayBufferToBase64",
                    "args": [
                        {
                            "name": "buffer",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "buffer",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "decryptCountry",
                    "args": [
                        {
                            "name": "randomCountry",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "randomCountry",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "playAgain",
                    "args": [
                        {
                            "name": "newCountry",
                            "type": "Country",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newCountry",
                            "type": "Country",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sanitize",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\nimport { Country } from \"../../../shared/models/country\";\nimport { CommonService } from \"../../services/common.service\";\n\n@Component({\n  selector: \"maps-game-page\",\n  templateUrl: \"./game-page.component.html\",\n  styleUrls: [\"./game-page.component.scss\"],\n})\nexport class MapsGamePageComponent implements OnInit {\n  countries: Country[];\n  randomCountry: Country;\n\n  constructor(\n    private commonService: CommonService,\n    private sanitizer: DomSanitizer,\n  ) {\n    this.countries = this.commonService.getCountries();\n  }\n\n  ngOnInit(): void {\n    const getRandomCountry = JSON.parse(\n      localStorage.getItem(\"RANDOM_COUNTRY\") as string,\n    );\n    getRandomCountry ? this.randomCountry = this.decryptCountry(getRandomCountry) :\n      this.randomCountry = this.commonService.generateRandomCountry();\n  }\n\n  decryptCountry(randomCountry: any) {\n    const decryptedCountry = this.commonService.decrypt(randomCountry.country);\n    randomCountry.country = decryptedCountry;\n    return randomCountry;\n  }\n\n  arrayBufferToBase64(buffer: any) {\n    let binary = \"\";\n    const bytes = new Uint8Array(buffer);\n    const len = bytes.byteLength;\n    for (let i = 0; i < len; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n    return window.btoa(binary);\n  }\n\n  sanitize(url: string) {\n    return this.sanitizer.bypassSecurityTrustUrl(url);\n  }\n\n  playAgain(newCountry: Country) {\n    this.randomCountry = newCountry;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\nimg {\n  max-width: 200px;\n  height: auto;\n}",
                    "styleUrl": "./game-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"wrapper\">\n  <img [src]=\"sanitize('data:image/jpg;base64, ' + arrayBufferToBase64(randomCountry?.countryimage?.data))\"\n    alt=\"Image of a country\" />\n\n  <maps-guessing-form [countries]=\"countries\" [randomCountry]=\"randomCountry\" (playAgain)=\"playAgain($event)\">\n  </maps-guessing-form>\n</div>"
        },
        {
            "name": "MapsGuessingFormComponent",
            "id": "component-MapsGuessingFormComponent-e18c3a0b82daf6523bf50a251e4924602c7a508fca9452a9eb910f0e48ea228e44adc8f7be720bb472eb09d6d162d87689b99e99e6c12148a3a31fa53dbdee74",
            "file": "projects/mystery-country/src/app/maps/components/game-page/guessing-form/guessing-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "maps-guessing-form",
            "styleUrls": [
                "./guessing-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./guessing-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "countries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "Country[]",
                    "decorators": []
                },
                {
                    "name": "randomCountry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "Country",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "playAgain",
                    "defaultValue": "new EventEmitter<Country>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter<Country>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "filteredOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Country[]>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "gameState",
                    "defaultValue": "GameState.IN_PROGRESS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameState",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "guesses",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Country[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "guessingForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "inputData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "recentGuess",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "autoCompletion",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "checkArray",
                    "args": [
                        {
                            "name": "array",
                            "type": "Country[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "Country[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filter",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Country[]",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "gameEnd",
                    "args": [
                        {
                            "name": "notificationMessage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "GameState",
                            "type": "GameState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "correctCountry",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "notificationMessage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "GameState",
                            "type": "GameState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "correctCountry",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initMatSnackBar",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "closeButton",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "duration",
                            "type": "number | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "closeButton",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPlayAgain",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmitGuess",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetGuesses",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\nimport { TranslocoService } from \"@ngneat/transloco\";\nimport { Country } from \"projects/mystery-country/src/app/shared/models/country\";\nimport { GameState } from \"projects/mystery-country/src/app/shared/models/game-state\";\nimport { map, Observable, startWith } from \"rxjs\";\nimport { CommonService } from \"../../../services/common.service\";\n\n@Component({\n  selector: \"maps-guessing-form\",\n  templateUrl: \"./guessing-form.component.html\",\n  styleUrls: [\"./guessing-form.component.scss\"],\n})\nexport class MapsGuessingFormComponent implements OnInit, OnDestroy {\n  @Input() countries: Country[];\n  @Input() randomCountry: Country;\n  @Output() playAgain: EventEmitter<Country> = new EventEmitter<Country>();\n\n  guessingForm: FormGroup;\n  inputData: string;\n  filteredOptions: Observable<Country[]>;\n  recentGuess: string;\n  guesses: Country[] = [];\n  gameState: GameState = GameState.IN_PROGRESS;\n  get state(): typeof GameState {\n    return GameState;\n  }\n\n  constructor(\n    private matSnackBar: MatSnackBar,\n    private transloco: TranslocoService,\n    private commonService: CommonService,\n  ) {\n    const getGuesses = JSON.parse(localStorage.getItem(\"GUESSES\") as string);\n    getGuesses ? (this.guesses = getGuesses) : (this.guesses = []);\n  }\n\n  ngOnInit(): void {\n    this.initForm();\n    this.autoCompletion();\n\n    window.onbeforeunload = () => this.ngOnDestroy();\n  }\n\n  initForm() {\n    this.guessingForm = new FormGroup({\n      country: new FormControl(null),\n    });\n  }\n\n  onSubmitGuess() {\n    this.recentGuess =\n      this.guessingForm.controls[\"country\"]?.value.toUpperCase();\n    const correctCountry = this.randomCountry.country.toUpperCase();\n\n    if (!this.checkArray(this.countries, this.recentGuess)) {\n      this.initMatSnackBar(this.transloco.translate(\"maps.game.unknownCountry\"), \"\", 1000);\n    } else if (this.checkArray(this.guesses, this.recentGuess)) {\n      this.initMatSnackBar(this.transloco.translate(\"maps.game.countryAlreadyGuessed\"), \"\", 1000);\n    } else {\n      const regexCurrentGuess = new RegExp(\n        \"(^|s)\" + this.recentGuess + \"(s|$)\",\n      );\n      const findCountry = this.countries.find((guess: Country) =>\n        guess.country.toUpperCase().match(regexCurrentGuess),\n      );\n      this.guesses.push(findCountry as Country);\n      localStorage.setItem(\"GUESSES\", JSON.stringify(this.guesses));\n    }\n\n    if (this.guesses.length === 5 && this.recentGuess !== correctCountry) {\n      this.gameEnd(\"maps.game.theAnswerWas\", GameState.LOST, correctCountry);\n    } else if (this.recentGuess === correctCountry) {\n      this.gameEnd(\"maps.game.correct\", GameState.WON, \"\");\n    }\n    this.autoCompletion();\n    this.guesses = JSON.parse(localStorage.getItem(\"GUESSES\") as string);\n    this.guessingForm.reset();\n  }\n\n  onPlayAgain() {\n    this.randomCountry = this.commonService.generateRandomCountry();\n    this.playAgain.emit(this.randomCountry);\n    this.resetGuesses();\n    this.matSnackBar.dismiss();\n    this.guessingForm.controls[\"country\"].enable();\n    this.guessingForm.reset();\n    this.gameState = GameState.IN_PROGRESS;\n  }\n\n  gameEnd(notificationMessage: string, GameState: GameState, correctCountry?: string) {\n    this.initMatSnackBar(\n      this.transloco.translate(notificationMessage) + correctCountry,\n      this.transloco.translate(\"maps.game.close\"),\n      undefined\n    );\n    this.guessingForm.controls[\"country\"].disable();\n    this.gameState = GameState;\n  }\n\n  resetGuesses() {\n    localStorage.removeItem(\"GUESSES\");\n    this.guesses = [];\n  }\n\n  autoCompletion() {\n    this.filteredOptions = this.guessingForm.controls[\"country\"].valueChanges.pipe(\n      startWith(\"\"),\n      map((value) => this.filter(value)),\n    );\n  }\n\n  checkArray(array: Country[], value: string) {\n    const regex = new RegExp(\"(^|s)\" + value + \"(s|$)\");\n    return array.some((guess: Country) =>\n      guess.country.toUpperCase().match(regex),\n    );\n  }\n\n  initMatSnackBar(message: string, closeButton: string, duration: number | undefined) {\n    this.matSnackBar.open(message, closeButton, {\n      verticalPosition: \"top\",\n      duration: duration,\n    });\n  }\n\n  filter(value: string): Country[] {\n    const filterValue = value?.toLowerCase();\n    return this.countries.filter((option: Country) =>\n      option.country.toLowerCase().indexOf(filterValue) === 0,\n    );\n  }\n\n  ngOnDestroy(): void {\n    if (this.gameState === GameState.WON || this.gameState === GameState.LOST) {\n      this.commonService.generateRandomCountry();\n      this.resetGuesses();\n    }\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  display: flex;\n  flex-direction: column;\n}\n\n.mat-form-field {\n  width: 100%;\n}\n\n.mat-raised-button {\n  width: 100%;\n}",
                    "styleUrl": "./guessing-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "transloco",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transloco",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "state": {
                    "name": "state",
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "",
                        "line": 33
                    }
                }
            },
            "templateData": "<div class=\"wrapper\">\n  <form [formGroup]=\"guessingForm\">\n    <mat-form-field>\n      <mat-label>{{ \"maps.game.enterCountry\" | transloco }}</mat-label>\n      <input matInput type=\"text\" formControlName=\"country\" [matAutocomplete]=\"auto\" matAutocompletePosition=\"below\" />\n      <mat-autocomplete #auto=\"matAutocomplete\">\n        <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option?.country | uppercase\">\n          {{ option?.country | uppercase }}\n        </mat-option>\n      </mat-autocomplete>\n    </mat-form-field>\n    <button mat-raised-button color=\"primary\" type=\"submit\" (click)=\"onSubmitGuess()\"\n      [disabled]=\"guesses?.length === 5 || (recentGuess | uppercase) === (randomCountry?.country | uppercase)\">\n      {{ \"maps.game.guess\" | transloco }}\n    </button>\n  </form>\n\n  <maps-guessing-list [gameState]=\"gameState\" [guesses]=\"guesses\" [randomCountry]=\"randomCountry\"></maps-guessing-list>\n</div>\n\n<div class=\"play-again-btn\" *ngIf=\"guesses?.length === 5 || gameState === state.WON\">\n  <button mat-raised-button color=\"primary\" (click)=\"onPlayAgain()\">\n    {{ \"maps.game.playAgain\" | transloco }}\n  </button>\n</div>"
        },
        {
            "name": "MapsGuessingListComponent",
            "id": "component-MapsGuessingListComponent-d99dfe71540f39575a26037d574551380f9d1d461ecc104b5db1124666e653d1f26d01565ad873aa7a5626b3bb5bc4fe8d32f2dfd24c6f91683991032252ebd8",
            "file": "projects/mystery-country/src/app/maps/components/game-page/guessing-list/guessing-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "maps-guessing-list",
            "styleUrls": [
                "./guessing-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./guessing-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "gameState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "GameState",
                    "decorators": []
                },
                {
                    "name": "guesses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Country[]",
                    "decorators": []
                },
                {
                    "name": "randomCountry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "Country",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "distance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "calculateBearing",
                    "args": [
                        {
                            "name": "startLat",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "startLng",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "destLat",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "destLng",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "startLat",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "startLng",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "destLat",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "destLng",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateIconDirection",
                    "args": [
                        {
                            "name": "startLat",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "startLng",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ transform: string; }",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "startLat",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "startLng",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBackgroundColor",
                    "args": [
                        {
                            "name": "guess",
                            "type": "Country",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "guess",
                            "type": "Country",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDistanceFromLatLonInKm",
                    "args": [
                        {
                            "name": "startLat",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "startLng",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "startLat",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "startLng",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toDegree",
                    "args": [
                        {
                            "name": "deg",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "deg",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toRadians",
                    "args": [
                        {
                            "name": "deg",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "deg",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from \"@angular/core\";\nimport { Country } from \"projects/mystery-country/src/app/shared/models/country\";\nimport { GameState } from \"projects/mystery-country/src/app/shared/models/game-state\";\n\n@Component({\n  selector: \"maps-guessing-list\",\n  templateUrl: \"./guessing-list.component.html\",\n  styleUrls: [\"./guessing-list.component.scss\"],\n})\nexport class MapsGuessingListComponent implements OnInit {\n  @Input() gameState: GameState;\n  @Input() guesses: Country[];\n  @Input() randomCountry: Country;\n\n  distance: number;\n  get state(): typeof GameState {\n    return GameState;\n  }\n\n  constructor() { }\n\n  ngOnInit(): void { }\n\n  getBackgroundColor(guess: Country): string {\n    this.distance = this.getDistanceFromLatLonInKm(guess.location[0], guess.location[1])\n    if (this.distance < 3000) {\n      return \"green\"\n    } else if (this.distance <= 10000) {\n      return \"yellow\"\n    } else {\n      return \"red\"\n    }\n  }\n\n  getDistanceFromLatLonInKm(startLat: number, startLng: number) {\n    const R = 6371;\n    const dLat = this.toRadians(this.randomCountry.location[0] - startLat);\n    const dLon = this.toRadians(this.randomCountry.location[1] - startLng);\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(this.toRadians(startLat)) *\n      Math.cos(this.toRadians(this.randomCountry.location[0])) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const d = R * c;\n\n    return Math.round(d);\n  }\n\n  calculateIconDirection(startLat: number, startLng: number) {\n    const deg = this.calculateBearing(startLat, startLng, this.randomCountry.location[0], this.randomCountry.location[1]);\n    return { transform: `rotate(${deg}deg)` };\n  }\n\n  calculateBearing(startLat: number, startLng: number, destLat: number, destLng: number) {\n    startLat = this.toRadians(startLat);\n    startLng = this.toRadians(startLng);\n    destLat = this.toRadians(destLat);\n    destLng = this.toRadians(destLng);\n\n    let dLon = destLng - startLng;\n    const x = Math.tan(destLat / 2 + Math.PI / 4);\n    const y = Math.tan(startLat / 2 + Math.PI / 4);\n    const dPhi = Math.log(x / y);\n    if (Math.abs(dLon) > Math.PI) {\n      if (dLon > 0.0) {\n        dLon = -(2 * Math.PI - dLon);\n      } else {\n        dLon = 2 * Math.PI + dLon;\n      }\n    }\n\n    let targetBearing = (this.toDegree(Math.atan2(dLon, dPhi)) + 360) % 360;\n    return targetBearing;\n  }\n\n  toRadians(deg: number) {\n    return deg * (Math.PI / 180);\n  }\n\n  toDegree(deg: number) {\n    return deg * (180 / Math.PI);\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-list-base {\n  padding: 0;\n  margin: 5px 0;\n}\n\n.guessing-list {\n  margin: 20px 0;\n  border-radius: 5px;\n\n  .item-row {\n    width: 100%;\n    display: flex;\n    align-items: center;\n  }\n\n  .col {\n    width: calc(100% / 3);\n    text-align: center;\n    flex: 0 0 auto;\n  }\n\n  p {\n    margin: 0;\n  }\n\n  #country-name {\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n  }\n}\n\n.red {\n  background-color: #ffa0a0;\n}\n\n.yellow {\n  background-color: #fffca0;\n}\n\n.green {\n  background-color: #c4ffa0;\n}\n\np,\n.mat-icon {\n  color: var(--dark-grey) !important;\n}",
                    "styleUrl": "./guessing-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "state": {
                    "name": "state",
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "",
                        "line": 16
                    }
                }
            },
            "templateData": "<div class=\"guessing-list\">\n  <mat-list role=\"list\" *ngFor=\"let guess of guesses; last as lastGuess\" [ngClass]=\"getBackgroundColor(guess)\">\n    <mat-list-item role=\"listitem\">\n      <div class=\"item-row\">\n        <div class=\"col\">\n          <p id=\"country-name\">{{ guess.country | uppercase }}</p>\n        </div>\n        <div class=\"col\">\n          <p *ngIf=\"gameState === state.LOST || gameState === state.IN_PROGRESS || !lastGuess\">\n            {{ distance }}KM\n          </p>\n          <mat-icon *ngIf=\"gameState === state.WON && lastGuess\">celebration</mat-icon>\n        </div>\n        <div class=\"col\" *ngIf=\"gameState === state.LOST || gameState === state.IN_PROGRESS || !lastGuess\">\n          <mat-icon [ngStyle]=\"calculateIconDirection(guess.location[0], guess.location[1])\">north</mat-icon>\n        </div>\n      </div>\n    </mat-list-item>\n  </mat-list>\n</div>"
        },
        {
            "name": "MapsHowToPlayComponent",
            "id": "component-MapsHowToPlayComponent-e50a2e1a63fb2306cfbe3f83e47534fb0cf3d43e408e9db55b84cb51454847173cd8a991a56d9aba7574815e7ccfa385dd9488fc5be435906165fc5ce1cf7bd8",
            "file": "projects/mystery-country/src/app/maps/components/how-to-play/how-to-play.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "maps-how-to-play",
            "styleUrls": [
                "./how-to-play.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./how-to-play.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "closePage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'maps-how-to-play',\n  templateUrl: './how-to-play.component.html',\n  styleUrls: ['./how-to-play.component.scss']\n})\nexport class MapsHowToPlayComponent implements OnInit {\n\n  constructor(private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  closePage() {\n    this.router.navigate([\"/\"]);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  display: flex;\n  flex-direction: column;\n}\n\n.title {\n  display: flex;\n  justify-content: space-between;\n}\n\nh3,\n.credits {\n  margin-top: 12px;\n}\n\n.mat-list-base {\n  padding: 0;\n  margin: 5px 0;\n}\n\n.example-guess {\n  margin-bottom: 5px;\n  border-radius: 5px;\n\n  .item-row {\n    width: 100%;\n    display: flex;\n    align-items: center;\n  }\n\n  .col {\n    width: calc(100% / 3);\n    text-align: center;\n    flex: 0 0 auto;\n  }\n\n  p {\n    margin: 0;\n  }\n\n  #country-name {\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n  }\n\n  p,\n  .mat-icon {\n    color: var(--dark-grey) !important;\n  }\n}\n\n.red {\n  background-color: #ffa0a0;\n}\n\n.yellow {\n  background-color: #fffca0;\n}\n\n.green {\n  background-color: #c4ffa0;\n}",
                    "styleUrl": "./how-to-play.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"wrapper\">\n\n  <div class=\"title\">\n    <h2>{{ \"maps.howToPlay.howToPlay\" | transloco }}</h2>\n    <button mat-icon-button (click)=\"closePage()\" [attr.aria-label]=\"'maps.howToPlay.closePage' | transloco\">\n      <mat-icon>close</mat-icon>\n    </button>\n  </div>\n\n  <p>{{ \"maps.howToPlay.instructions\" | transloco }}</p>\n  <mat-divider></mat-divider>\n  <h3>{{ \"maps.howToPlay.example\" | transloco }}</h3>\n\n  <ng-template\n    *ngTemplateOutlet=\"exampleGuess; context: {color: 'red', country: 'AUSTRALIA', km: 13839, direction: 'transform: rotate(305deg)'}\">\n  </ng-template>\n  <p>{{ \"maps.howToPlay.exampleText1\" | transloco }}</p>\n\n  <ng-template\n    *ngTemplateOutlet=\"exampleGuess; context: {color: 'yellow', country: 'AFGHANISTAN', km: 4353, direction: 'transform: rotate(295deg)'}\">\n  </ng-template>\n  <p>{{ \"maps.howToPlay.exampleText2\" | transloco }}</p>\n\n  <ng-template\n    *ngTemplateOutlet=\"exampleGuess;context: { color: 'green', country: 'ALBANIA', km: 670, direction: 'transform: rotate(355deg)'}\">\n  </ng-template>\n  <p>{{ \"maps.howToPlay.exampleText3\" | transloco }}</p>\n\n  <div class=\"example-guess\">\n    <mat-list role=\"list\" ngClass=\"green\">\n      <mat-list-item role=\"listitem\">\n        <div class=\"item-row\">\n          <div class=\"col\">\n            <p id=\"country-name\">HUNGARY</p>\n          </div>\n          <div class=\"col\">\n            <mat-icon>celebration</mat-icon>\n          </div>\n        </div>\n      </mat-list-item>\n    </mat-list>\n  </div>\n  <p>{{ \"maps.howToPlay.exampleText4\" | transloco }}</p>\n  <mat-divider></mat-divider>\n  <p class=\"credits\">\n    <a href=\"https://github.com/djaiss/mapsicon\" target=\"_blank\">Country images by djaiss</a>\n  </p>\n</div>\n\n<ng-template #exampleGuess let-backgroundColor=\"color\" let-country=\"country\" let-km=\"km\" let-direction=\"direction\">\n  <div class=\"example-guess\">\n    <mat-list role=\"list\" [ngClass]=\"backgroundColor\">\n      <mat-list-item role=\"listitem\">\n        <div class=\"item-row\">\n          <div class=\"col\">\n            <p id=\"country-name\">{{ country }}</p>\n          </div>\n          <div class=\"col\">\n            <p>{{ km }}KM</p>\n          </div>\n          <div class=\"col\">\n            <mat-icon [style]=\"direction\">north</mat-icon>\n          </div>\n        </div>\n      </mat-list-item>\n    </mat-list>\n  </div>\n</ng-template>"
        },
        {
            "name": "MapsLeaderboardComponent",
            "id": "component-MapsLeaderboardComponent-8ed7e013587d3c826d5c7b63cff3930e010701dc3e5a1982ce1f61e2b0f8d36ad897b2120c37ddfebf82edb01757f1833955d1ecf7b35f5e0420320263546e62",
            "file": "projects/mystery-country/src/app/maps/components/leaderboard/leaderboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "maps-leaderboard",
            "styleUrls": [
                "./leaderboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./leaderboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "closePage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'maps-leaderboard',\n  templateUrl: './leaderboard.component.html',\n  styleUrls: ['./leaderboard.component.scss']\n})\nexport class MapsLeaderboardComponent implements OnInit {\n\n  constructor(private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  closePage() {\n    this.router.navigate([\"/\"]);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".title {\n  display: flex;\n  justify-content: space-between;\n}",
                    "styleUrl": "./leaderboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"wrapper\">\n  <div class=\"title\">\n    <h2>{{ \"maps.leaderboard.leaderboard\" | transloco }}</h2>\n    <button mat-icon-button (click)=\"closePage()\" [attr.aria-label]=\"'maps.leaderboard.closePage' | transloco\">\n      <mat-icon>close</mat-icon>\n    </button>\n  </div>\n</div>"
        },
        {
            "name": "MapsSettingsComponent",
            "id": "component-MapsSettingsComponent-d8baca653368e0020767a2d73503d0337654baef523bcc7dfdc33d700d772c49a20e2995ae1b62b820cfd4c959f851c0349ae1e18f261a5cb3a63a5a13b60c65",
            "file": "projects/mystery-country/src/app/maps/components/settings/settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "maps-settings",
            "styleUrls": [
                "./settings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./settings.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "continents",
                    "defaultValue": "[\n    \"All continents\",\n    \"Africa\",\n    \"Asia\",\n    \"Europe\",\n    \"North America\",\n    \"South America\",\n    \"Australia/Oceania\",\n    \"Antarctica\"\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "currentTheme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Theme | string | null",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "changeContinent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closePage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "filterCountries",
                    "args": [
                        {
                            "name": "continent",
                            "type": "Continent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "continent",
                            "type": "Continent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "value",
                            "type": "Theme",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "addTheme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "removeTheme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Theme",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "addTheme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "removeTheme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDarkMode",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatSlideToggleChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatSlideToggleChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { MatSlideToggleChange } from \"@angular/material/slide-toggle\";\nimport { Router } from \"@angular/router\";\nimport { Continent } from \"../../../shared/models/continent\";\nimport { Theme } from \"../../../shared/models/theme\";\nimport { CommonService } from \"../../services/common.service\";\n\n@Component({\n  selector: \"maps-settings\",\n  templateUrl: \"./settings.component.html\",\n  styleUrls: [\"./settings.component.scss\"],\n})\nexport class MapsSettingsComponent implements OnInit {\n  form: FormGroup;\n  currentTheme: Theme | string | null;\n  get theme(): typeof Theme {\n    return Theme;\n  }\n  continents: string[] = [\n    \"All continents\",\n    \"Africa\",\n    \"Asia\",\n    \"Europe\",\n    \"North America\",\n    \"South America\",\n    \"Australia/Oceania\",\n    \"Antarctica\"\n  ]\n\n  constructor(\n    private router: Router,\n    private commonService: CommonService,\n    private dialog: MatDialog\n  ) { }\n\n  ngOnInit(): void {\n    this.currentTheme = localStorage.getItem(\"THEME\");\n\n    this.initForm();\n    this.changeContinent();\n  }\n\n  closePage() {\n    this.router.navigate([\"/\"]);\n  }\n\n  initForm() {\n    this.form = new FormGroup({\n      continent: new FormControl(localStorage.getItem(\"CONTINENT\") || \"All continents\")\n    })\n  }\n\n  toggleDarkMode(event: MatSlideToggleChange) {\n    event.checked ? this.setTheme(Theme.DARK_THEME, \"dark-theme\", \"light-theme\") :\n      this.setTheme(Theme.LIGHT_THEME, \"light-theme\", \"dark-theme\");\n  }\n\n  setTheme(value: Theme, addTheme: string, removeTheme: string) {\n    localStorage.setItem(\"THEME\", value);\n    document.body.classList.add(addTheme);\n    document.body.classList.remove(removeTheme);\n  }\n\n  changeContinent() {\n    this.form.get(\"continent\")?.valueChanges.subscribe(change => {\n      if (localStorage.getItem(\"GUESSES\") === null) {\n        this.filterCountries(change);\n      } else {\n        const dialog = this.dialog.open(MapsSettingsDialog);\n        dialog.afterClosed().subscribe(result => {\n          result ? this.filterCountries(change) :\n            this.form.get(\"continent\")?.setValue(localStorage.getItem(\"CONTINENT\"), { emitEvent: false });\n        });\n      }\n    })\n  }\n\n  filterCountries(continent: Continent) {\n    this.commonService.filterCountriesByContinent(continent);\n    this.commonService.generateRandomCountry();\n    localStorage.setItem(\"CONTINENT\", continent);\n    if (localStorage.getItem(\"GUESSES\")) {\n      localStorage.removeItem(\"GUESSES\");\n    }\n  }\n}\n\n@Component({\n  selector: \"maps-settings-dialog\",\n  templateUrl: \"settings-dialog.html\",\n})\nexport class MapsSettingsDialog { }",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".title {\n  display: flex;\n  justify-content: space-between;\n}\n\n.setting {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 10px 0;\n  height: 40px;\n\n  p {\n    margin: 0;\n  }\n}",
                    "styleUrl": "./settings.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "theme": {
                    "name": "theme",
                    "getSignature": {
                        "name": "theme",
                        "type": "",
                        "returnType": "",
                        "line": 18
                    }
                }
            },
            "templateData": "<div class=\"wrapper\">\n  <div class=\"title\">\n    <h2>{{ \"maps.settings.settings\" | transloco }}</h2>\n    <button mat-icon-button (click)=\"closePage()\" [attr.aria-label]=\"'maps.settings.closePage' | transloco\">\n      <mat-icon>close</mat-icon>\n    </button>\n  </div>\n\n\n  <div class=\"setting\">\n    <p>{{ \"maps.settings.darkMode\" | transloco }}</p>\n    <mat-slide-toggle color=\"primary\" (change)=\"toggleDarkMode($event)\" [checked]=\"currentTheme === theme.DARK_THEME\">\n    </mat-slide-toggle>\n  </div>\n\n  <mat-divider></mat-divider>\n\n  <div class=\"setting\">\n    <p>{{ \"maps.settings.filterCountries\" | transloco }}</p>\n    <form [formGroup]=\"form\">\n      <mat-form-field>\n        <mat-select formControlName=\"continent\">\n          <mat-option *ngFor=\"let continent of continents\" [value]=\"continent\" [disabled]=\"continent === 'Antarctica'\">\n            {{continent}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </form>\n  </div>\n\n</div>"
        },
        {
            "name": "MapsSettingsDialog",
            "id": "component-MapsSettingsDialog-d8baca653368e0020767a2d73503d0337654baef523bcc7dfdc33d700d772c49a20e2995ae1b62b820cfd4c959f851c0349ae1e18f261a5cb3a63a5a13b60c65",
            "file": "projects/mystery-country/src/app/maps/components/settings/settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "maps-settings-dialog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "settings-dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { MatSlideToggleChange } from \"@angular/material/slide-toggle\";\nimport { Router } from \"@angular/router\";\nimport { Continent } from \"../../../shared/models/continent\";\nimport { Theme } from \"../../../shared/models/theme\";\nimport { CommonService } from \"../../services/common.service\";\n\n@Component({\n  selector: \"maps-settings\",\n  templateUrl: \"./settings.component.html\",\n  styleUrls: [\"./settings.component.scss\"],\n})\nexport class MapsSettingsComponent implements OnInit {\n  form: FormGroup;\n  currentTheme: Theme | string | null;\n  get theme(): typeof Theme {\n    return Theme;\n  }\n  continents: string[] = [\n    \"All continents\",\n    \"Africa\",\n    \"Asia\",\n    \"Europe\",\n    \"North America\",\n    \"South America\",\n    \"Australia/Oceania\",\n    \"Antarctica\"\n  ]\n\n  constructor(\n    private router: Router,\n    private commonService: CommonService,\n    private dialog: MatDialog\n  ) { }\n\n  ngOnInit(): void {\n    this.currentTheme = localStorage.getItem(\"THEME\");\n\n    this.initForm();\n    this.changeContinent();\n  }\n\n  closePage() {\n    this.router.navigate([\"/\"]);\n  }\n\n  initForm() {\n    this.form = new FormGroup({\n      continent: new FormControl(localStorage.getItem(\"CONTINENT\") || \"All continents\")\n    })\n  }\n\n  toggleDarkMode(event: MatSlideToggleChange) {\n    event.checked ? this.setTheme(Theme.DARK_THEME, \"dark-theme\", \"light-theme\") :\n      this.setTheme(Theme.LIGHT_THEME, \"light-theme\", \"dark-theme\");\n  }\n\n  setTheme(value: Theme, addTheme: string, removeTheme: string) {\n    localStorage.setItem(\"THEME\", value);\n    document.body.classList.add(addTheme);\n    document.body.classList.remove(removeTheme);\n  }\n\n  changeContinent() {\n    this.form.get(\"continent\")?.valueChanges.subscribe(change => {\n      if (localStorage.getItem(\"GUESSES\") === null) {\n        this.filterCountries(change);\n      } else {\n        const dialog = this.dialog.open(MapsSettingsDialog);\n        dialog.afterClosed().subscribe(result => {\n          result ? this.filterCountries(change) :\n            this.form.get(\"continent\")?.setValue(localStorage.getItem(\"CONTINENT\"), { emitEvent: false });\n        });\n      }\n    })\n  }\n\n  filterCountries(continent: Continent) {\n    this.commonService.filterCountriesByContinent(continent);\n    this.commonService.generateRandomCountry();\n    localStorage.setItem(\"CONTINENT\", continent);\n    if (localStorage.getItem(\"GUESSES\")) {\n      localStorage.removeItem(\"GUESSES\");\n    }\n  }\n}\n\n@Component({\n  selector: \"maps-settings-dialog\",\n  templateUrl: \"settings-dialog.html\",\n})\nexport class MapsSettingsDialog { }",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h2 mat-dialog-title>{{ \"maps.settings.filterCountriesDialogTitle\" | transloco }}</h2>\n<mat-dialog-content>\n  <p>{{ \"maps.settings.filterCountriesDialogText\" | transloco }}</p>\n</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n  <button mat-raised-button [mat-dialog-close]=\"false\">{{ \"maps.settings.no\" | transloco }}</button>\n  <button mat-raised-button color=\"warn\" [mat-dialog-close]=\"true\">{{ \"maps.settings.yes\" | transloco }}</button>\n</mat-dialog-actions>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "StartComponent",
            "id": "component-StartComponent-baee63f07ffa57c84e4f2ba46cec21f24f7d85e90d7c75f35db28cdcb55c3074ebfc9d5a1ffcf5be55b1c3a18488e3073e0e9ef981e828e12b35690d6c0b0e82",
            "file": "projects/mystery-country/src/app/core/components/start/start.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-start",
            "styleUrls": [
                "./start.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./start.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "applications",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Application[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectApplication",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Application } from '../../../shared/models/application';\n\n@Component({\n  selector: 'app-start',\n  templateUrl: './start.component.html',\n  styleUrls: ['./start.component.scss']\n})\nexport class StartComponent implements OnInit {\n  applications: Application[] = [];\n\n  constructor(private router: Router) {\n    this.applications = [\n      {\n        img: \"https://picsum.photos/200\",\n        title: \"MAPS\",\n        path: \"/maps\",\n        playable: true\n      },\n      {\n        img: \"https://picsum.photos/200\",\n        title: \"FLAGS\",\n        path: \"/flags\",\n        playable: false\n      }\n    ]\n  }\n\n  ngOnInit(): void {\n  }\n\n  selectApplication(path: string) {\n    this.router.navigate([path]);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./start.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"wrapper\">\n  <div class=\"applications\" *ngFor=\"let application of applications\">\n    <div (click)=\"selectApplication(application.path)\">\n      <img [src]=\"application.img\" alt=\"Image of application\">\n      <h2>{{ application.title }}</h2>\n    </div>\n  </div>\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-f978ea02857fee3679ad129f2f062b1c223740315ec77e1ba7e9dab24284fd073faca12666a4b31ebc7ec596374ab18a54a4b452950f81d0ef2d7e9580c8191d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/mystery-country/src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { LibLayoutModule } from 'projects/lib/layout/layout.module';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { AppShellComponent } from './core/components/app-shell/app-shell.component';\nimport { StartComponent } from './core/components/start/start.component';\nimport { MapsModule } from './maps/components/maps.module';\nimport { HttpClientModule } from '@angular/common/http';\nimport { TranslocoRootModule } from './transloco-root.module';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AppShellComponent,\n    StartComponent,\n  ],\n  imports: [\n    AppRoutingModule,\n    BrowserModule,\n    BrowserAnimationsModule,\n    MapsModule,\n    LibLayoutModule,\n    HttpClientModule,\n    TranslocoRootModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "AppShellComponent"
                        },
                        {
                            "name": "StartComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "LibLayoutModule"
                        },
                        {
                            "name": "MapsModule"
                        },
                        {
                            "name": "TranslocoRootModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-d651aec0f63a4068aa4abe29df3a9be854d690e8fb734ae7824a92fc56146df8fa502c96aa6f544763744d41d32bbdc2dd1ee7d0155246e1aae893b57ef58865",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/mystery-country/src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AppShellComponent } from './core/components/app-shell/app-shell.component';\nimport { StartComponent } from './core/components/start/start.component';\nimport { MapsAppShellComponent } from './maps/components/app-shell/app-shell.component';\nimport { MapsApplicationsComponent } from './maps/components/applications/applications.component';\nimport { MapsGamePageComponent } from './maps/components/game-page/game-page.component';\nimport { MapsHowToPlayComponent } from './maps/components/how-to-play/how-to-play.component';\nimport { MapsLeaderboardComponent } from './maps/components/leaderboard/leaderboard.component';\nimport { MapsSettingsComponent } from './maps/components/settings/settings.component';\n\nconst routes: Routes = [\n  {\n    path: \"\", component: AppShellComponent, children: [\n      {\n        path: \"\", component: StartComponent\n      },\n    ]\n  },\n  {\n    path: \"maps\", component: MapsAppShellComponent, children: [\n      { path: \"\", component: MapsGamePageComponent },\n      { path: \"how-to-play\", component: MapsHowToPlayComponent },\n      { path: \"leaderboard\", component: MapsLeaderboardComponent },\n      { path: \"applications\", component: MapsApplicationsComponent },\n      { path: \"settings\", component: MapsSettingsComponent }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibLayoutModule",
            "id": "module-LibLayoutModule-d358e8369c245ab5f74cf06236c043ec4fd752302f59f4f21bd3fd10b60995ac08db3db234e6a52232472520378a129fc024c8cf4e4b59d58fc81490c47052ad",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/lib/layout/layout.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { LibLayoutComponent } from \"./layout.component\";\nimport { MatDividerModule } from \"@angular/material/divider\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatButtonModule } from '@angular/material/button';\nimport { RouterModule } from \"@angular/router\";\n\n@NgModule({\n  declarations: [LibLayoutComponent],\n  imports: [\n    CommonModule,\n    RouterModule,\n    MatButtonModule,\n    MatDividerModule,\n    MatIconModule\n  ],\n  exports: [\n    LibLayoutComponent\n  ]\n})\nexport class LibLayoutModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LibLayoutComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LibLayoutComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibLoadingScreenModule",
            "id": "module-LibLoadingScreenModule-bc7da00c3dc72883b8afec8673b76a89dd5eb7a12017902fcbbd086df0c401e0be6770d20411f40d63ddfe2fabd5190a4bdf1e20d9921a45e5e89f3ca074615b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/lib/loading-screen/loading-screen.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LibLoadingScreenComponent } from './loading-screen.component';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\n@NgModule({\n  declarations: [LibLoadingScreenComponent],\n  imports: [\n    CommonModule,\n    MatProgressSpinnerModule\n  ],\n  exports: [\n    LibLoadingScreenComponent\n  ]\n})\nexport class LibLoadingScreenModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LibLoadingScreenComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LibLoadingScreenComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MapsModule",
            "id": "module-MapsModule-37c2112062f22799e995fff7a26fad2b357322a7307af04f1fc0581755fa34698af6a51372dc45b751299f161a927e06d216201082b8ac99cc0964036417a684",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/mystery-country/src/app/maps/components/maps.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { MatAutocompleteModule } from \"@angular/material/autocomplete\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatDialogModule } from \"@angular/material/dialog\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatListModule } from \"@angular/material/list\";\nimport { MatSlideToggleModule } from \"@angular/material/slide-toggle\";\nimport { MatSnackBarModule } from \"@angular/material/snack-bar\";\nimport { LibLayoutModule } from \"projects/lib/layout/layout.module\";\nimport { LibLoadingScreenModule } from \"projects/lib/loading-screen/loading-screen.module\";\nimport { TranslocoRootModule } from \"../../transloco-root.module\";\nimport { MapsAppShellComponent } from \"./app-shell/app-shell.component\";\nimport { MapsApplicationsComponent } from \"./applications/applications.component\";\nimport { MapsGamePageComponent } from \"./game-page/game-page.component\";\nimport { MapsGuessingFormComponent } from \"./game-page/guessing-form/guessing-form.component\";\nimport { MapsGuessingListComponent } from \"./game-page/guessing-list/guessing-list.component\";\nimport { MapsHowToPlayComponent } from \"./how-to-play/how-to-play.component\";\nimport { MapsLeaderboardComponent } from \"./leaderboard/leaderboard.component\";\nimport { MapsSettingsComponent, MapsSettingsDialog } from \"./settings/settings.component\";\nimport { MatSelectModule } from '@angular/material/select';\n\n@NgModule({\n  declarations: [\n    MapsAppShellComponent,\n    MapsApplicationsComponent,\n    MapsHowToPlayComponent,\n    MapsLeaderboardComponent,\n    MapsSettingsComponent,\n    MapsSettingsDialog,\n    MapsGamePageComponent,\n    MapsGuessingFormComponent,\n    MapsGuessingListComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatIconModule,\n    MatListModule,\n    MatInputModule,\n    MatSelectModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    TranslocoRootModule,\n    LibLayoutModule,\n    LibLoadingScreenModule\n  ],\n  providers: [],\n})\nexport class MapsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MapsAppShellComponent"
                        },
                        {
                            "name": "MapsApplicationsComponent"
                        },
                        {
                            "name": "MapsGamePageComponent"
                        },
                        {
                            "name": "MapsGuessingFormComponent"
                        },
                        {
                            "name": "MapsGuessingListComponent"
                        },
                        {
                            "name": "MapsHowToPlayComponent"
                        },
                        {
                            "name": "MapsLeaderboardComponent"
                        },
                        {
                            "name": "MapsSettingsComponent"
                        },
                        {
                            "name": "MapsSettingsDialog"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LibLayoutModule"
                        },
                        {
                            "name": "LibLoadingScreenModule"
                        },
                        {
                            "name": "TranslocoRootModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TranslocoRootModule",
            "id": "module-TranslocoRootModule-5ccb1d6465eb1b52a67b732370bfd47d524e05ce79443df804d1c0bb0c4a731098685225f6c5f9948c22acb9d91ec3969fb7b1cebee4dc5fb5a9bd120d939b26",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/mystery-country/src/app/transloco-root.module.ts",
            "methods": [],
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport {\n  TRANSLOCO_LOADER,\n  Translation,\n  TranslocoLoader,\n  TRANSLOCO_CONFIG,\n  translocoConfig,\n  TranslocoModule\n} from '@ngneat/transloco';\nimport { Injectable, NgModule } from '@angular/core';\nimport { environment } from '../environments/environment';\n\n@Injectable({ providedIn: 'root' })\nexport class TranslocoHttpLoader implements TranslocoLoader {\n  constructor(private http: HttpClient) {}\n\n  getTranslation(lang: string) {\n    return this.http.get<Translation>(`/assets/i18n/${lang}.json`);\n  }\n}\n\n@NgModule({\n  exports: [ TranslocoModule ],\n  providers: [\n    {\n      provide: TRANSLOCO_CONFIG,\n      useValue: translocoConfig({\n        availableLangs: ['en'],\n        defaultLang: 'en',\n        // Remove this option if your application doesn't support changing language in runtime.\n        reRenderOnLangChange: true,\n        prodMode: environment.production,\n      })\n    },\n    { provide: TRANSLOCO_LOADER, useClass: TranslocoHttpLoader }\n  ]\n})\nexport class TranslocoRootModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/mystery-country/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  baseUrl: \"https://country-game-api.herokuapp.com\"\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/mystery-country/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  baseUrl: \"https://country-game-api.herokuapp.com\"\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "menuData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/mystery-country/src/app/maps/components/app-shell/menu-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MenuItem[]",
                "defaultValue": "[\n  {\n    path: \"/maps/how-to-play\",\n    icon: \"help\",\n    ariaLabel: \"Navigates to how to play page\"\n  },\n  {\n    path: \"/maps/applications\",\n    icon: \"apps\",\n    ariaLabel: \"Navigates to applications page\"\n  },\n  {\n    path: \"/maps\",\n    title: \"MAPS\"\n  },\n  {\n    path: \"/maps/leaderboard\",\n    icon: \"leaderboard\",\n    ariaLabel: \"Navigates to leaderboard page\"\n  },\n  {\n    path: \"/maps/settings\",\n    icon: \"settings\",\n    ariaLabel: \"Navigates to settings page\"\n  }\n]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Continent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"All continents\" | \"Africa\" | \"Asia\" | \"Europe\" | \"North America\" | \"South America\" | \"Australia/Oceania\"",
                "file": "projects/mystery-country/src/app/shared/models/continent.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            }
        ],
        "enumerations": [
            {
                "name": "GameState",
                "childs": [
                    {
                        "name": "WON",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "won"
                    },
                    {
                        "name": "LOST",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "lost"
                    },
                    {
                        "name": "IN_PROGRESS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "inProgress"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/mystery-country/src/app/shared/models/game-state.ts"
            },
            {
                "name": "Theme",
                "childs": [
                    {
                        "name": "LIGHT_THEME",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "LIGHT_THEME"
                    },
                    {
                        "name": "DARK_THEME",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DARK_THEME"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/mystery-country/src/app/shared/models/theme.ts"
            }
        ],
        "groupedVariables": {
            "projects/mystery-country/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/mystery-country/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  baseUrl: \"https://country-game-api.herokuapp.com\"\n}"
                }
            ],
            "projects/mystery-country/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/mystery-country/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  baseUrl: \"https://country-game-api.herokuapp.com\"\n}"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "projects/mystery-country/src/app/maps/components/app-shell/menu-data.ts": [
                {
                    "name": "menuData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/mystery-country/src/app/maps/components/app-shell/menu-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "defaultValue": "[\n  {\n    path: \"/maps/how-to-play\",\n    icon: \"help\",\n    ariaLabel: \"Navigates to how to play page\"\n  },\n  {\n    path: \"/maps/applications\",\n    icon: \"apps\",\n    ariaLabel: \"Navigates to applications page\"\n  },\n  {\n    path: \"/maps\",\n    title: \"MAPS\"\n  },\n  {\n    path: \"/maps/leaderboard\",\n    icon: \"leaderboard\",\n    ariaLabel: \"Navigates to leaderboard page\"\n  },\n  {\n    path: \"/maps/settings\",\n    icon: \"settings\",\n    ariaLabel: \"Navigates to settings page\"\n  }\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "projects/mystery-country/src/app/shared/models/game-state.ts": [
                {
                    "name": "GameState",
                    "childs": [
                        {
                            "name": "WON",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "won"
                        },
                        {
                            "name": "LOST",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "lost"
                        },
                        {
                            "name": "IN_PROGRESS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "inProgress"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/mystery-country/src/app/shared/models/game-state.ts"
                }
            ],
            "projects/mystery-country/src/app/shared/models/theme.ts": [
                {
                    "name": "Theme",
                    "childs": [
                        {
                            "name": "LIGHT_THEME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "LIGHT_THEME"
                        },
                        {
                            "name": "DARK_THEME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DARK_THEME"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/mystery-country/src/app/shared/models/theme.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/mystery-country/src/app/shared/models/continent.ts": [
                {
                    "name": "Continent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"All continents\" | \"Africa\" | \"Asia\" | \"Europe\" | \"North America\" | \"South America\" | \"Australia/Oceania\"",
                    "file": "projects/mystery-country/src/app/shared/models/continent.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "projects/mystery-country/src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "AppShellComponent",
                        "children": [
                            {
                                "path": "",
                                "component": "StartComponent"
                            }
                        ]
                    },
                    {
                        "path": "maps",
                        "component": "MapsAppShellComponent",
                        "children": [
                            {
                                "path": "",
                                "component": "MapsGamePageComponent"
                            },
                            {
                                "path": "how-to-play",
                                "component": "MapsHowToPlayComponent"
                            },
                            {
                                "path": "leaderboard",
                                "component": "MapsLeaderboardComponent"
                            },
                            {
                                "path": "applications",
                                "component": "MapsApplicationsComponent"
                            },
                            {
                                "path": "settings",
                                "component": "MapsSettingsComponent"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "projects/lib/layout/layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LibLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/lib/loading-screen/loading-screen.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LibLoadingScreenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/lib/models/menuItem.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/mystery-country/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/mystery-country/src/app/core/components/app-shell/app-shell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppShellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/mystery-country/src/app/core/components/start/start.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/mystery-country/src/app/maps/components/app-shell/app-shell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapsAppShellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/mystery-country/src/app/maps/components/app-shell/menu-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "menuData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/mystery-country/src/app/maps/components/applications/applications.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapsApplicationsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/mystery-country/src/app/maps/components/game-page/game-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapsGamePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/mystery-country/src/app/maps/components/game-page/guessing-form/guessing-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapsGuessingFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "projects/mystery-country/src/app/maps/components/game-page/guessing-list/guessing-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapsGuessingListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/mystery-country/src/app/maps/components/how-to-play/how-to-play.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapsHowToPlayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/mystery-country/src/app/maps/components/leaderboard/leaderboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapsLeaderboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/mystery-country/src/app/maps/components/settings/settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapsSettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/mystery-country/src/app/maps/components/settings/settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapsSettingsDialog",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/mystery-country/src/app/maps/services/api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/mystery-country/src/app/maps/services/common.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CommonService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/mystery-country/src/app/shared/models/application.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Application",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/mystery-country/src/app/shared/models/country.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Country",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/mystery-country/src/app/transloco-root.module.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TranslocoHttpLoader",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/mystery-country/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/mystery-country/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}