{"ast":null,"code":"import { FormControl, FormGroup } from '@angular/forms';\nimport { map, startWith } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/api.service\";\nimport * as i2 from \"@angular/material/snack-bar\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/autocomplete\";\nimport * as i8 from \"@angular/material/core\";\nimport * as i9 from \"@angular/material/button\";\n\nfunction GuessingFormComponent_ng_container_0_mat_option_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 7);\n    i0.ɵɵpipe(1, \"uppercase\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"uppercase\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", i0.ɵɵpipeBind1(1, 2, option_r3 == null ? null : option_r3.country));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 4, option_r3 == null ? null : option_r3.country), \" \");\n  }\n}\n\nfunction GuessingFormComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 1)(2, \"form\", 2)(3, \"mat-form-field\")(4, \"mat-label\");\n    i0.ɵɵtext(5, \"ENTER COUNTRY\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 3);\n    i0.ɵɵelementStart(7, \"mat-autocomplete\", null, 4);\n    i0.ɵɵtemplate(9, GuessingFormComponent_ng_container_0_mat_option_9_Template, 4, 6, \"mat-option\", 5);\n    i0.ɵɵpipe(10, \"async\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function GuessingFormComponent_ng_container_0_Template_button_click_11_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.submitGuess();\n    });\n    i0.ɵɵpipe(12, \"lowercase\");\n    i0.ɵɵpipe(13, \"lowercase\");\n    i0.ɵɵtext(14, \"GUESS\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const _r1 = i0.ɵɵreference(8);\n\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.guessingForm);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"matAutocomplete\", _r1);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(10, 4, ctx_r0.filteredOptions));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", (ctx_r0.guesses == null ? null : ctx_r0.guesses.length) == 5 || i0.ɵɵpipeBind1(12, 6, ctx_r0.recentGuess) == i0.ɵɵpipeBind1(13, 8, ctx_r0.randomCountry == null ? null : ctx_r0.randomCountry.country));\n  }\n}\n\n;\nexport class GuessingFormComponent {\n  constructor(api, matSnackBar) {\n    this.api = api;\n    this.matSnackBar = matSnackBar;\n    this.guesses = [];\n  }\n\n  ngOnInit() {\n    this.initForm();\n    this.api.getCountries().pipe(map(data => {\n      console.log(data);\n    }));\n  }\n  /*   getCountries() {\n      this.api.getCountries().subscribe((res: any) => {\n       this.countries = res;\n       this.countries.sort((a, b) => (a.country > b.country) ? 1 : -1);\n       const random = Math.floor(Math.random() * this.countries.length);\n       this.randomCountry = this.countries[random];\n       console.log(this.randomCountry);\n      }, err => {\n        console.log(err);\n      });\n    } */\n\n\n  initForm() {\n    this.guessingForm = new FormGroup({\n      country: new FormControl(\"\")\n    });\n  }\n\n  submitGuess() {\n    var _a, _b, _c;\n\n    this.recentGuess = (_a = this.guessingForm.get(\"country\")) === null || _a === void 0 ? void 0 : _a.value;\n\n    if (this.recentGuess == null || !this._checkArray(this.countries, this.recentGuess)) {\n      this._initMatSnackBar(\"Unknown country\", \"\", 1000);\n    } else if (this._checkArray(this.guesses, this.recentGuess)) {\n      this._initMatSnackBar(\"Country already guessed\", \"\", 1000);\n    } else {\n      const regexCurrentGuess = new RegExp(\"(^|\\s)\" + this.recentGuess + \"(\\s|$)\");\n      const findCountry = this.countries.find(guess => guess.country.toUpperCase().match(regexCurrentGuess));\n      this.guesses.push(findCountry);\n    }\n\n    this.filteredOptions = this.guessingForm.get(\"country\").valueChanges.pipe(startWith(\"\"), map(value => this._filter(value)));\n    this.guessingForm.reset();\n    const correctCountry = this.randomCountry.country.toUpperCase();\n\n    if (this.guesses.length === 5 && ((_b = this.recentGuess) === null || _b === void 0 ? void 0 : _b.toUpperCase()) !== correctCountry) {\n      this._initMatSnackBar(`THE ANSWER WAS ${correctCountry}`, \"Close\", undefined);\n\n      this.guessingForm.controls[\"country\"].disable();\n    } else if (((_c = this.recentGuess) === null || _c === void 0 ? void 0 : _c.toUpperCase()) === correctCountry) {\n      this._initMatSnackBar(\"CORRECT\", \"Close\", undefined);\n\n      this.guessingForm;\n    }\n  }\n\n  _checkArray(array, value) {\n    const regex = new RegExp(\"(^|\\s)\" + value + \"(\\s|$)\");\n    return array.some(guess => guess.country.toUpperCase().match(regex));\n  }\n\n  _initMatSnackBar(message, closeButton, duration) {\n    this.matSnackBar.open(message, closeButton, {\n      verticalPosition: \"top\",\n      duration: duration\n    });\n  }\n\n  _filter(value) {\n    const filterValue = value === null || value === void 0 ? void 0 : value.toLowerCase();\n    return this.countries.filter(option => option.country.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n}\n\nGuessingFormComponent.ɵfac = function GuessingFormComponent_Factory(t) {\n  return new (t || GuessingFormComponent)(i0.ɵɵdirectiveInject(i1.ApiService), i0.ɵɵdirectiveInject(i2.MatSnackBar));\n};\n\nGuessingFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GuessingFormComponent,\n  selectors: [[\"app-guessing-form\"]],\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [1, \"form\"], [3, \"formGroup\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"country\", 3, \"matAutocomplete\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [3, \"value\"]],\n  template: function GuessingFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, GuessingFormComponent_ng_container_0_Template, 15, 10, \"ng-container\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.randomCountry);\n    }\n  },\n  directives: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i5.MatFormField, i5.MatLabel, i6.MatInput, i4.DefaultValueAccessor, i7.MatAutocompleteTrigger, i4.NgControlStatus, i4.FormControlName, i7.MatAutocomplete, i3.NgForOf, i8.MatOption, i9.MatButton],\n  pipes: [i3.UpperCasePipe, i3.AsyncPipe, i3.LowerCasePipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJndWVzc2luZy1mb3JtLmNvbXBvbmVudC5zY3NzIn0= */\"]\n});","map":{"version":3,"sources":["/Users/elin/web/country-game/src/app/components/guessing-form/guessing-form.component.ts"],"names":["FormControl","FormGroup","map","startWith","i0","i1","i2","i3","i4","i5","i6","i7","i8","i9","GuessingFormComponent_ng_container_0_mat_option_9_Template","rf","ctx","ɵɵelementStart","ɵɵpipe","ɵɵtext","ɵɵelementEnd","option_r3","$implicit","ɵɵproperty","ɵɵpipeBind1","country","ɵɵadvance","ɵɵtextInterpolate1","GuessingFormComponent_ng_container_0_Template","_r5","ɵɵgetCurrentView","ɵɵelementContainerStart","ɵɵelement","ɵɵtemplate","ɵɵlistener","GuessingFormComponent_ng_container_0_Template_button_click_11_listener","ɵɵrestoreView","ctx_r4","ɵɵnextContext","submitGuess","ɵɵelementContainerEnd","_r1","ɵɵreference","ctx_r0","guessingForm","filteredOptions","guesses","length","recentGuess","randomCountry","GuessingFormComponent","constructor","api","matSnackBar","ngOnInit","initForm","getCountries","pipe","data","console","log","_a","_b","_c","get","value","_checkArray","countries","_initMatSnackBar","regexCurrentGuess","RegExp","findCountry","find","guess","toUpperCase","match","push","valueChanges","_filter","reset","correctCountry","undefined","controls","disable","array","regex","some","message","closeButton","duration","open","verticalPosition","filterValue","toLowerCase","filter","option","indexOf","ɵfac","GuessingFormComponent_Factory","t","ɵɵdirectiveInject","ApiService","MatSnackBar","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","consts","template","GuessingFormComponent_Template","directives","NgIf","ɵNgNoValidate","NgControlStatusGroup","FormGroupDirective","MatFormField","MatLabel","MatInput","DefaultValueAccessor","MatAutocompleteTrigger","NgControlStatus","FormControlName","MatAutocomplete","NgForOf","MatOption","MatButton","pipes","UpperCasePipe","AsyncPipe","LowerCasePipe","styles"],"mappings":"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","sourcesContent":["import { FormControl, FormGroup } from '@angular/forms';\nimport { map, startWith } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/api.service\";\nimport * as i2 from \"@angular/material/snack-bar\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/autocomplete\";\nimport * as i8 from \"@angular/material/core\";\nimport * as i9 from \"@angular/material/button\";\nfunction GuessingFormComponent_ng_container_0_mat_option_9_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 7);\n    i0.ɵɵpipe(1, \"uppercase\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"uppercase\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const option_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", i0.ɵɵpipeBind1(1, 2, option_r3 == null ? null : option_r3.country));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 4, option_r3 == null ? null : option_r3.country), \" \");\n} }\nfunction GuessingFormComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 1)(2, \"form\", 2)(3, \"mat-form-field\")(4, \"mat-label\");\n    i0.ɵɵtext(5, \"ENTER COUNTRY\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 3);\n    i0.ɵɵelementStart(7, \"mat-autocomplete\", null, 4);\n    i0.ɵɵtemplate(9, GuessingFormComponent_ng_container_0_mat_option_9_Template, 4, 6, \"mat-option\", 5);\n    i0.ɵɵpipe(10, \"async\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function GuessingFormComponent_ng_container_0_Template_button_click_11_listener() { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return ctx_r4.submitGuess(); });\n    i0.ɵɵpipe(12, \"lowercase\");\n    i0.ɵɵpipe(13, \"lowercase\");\n    i0.ɵɵtext(14, \"GUESS\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const _r1 = i0.ɵɵreference(8);\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.guessingForm);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"matAutocomplete\", _r1);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(10, 4, ctx_r0.filteredOptions));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", (ctx_r0.guesses == null ? null : ctx_r0.guesses.length) == 5 || i0.ɵɵpipeBind1(12, 6, ctx_r0.recentGuess) == i0.ɵɵpipeBind1(13, 8, ctx_r0.randomCountry == null ? null : ctx_r0.randomCountry.country));\n} }\n;\nexport class GuessingFormComponent {\n    constructor(api, matSnackBar) {\n        this.api = api;\n        this.matSnackBar = matSnackBar;\n        this.guesses = [];\n    }\n    ngOnInit() {\n        this.initForm();\n        this.api.getCountries().pipe(map(data => {\n            console.log(data);\n        }));\n    }\n    /*   getCountries() {\n        this.api.getCountries().subscribe((res: any) => {\n         this.countries = res;\n         this.countries.sort((a, b) => (a.country > b.country) ? 1 : -1);\n         const random = Math.floor(Math.random() * this.countries.length);\n         this.randomCountry = this.countries[random];\n         console.log(this.randomCountry);\n        }, err => {\n          console.log(err);\n        });\n      } */\n    initForm() {\n        this.guessingForm = new FormGroup({\n            country: new FormControl(\"\")\n        });\n    }\n    submitGuess() {\n        var _a, _b, _c;\n        this.recentGuess = (_a = this.guessingForm.get(\"country\")) === null || _a === void 0 ? void 0 : _a.value;\n        if (this.recentGuess == null || !this._checkArray(this.countries, this.recentGuess)) {\n            this._initMatSnackBar(\"Unknown country\", \"\", 1000);\n        }\n        else if (this._checkArray(this.guesses, this.recentGuess)) {\n            this._initMatSnackBar(\"Country already guessed\", \"\", 1000);\n        }\n        else {\n            const regexCurrentGuess = new RegExp(\"(^|\\s)\" + this.recentGuess + \"(\\s|$)\");\n            const findCountry = this.countries.find((guess) => guess.country.toUpperCase().match(regexCurrentGuess));\n            this.guesses.push(findCountry);\n        }\n        this.filteredOptions = this.guessingForm.get(\"country\").valueChanges.pipe(startWith(\"\"), map(value => this._filter(value)));\n        this.guessingForm.reset();\n        const correctCountry = this.randomCountry.country.toUpperCase();\n        if (this.guesses.length === 5 && ((_b = this.recentGuess) === null || _b === void 0 ? void 0 : _b.toUpperCase()) !== correctCountry) {\n            this._initMatSnackBar(`THE ANSWER WAS ${correctCountry}`, \"Close\", undefined);\n            this.guessingForm.controls[\"country\"].disable();\n        }\n        else if (((_c = this.recentGuess) === null || _c === void 0 ? void 0 : _c.toUpperCase()) === correctCountry) {\n            this._initMatSnackBar(\"CORRECT\", \"Close\", undefined);\n            this.guessingForm;\n        }\n    }\n    _checkArray(array, value) {\n        const regex = new RegExp(\"(^|\\s)\" + value + \"(\\s|$)\");\n        return array.some((guess) => guess.country.toUpperCase().match(regex));\n    }\n    _initMatSnackBar(message, closeButton, duration) {\n        this.matSnackBar.open(message, closeButton, {\n            verticalPosition: \"top\",\n            duration: duration\n        });\n    }\n    _filter(value) {\n        const filterValue = value === null || value === void 0 ? void 0 : value.toLowerCase();\n        return this.countries.filter((option) => option.country.toLowerCase().indexOf(filterValue) === 0);\n    }\n}\nGuessingFormComponent.ɵfac = function GuessingFormComponent_Factory(t) { return new (t || GuessingFormComponent)(i0.ɵɵdirectiveInject(i1.ApiService), i0.ɵɵdirectiveInject(i2.MatSnackBar)); };\nGuessingFormComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: GuessingFormComponent, selectors: [[\"app-guessing-form\"]], decls: 1, vars: 1, consts: [[4, \"ngIf\"], [1, \"form\"], [3, \"formGroup\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"country\", 3, \"matAutocomplete\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [3, \"value\"]], template: function GuessingFormComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵtemplate(0, GuessingFormComponent_ng_container_0_Template, 15, 10, \"ng-container\", 0);\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.randomCountry);\n    } }, directives: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i5.MatFormField, i5.MatLabel, i6.MatInput, i4.DefaultValueAccessor, i7.MatAutocompleteTrigger, i4.NgControlStatus, i4.FormControlName, i7.MatAutocomplete, i3.NgForOf, i8.MatOption, i9.MatButton], pipes: [i3.UpperCasePipe, i3.AsyncPipe, i3.LowerCasePipe], styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJndWVzc2luZy1mb3JtLmNvbXBvbmVudC5zY3NzIn0= */\"] });\n"]},"metadata":{},"sourceType":"module"}