{"ast":null,"code":"import { EventEmitter } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { map, startWith } from \"rxjs\";\nimport { GameStatus } from \"src/app/shared/models/models\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"@ngneat/transloco\";\nimport * as i3 from \"src/app/core/services/common.service\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/autocomplete\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"@angular/material/core\";\nimport * as i10 from \"@angular/material/button\";\nimport * as i11 from \"../guessing-list/guessing-list.component\";\n\nfunction GuessingFormComponent_mat_option_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 8);\n    i0.ɵɵpipe(1, \"uppercase\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"uppercase\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", i0.ɵɵpipeBind1(1, 2, option_r3 == null ? null : option_r3.country));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 4, option_r3 == null ? null : option_r3.country), \" \");\n  }\n}\n\nfunction GuessingFormComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 9)(1, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function GuessingFormComponent_div_17_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onPlayAgain();\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"transloco\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 1, \"app.playAgain\"), \" \");\n  }\n}\n\nexport class GuessingFormComponent {\n  constructor(matSnackBar, transloco, commonService) {\n    this.matSnackBar = matSnackBar;\n    this.transloco = transloco;\n    this.commonService = commonService;\n    this.playAgain = new EventEmitter();\n    this.guesses = [];\n    this.gameStatus = GameStatus.IN_PROGRESS;\n    const getGuesses = JSON.parse(localStorage.getItem(\"GUESSES\"));\n    getGuesses ? this.guesses = getGuesses : this.guesses = [];\n  }\n\n  get status() {\n    return GameStatus;\n  }\n\n  ngOnInit() {\n    this.initForm();\n    this.decryptCountry();\n    this.autoCompletion();\n\n    window.onbeforeunload = () => this.ngOnDestroy();\n  }\n\n  initForm() {\n    this.guessingForm = new FormGroup({\n      country: new FormControl(null)\n    });\n  }\n\n  onSubmitGuess() {\n    var _a;\n\n    this.recentGuess = (_a = this.guessingForm.get(\"country\")) === null || _a === void 0 ? void 0 : _a.value.toUpperCase();\n    const correctCountry = this.randomCountry.country.toUpperCase();\n\n    if (!this.checkArray(this.countries, this.recentGuess)) {\n      this.initMatSnackBar(this.transloco.translate(\"app.unknownCountry\"), \"\", 1000);\n    } else if (this.checkArray(this.guesses, this.recentGuess)) {\n      this.initMatSnackBar(this.transloco.translate(\"app.countryAlreadyGuessed\"), \"\", 1000);\n    } else {\n      const regexCurrentGuess = new RegExp(\"(^|s)\" + this.recentGuess + \"(s|$)\");\n      const findCountry = this.countries.find(guess => guess.country.toUpperCase().match(regexCurrentGuess));\n      this.guesses.push(findCountry);\n      localStorage.setItem(\"GUESSES\", JSON.stringify(this.guesses));\n    }\n\n    if (this.guesses.length === 5 && this.recentGuess !== correctCountry) {\n      this.gameEnd(\"app.theAnswerWas\", GameStatus.LOST, correctCountry);\n    } else if (this.recentGuess === correctCountry) {\n      this.gameEnd(\"app.correct\", GameStatus.WON, \"\");\n    }\n\n    this.autoCompletion();\n    this.guesses = JSON.parse(localStorage.getItem(\"GUESSES\"));\n    this.guessingForm.reset();\n  }\n\n  onPlayAgain() {\n    var _a;\n\n    this.randomCountry = this.commonService.generateRandomCountry();\n    this.playAgain.emit(this.randomCountry);\n    this.resetGuesses();\n    this.matSnackBar.dismiss();\n    (_a = this.guessingForm.get(\"country\")) === null || _a === void 0 ? void 0 : _a.enable();\n    this.guessingForm.reset();\n    this.gameStatus = GameStatus.IN_PROGRESS;\n    this.decryptCountry();\n  }\n\n  gameEnd(notificationMessage, gameStatus, correctCountry) {\n    var _a;\n\n    this.initMatSnackBar(this.transloco.translate(notificationMessage) + correctCountry, this.transloco.translate(\"app.close\"), undefined);\n    (_a = this.guessingForm.get(\"country\")) === null || _a === void 0 ? void 0 : _a.disable();\n    this.gameStatus = gameStatus;\n  }\n\n  resetGuesses() {\n    localStorage.removeItem(\"GUESSES\");\n    this.guesses = [];\n  }\n\n  decryptCountry() {\n    var _a;\n\n    const decryptCountry = this.commonService.decrypt((_a = this.randomCountry) === null || _a === void 0 ? void 0 : _a.country);\n    this.randomCountry.country = decryptCountry;\n    console.log(decryptCountry);\n  }\n\n  autoCompletion() {\n    this.filteredOptions = this.guessingForm.controls[\"country\"].valueChanges.pipe(startWith(\"\"), map(value => this.filter(value)));\n  }\n\n  checkArray(array, value) {\n    const regex = new RegExp(\"(^|s)\" + value + \"(s|$)\");\n    return array.some(guess => guess.country.toUpperCase().match(regex));\n  }\n\n  initMatSnackBar(message, closeButton, duration) {\n    this.matSnackBar.open(message, closeButton, {\n      verticalPosition: \"top\",\n      duration: duration\n    });\n  }\n\n  filter(value) {\n    const filterValue = value === null || value === void 0 ? void 0 : value.toLowerCase();\n    return this.countries.filter(option => option.country.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n  ngOnDestroy() {\n    if (this.gameStatus === GameStatus.WON || this.gameStatus === GameStatus.LOST) {\n      this.commonService.generateRandomCountry();\n      this.resetGuesses();\n    }\n  }\n\n}\n\nGuessingFormComponent.ɵfac = function GuessingFormComponent_Factory(t) {\n  return new (t || GuessingFormComponent)(i0.ɵɵdirectiveInject(i1.MatSnackBar), i0.ɵɵdirectiveInject(i2.TranslocoService), i0.ɵɵdirectiveInject(i3.CommonService));\n};\n\nGuessingFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GuessingFormComponent,\n  selectors: [[\"app-guessing-form\"]],\n  inputs: {\n    countries: \"countries\",\n    randomCountry: \"randomCountry\"\n  },\n  outputs: {\n    playAgain: \"playAgain\"\n  },\n  decls: 18,\n  vars: 20,\n  consts: [[1, \"wrapper\"], [3, \"formGroup\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"country\", \"matAutocompletePosition\", \"below\", 3, \"matAutocomplete\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [3, \"gameStatus\", \"guesses\", \"randomCountry\"], [\"class\", \"play-again-btn\", 4, \"ngIf\"], [3, \"value\"], [1, \"play-again-btn\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"]],\n  template: function GuessingFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"mat-form-field\")(3, \"mat-label\");\n      i0.ɵɵtext(4);\n      i0.ɵɵpipe(5, \"transloco\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 2);\n      i0.ɵɵelementStart(7, \"mat-autocomplete\", null, 3);\n      i0.ɵɵtemplate(9, GuessingFormComponent_mat_option_9_Template, 4, 6, \"mat-option\", 4);\n      i0.ɵɵpipe(10, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function GuessingFormComponent_Template_button_click_11_listener() {\n        return ctx.onSubmitGuess();\n      });\n      i0.ɵɵpipe(12, \"uppercase\");\n      i0.ɵɵpipe(13, \"uppercase\");\n      i0.ɵɵtext(14);\n      i0.ɵɵpipe(15, \"transloco\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(16, \"app-guessing-list\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(17, GuessingFormComponent_div_17_Template, 4, 3, \"div\", 7);\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(8);\n\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.guessingForm);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 10, \"app.enterCountry\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"matAutocomplete\", _r0);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(10, 12, ctx.filteredOptions));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", (ctx.guesses == null ? null : ctx.guesses.length) === 5 || i0.ɵɵpipeBind1(12, 14, ctx.recentGuess) === i0.ɵɵpipeBind1(13, 16, ctx.randomCountry == null ? null : ctx.randomCountry.country));\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(15, 18, \"app.guess\"), \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"gameStatus\", ctx.gameStatus)(\"guesses\", ctx.guesses)(\"randomCountry\", ctx.randomCountry);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.guesses == null ? null : ctx.guesses.length) === 5 || ctx.gameStatus === ctx.status.WON);\n    }\n  },\n  directives: [i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i5.MatFormField, i5.MatLabel, i6.MatInput, i4.DefaultValueAccessor, i7.MatAutocompleteTrigger, i4.NgControlStatus, i4.FormControlName, i7.MatAutocomplete, i8.NgForOf, i9.MatOption, i10.MatButton, i11.GuessingListComponent, i8.NgIf],\n  pipes: [i2.TranslocoPipe, i8.UpperCasePipe, i8.AsyncPipe],\n  styles: [\".wrapper[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n}\\n\\n.mat-form-field[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n\\n.mat-raised-button[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImd1ZXNzaW5nLWZvcm0uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFBO0VBQ0Esc0JBQUE7QUFDRjs7QUFFQTtFQUNFLFdBQUE7QUFDRjs7QUFFQTtFQUNFLFdBQUE7QUFDRiIsImZpbGUiOiJndWVzc2luZy1mb3JtLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLndyYXBwZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuXG4ubWF0LWZvcm0tZmllbGQge1xuICB3aWR0aDogMTAwJTtcbn1cblxuLm1hdC1yYWlzZWQtYnV0dG9uIHtcbiAgd2lkdGg6IDEwMCU7XG59Il19 */\"]\n});","map":{"version":3,"sources":["/Users/elin/web/country-game/src/app/core/components/game-page/guessing-form/guessing-form.component.ts"],"names":["EventEmitter","FormControl","FormGroup","map","startWith","GameStatus","i0","i1","i2","i3","i4","i5","i6","i7","i8","i9","i10","i11","GuessingFormComponent_mat_option_9_Template","rf","ctx","ɵɵelementStart","ɵɵpipe","ɵɵtext","ɵɵelementEnd","option_r3","$implicit","ɵɵproperty","ɵɵpipeBind1","country","ɵɵadvance","ɵɵtextInterpolate1","GuessingFormComponent_div_17_Template","_r5","ɵɵgetCurrentView","ɵɵlistener","GuessingFormComponent_div_17_Template_button_click_1_listener","ɵɵrestoreView","ctx_r4","ɵɵnextContext","onPlayAgain","GuessingFormComponent","constructor","matSnackBar","transloco","commonService","playAgain","guesses","gameStatus","IN_PROGRESS","getGuesses","JSON","parse","localStorage","getItem","status","ngOnInit","initForm","decryptCountry","autoCompletion","window","onbeforeunload","ngOnDestroy","guessingForm","onSubmitGuess","_a","recentGuess","get","value","toUpperCase","correctCountry","randomCountry","checkArray","countries","initMatSnackBar","translate","regexCurrentGuess","RegExp","findCountry","find","guess","match","push","setItem","stringify","length","gameEnd","LOST","WON","reset","generateRandomCountry","emit","resetGuesses","dismiss","enable","notificationMessage","undefined","disable","removeItem","decrypt","console","log","filteredOptions","controls","valueChanges","pipe","filter","array","regex","some","message","closeButton","duration","open","verticalPosition","filterValue","toLowerCase","option","indexOf","ɵfac","GuessingFormComponent_Factory","t","ɵɵdirectiveInject","MatSnackBar","TranslocoService","CommonService","ɵcmp","ɵɵdefineComponent","type","selectors","inputs","outputs","decls","vars","consts","template","GuessingFormComponent_Template","ɵɵelement","ɵɵtemplate","GuessingFormComponent_Template_button_click_11_listener","_r0","ɵɵreference","ɵɵtextInterpolate","directives","ɵNgNoValidate","NgControlStatusGroup","FormGroupDirective","MatFormField","MatLabel","MatInput","DefaultValueAccessor","MatAutocompleteTrigger","NgControlStatus","FormControlName","MatAutocomplete","NgForOf","MatOption","MatButton","GuessingListComponent","NgIf","pipes","TranslocoPipe","UpperCasePipe","AsyncPipe","styles"],"mappings":"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","sourcesContent":["import { EventEmitter, } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { map, startWith } from \"rxjs\";\nimport { GameStatus } from \"src/app/shared/models/models\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"@ngneat/transloco\";\nimport * as i3 from \"src/app/core/services/common.service\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/autocomplete\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"@angular/material/core\";\nimport * as i10 from \"@angular/material/button\";\nimport * as i11 from \"../guessing-list/guessing-list.component\";\nfunction GuessingFormComponent_mat_option_9_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 8);\n    i0.ɵɵpipe(1, \"uppercase\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"uppercase\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const option_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", i0.ɵɵpipeBind1(1, 2, option_r3 == null ? null : option_r3.country));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 4, option_r3 == null ? null : option_r3.country), \" \");\n} }\nfunction GuessingFormComponent_div_17_Template(rf, ctx) { if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 9)(1, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function GuessingFormComponent_div_17_Template_button_click_1_listener() { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return ctx_r4.onPlayAgain(); });\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"transloco\");\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 1, \"app.playAgain\"), \" \");\n} }\nexport class GuessingFormComponent {\n    constructor(matSnackBar, transloco, commonService) {\n        this.matSnackBar = matSnackBar;\n        this.transloco = transloco;\n        this.commonService = commonService;\n        this.playAgain = new EventEmitter();\n        this.guesses = [];\n        this.gameStatus = GameStatus.IN_PROGRESS;\n        const getGuesses = JSON.parse(localStorage.getItem(\"GUESSES\"));\n        getGuesses ? (this.guesses = getGuesses) : (this.guesses = []);\n    }\n    get status() {\n        return GameStatus;\n    }\n    ngOnInit() {\n        this.initForm();\n        this.decryptCountry();\n        this.autoCompletion();\n        window.onbeforeunload = () => this.ngOnDestroy();\n    }\n    initForm() {\n        this.guessingForm = new FormGroup({\n            country: new FormControl(null),\n        });\n    }\n    onSubmitGuess() {\n        var _a;\n        this.recentGuess =\n            (_a = this.guessingForm.get(\"country\")) === null || _a === void 0 ? void 0 : _a.value.toUpperCase();\n        const correctCountry = this.randomCountry.country.toUpperCase();\n        if (!this.checkArray(this.countries, this.recentGuess)) {\n            this.initMatSnackBar(this.transloco.translate(\"app.unknownCountry\"), \"\", 1000);\n        }\n        else if (this.checkArray(this.guesses, this.recentGuess)) {\n            this.initMatSnackBar(this.transloco.translate(\"app.countryAlreadyGuessed\"), \"\", 1000);\n        }\n        else {\n            const regexCurrentGuess = new RegExp(\"(^|s)\" + this.recentGuess + \"(s|$)\");\n            const findCountry = this.countries.find((guess) => guess.country.toUpperCase().match(regexCurrentGuess));\n            this.guesses.push(findCountry);\n            localStorage.setItem(\"GUESSES\", JSON.stringify(this.guesses));\n        }\n        if (this.guesses.length === 5 && this.recentGuess !== correctCountry) {\n            this.gameEnd(\"app.theAnswerWas\", GameStatus.LOST, correctCountry);\n        }\n        else if (this.recentGuess === correctCountry) {\n            this.gameEnd(\"app.correct\", GameStatus.WON, \"\");\n        }\n        this.autoCompletion();\n        this.guesses = JSON.parse(localStorage.getItem(\"GUESSES\"));\n        this.guessingForm.reset();\n    }\n    onPlayAgain() {\n        var _a;\n        this.randomCountry = this.commonService.generateRandomCountry();\n        this.playAgain.emit(this.randomCountry);\n        this.resetGuesses();\n        this.matSnackBar.dismiss();\n        (_a = this.guessingForm.get(\"country\")) === null || _a === void 0 ? void 0 : _a.enable();\n        this.guessingForm.reset();\n        this.gameStatus = GameStatus.IN_PROGRESS;\n        this.decryptCountry();\n    }\n    gameEnd(notificationMessage, gameStatus, correctCountry) {\n        var _a;\n        this.initMatSnackBar(this.transloco.translate(notificationMessage) + correctCountry, this.transloco.translate(\"app.close\"), undefined);\n        (_a = this.guessingForm.get(\"country\")) === null || _a === void 0 ? void 0 : _a.disable();\n        this.gameStatus = gameStatus;\n    }\n    resetGuesses() {\n        localStorage.removeItem(\"GUESSES\");\n        this.guesses = [];\n    }\n    decryptCountry() {\n        var _a;\n        const decryptCountry = this.commonService.decrypt((_a = this.randomCountry) === null || _a === void 0 ? void 0 : _a.country);\n        this.randomCountry.country = decryptCountry;\n        console.log(decryptCountry);\n    }\n    autoCompletion() {\n        this.filteredOptions = this.guessingForm.controls[\"country\"].valueChanges.pipe(startWith(\"\"), map((value) => this.filter(value)));\n    }\n    checkArray(array, value) {\n        const regex = new RegExp(\"(^|s)\" + value + \"(s|$)\");\n        return array.some((guess) => guess.country.toUpperCase().match(regex));\n    }\n    initMatSnackBar(message, closeButton, duration) {\n        this.matSnackBar.open(message, closeButton, {\n            verticalPosition: \"top\",\n            duration: duration,\n        });\n    }\n    filter(value) {\n        const filterValue = value === null || value === void 0 ? void 0 : value.toLowerCase();\n        return this.countries.filter((option) => option.country.toLowerCase().indexOf(filterValue) === 0);\n    }\n    ngOnDestroy() {\n        if (this.gameStatus === GameStatus.WON ||\n            this.gameStatus === GameStatus.LOST) {\n            this.commonService.generateRandomCountry();\n            this.resetGuesses();\n        }\n    }\n}\nGuessingFormComponent.ɵfac = function GuessingFormComponent_Factory(t) { return new (t || GuessingFormComponent)(i0.ɵɵdirectiveInject(i1.MatSnackBar), i0.ɵɵdirectiveInject(i2.TranslocoService), i0.ɵɵdirectiveInject(i3.CommonService)); };\nGuessingFormComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: GuessingFormComponent, selectors: [[\"app-guessing-form\"]], inputs: { countries: \"countries\", randomCountry: \"randomCountry\" }, outputs: { playAgain: \"playAgain\" }, decls: 18, vars: 20, consts: [[1, \"wrapper\"], [3, \"formGroup\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"country\", \"matAutocompletePosition\", \"below\", 3, \"matAutocomplete\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [3, \"gameStatus\", \"guesses\", \"randomCountry\"], [\"class\", \"play-again-btn\", 4, \"ngIf\"], [3, \"value\"], [1, \"play-again-btn\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"]], template: function GuessingFormComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"mat-form-field\")(3, \"mat-label\");\n        i0.ɵɵtext(4);\n        i0.ɵɵpipe(5, \"transloco\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"input\", 2);\n        i0.ɵɵelementStart(7, \"mat-autocomplete\", null, 3);\n        i0.ɵɵtemplate(9, GuessingFormComponent_mat_option_9_Template, 4, 6, \"mat-option\", 4);\n        i0.ɵɵpipe(10, \"async\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(11, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function GuessingFormComponent_Template_button_click_11_listener() { return ctx.onSubmitGuess(); });\n        i0.ɵɵpipe(12, \"uppercase\");\n        i0.ɵɵpipe(13, \"uppercase\");\n        i0.ɵɵtext(14);\n        i0.ɵɵpipe(15, \"transloco\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(16, \"app-guessing-list\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(17, GuessingFormComponent_div_17_Template, 4, 3, \"div\", 7);\n    } if (rf & 2) {\n        const _r0 = i0.ɵɵreference(8);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.guessingForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 10, \"app.enterCountry\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"matAutocomplete\", _r0);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(10, 12, ctx.filteredOptions));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", (ctx.guesses == null ? null : ctx.guesses.length) === 5 || i0.ɵɵpipeBind1(12, 14, ctx.recentGuess) === i0.ɵɵpipeBind1(13, 16, ctx.randomCountry == null ? null : ctx.randomCountry.country));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(15, 18, \"app.guess\"), \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"gameStatus\", ctx.gameStatus)(\"guesses\", ctx.guesses)(\"randomCountry\", ctx.randomCountry);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.guesses == null ? null : ctx.guesses.length) === 5 || ctx.gameStatus === ctx.status.WON);\n    } }, directives: [i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i5.MatFormField, i5.MatLabel, i6.MatInput, i4.DefaultValueAccessor, i7.MatAutocompleteTrigger, i4.NgControlStatus, i4.FormControlName, i7.MatAutocomplete, i8.NgForOf, i9.MatOption, i10.MatButton, i11.GuessingListComponent, i8.NgIf], pipes: [i2.TranslocoPipe, i8.UpperCasePipe, i8.AsyncPipe], styles: [\".wrapper[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n}\\n\\n.mat-form-field[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n\\n.mat-raised-button[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImd1ZXNzaW5nLWZvcm0uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFBO0VBQ0Esc0JBQUE7QUFDRjs7QUFFQTtFQUNFLFdBQUE7QUFDRjs7QUFFQTtFQUNFLFdBQUE7QUFDRiIsImZpbGUiOiJndWVzc2luZy1mb3JtLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLndyYXBwZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuXG4ubWF0LWZvcm0tZmllbGQge1xuICB3aWR0aDogMTAwJTtcbn1cblxuLm1hdC1yYWlzZWQtYnV0dG9uIHtcbiAgd2lkdGg6IDEwMCU7XG59Il19 */\"] });\n"]},"metadata":{},"sourceType":"module"}