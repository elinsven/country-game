{"ast":null,"code":"import { FormControl, FormGroup } from '@angular/forms';\nimport { map, startWith } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"src/app/services/get-country.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/autocomplete\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/core\";\nimport * as i9 from \"@angular/material/button\";\nimport * as i10 from \"../guessing-list/guessing-list.component\";\n\nfunction GuessingFormComponent_mat_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 7);\n    i0.ɵɵpipe(1, \"uppercase\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"uppercase\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", i0.ɵɵpipeBind1(1, 2, option_r3 == null ? null : option_r3.country));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 4, option_r3 == null ? null : option_r3.country), \" \");\n  }\n}\n\nfunction GuessingFormComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 8)(1, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function GuessingFormComponent_div_15_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.playAgain();\n    });\n    i0.ɵɵtext(2, \"PLAY AGAIN\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nexport class GuessingFormComponent {\n  constructor(matSnackBar, getCountryService) {\n    var _a, _b;\n\n    this.matSnackBar = matSnackBar;\n    this.getCountryService = getCountryService;\n    this.guesses = [];\n    this.gameStatus = \"Started\";\n    this.countries = this.getCountryService.getCountries();\n    (_a = this.getCountryService.getRandomCountry()) === null || _a === void 0 ? void 0 : _a.subscribe(data => {\n      this.randomCountry = data;\n      console.log(\"Guessing form\", this.randomCountry);\n    });\n    (_b = this.getCountryService.getGuesses()) === null || _b === void 0 ? void 0 : _b.subscribe(data => {\n      this.guesses = data;\n    });\n  }\n\n  ngOnInit() {\n    this.initForm();\n    this.guessingForm.controls[\"country\"].valueChanges.subscribe(data => {\n      console.log(data);\n    });\n    this.filteredOptions = this.guessingForm.controls[\"country\"].valueChanges.pipe(startWith(\"\", 1), map(value => this._filter(value)));\n  }\n\n  initForm() {\n    this.guessingForm = new FormGroup({\n      country: new FormControl(\"\")\n    });\n  }\n\n  submitGuess() {\n    var _a, _b, _c;\n\n    this.recentGuess = (_a = this.guessingForm.controls[\"country\"]) === null || _a === void 0 ? void 0 : _a.value;\n\n    if (this.recentGuess == null || !this._checkArray(this.countries, this.recentGuess)) {\n      this._initMatSnackBar(\"Unknown country\", \"\", 1000);\n    } else if (this._checkArray(this.guesses, this.recentGuess)) {\n      this._initMatSnackBar(\"Country already guessed\", \"\", 1000);\n    } else {\n      const regexCurrentGuess = new RegExp(\"(^|\\s)\" + this.recentGuess + \"(\\s|$)\");\n      const findCountry = this.countries.find(guess => guess.country.toUpperCase().match(regexCurrentGuess));\n      this.getCountryService.setGuesses(findCountry);\n    }\n\n    this.filteredOptions = this.guessingForm.controls[\"country\"].valueChanges.pipe(startWith(\"\"), map(value => this._filter(value)));\n    this.guessingForm.reset();\n    const correctCountry = this.randomCountry.country.toUpperCase();\n\n    if (this.guesses.length === 5 && ((_b = this.recentGuess) === null || _b === void 0 ? void 0 : _b.toUpperCase()) !== correctCountry) {\n      this._initMatSnackBar(`THE ANSWER WAS ${correctCountry}`, \"Close\", undefined);\n\n      this.guessingForm.controls[\"country\"].disable();\n    } else if (((_c = this.recentGuess) === null || _c === void 0 ? void 0 : _c.toUpperCase()) === correctCountry) {\n      this._initMatSnackBar(\"CORRECT\", \"Close\", undefined);\n\n      this.guessingForm.controls[\"country\"].disable();\n      this.gameStatus = \"Won\";\n    }\n  }\n\n  playAgain() {\n    const random = Math.floor(Math.random() * this.countries.length);\n    this.randomCountry = this.countries[random];\n    this.getCountryService.setRandomCountry(this.randomCountry);\n    this.getCountryService.emptyGuesses();\n    this.matSnackBar.dismiss();\n    this.guessingForm.controls[\"country\"].enable();\n    this.gameStatus = \"Started\";\n  }\n\n  _checkArray(array, value) {\n    const regex = new RegExp(\"(^|\\s)\" + value + \"(\\s|$)\");\n    return array.some(guess => guess.country.toUpperCase().match(regex));\n  }\n\n  _initMatSnackBar(message, closeButton, duration) {\n    this.matSnackBar.open(message, closeButton, {\n      verticalPosition: \"top\",\n      duration: duration\n    });\n  }\n\n  _filter(value) {\n    const filterValue = value === null || value === void 0 ? void 0 : value.toLowerCase();\n    return this.countries.filter(option => option.country.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n}\n\nGuessingFormComponent.ɵfac = function GuessingFormComponent_Factory(t) {\n  return new (t || GuessingFormComponent)(i0.ɵɵdirectiveInject(i1.MatSnackBar), i0.ɵɵdirectiveInject(i2.GetCountryService));\n};\n\nGuessingFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GuessingFormComponent,\n  selectors: [[\"app-guessing-form\"]],\n  decls: 16,\n  vars: 11,\n  consts: [[1, \"form\"], [3, \"formGroup\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"country\", \"matAutocompletePosition\", \"below\", 3, \"matAutocomplete\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [\"class\", \"play-again-btn\", 4, \"ngIf\"], [3, \"value\"], [1, \"play-again-btn\"], [\"mat-raised-button\", \"\", 3, \"click\"]],\n  template: function GuessingFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"mat-form-field\")(3, \"mat-label\");\n      i0.ɵɵtext(4, \"ENTER COUNTRY\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"input\", 2);\n      i0.ɵɵelementStart(6, \"mat-autocomplete\", null, 3);\n      i0.ɵɵtemplate(8, GuessingFormComponent_mat_option_8_Template, 4, 6, \"mat-option\", 4);\n      i0.ɵɵpipe(9, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function GuessingFormComponent_Template_button_click_10_listener() {\n        return ctx.submitGuess();\n      });\n      i0.ɵɵpipe(11, \"uppercase\");\n      i0.ɵɵpipe(12, \"uppercase\");\n      i0.ɵɵtext(13, \"GUESS\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(14, \"app-guessing-list\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(15, GuessingFormComponent_div_15_Template, 3, 0, \"div\", 6);\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(7);\n\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.guessingForm);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"matAutocomplete\", _r0);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(9, 5, ctx.filteredOptions));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", (ctx.guesses == null ? null : ctx.guesses.length) === 5 || i0.ɵɵpipeBind1(11, 7, ctx.recentGuess) === i0.ɵɵpipeBind1(12, 9, ctx.randomCountry == null ? null : ctx.randomCountry.country));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", (ctx.guesses == null ? null : ctx.guesses.length) === 5 || ctx.gameStatus === \"Won\");\n    }\n  },\n  directives: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i4.MatFormField, i4.MatLabel, i5.MatInput, i3.DefaultValueAccessor, i6.MatAutocompleteTrigger, i3.NgControlStatus, i3.FormControlName, i6.MatAutocomplete, i7.NgForOf, i8.MatOption, i9.MatButton, i10.GuessingListComponent, i7.NgIf],\n  pipes: [i7.UpperCasePipe, i7.AsyncPipe],\n  styles: [\"form[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  width: 80vw;\\n  max-width: 450px;\\n}\\n\\n.mat-form-field[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n\\n.mat-raised-button[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImd1ZXNzaW5nLWZvcm0uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSx1QkFBQTtFQUNBLFdBQUE7RUFDQSxnQkFBQTtBQUNKOztBQUVBO0VBQ0ksV0FBQTtBQUNKOztBQUVBO0VBQ0ksV0FBQTtBQUNKIiwiZmlsZSI6Imd1ZXNzaW5nLWZvcm0uY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJmb3JtIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgd2lkdGg6IDgwdnc7XG4gICAgbWF4LXdpZHRoOiA0NTBweDtcbn1cblxuLm1hdC1mb3JtLWZpZWxkIHtcbiAgICB3aWR0aDogMTAwJTtcbn1cblxuLm1hdC1yYWlzZWQtYnV0dG9uIHtcbiAgICB3aWR0aDogMTAwJTtcbn0iXX0= */\"]\n});","map":{"version":3,"sources":["/Users/elin/web/country-game/src/app/components/guessing-form/guessing-form.component.ts"],"names":["FormControl","FormGroup","map","startWith","i0","i1","i2","i3","i4","i5","i6","i7","i8","i9","i10","GuessingFormComponent_mat_option_8_Template","rf","ctx","ɵɵelementStart","ɵɵpipe","ɵɵtext","ɵɵelementEnd","option_r3","$implicit","ɵɵproperty","ɵɵpipeBind1","country","ɵɵadvance","ɵɵtextInterpolate1","GuessingFormComponent_div_15_Template","_r5","ɵɵgetCurrentView","ɵɵlistener","GuessingFormComponent_div_15_Template_button_click_1_listener","ɵɵrestoreView","ctx_r4","ɵɵnextContext","playAgain","GuessingFormComponent","constructor","matSnackBar","getCountryService","_a","_b","guesses","gameStatus","countries","getCountries","getRandomCountry","subscribe","data","randomCountry","console","log","getGuesses","ngOnInit","initForm","guessingForm","controls","valueChanges","filteredOptions","pipe","value","_filter","submitGuess","_c","recentGuess","_checkArray","_initMatSnackBar","regexCurrentGuess","RegExp","findCountry","find","guess","toUpperCase","match","setGuesses","reset","correctCountry","length","undefined","disable","random","Math","floor","setRandomCountry","emptyGuesses","dismiss","enable","array","regex","some","message","closeButton","duration","open","verticalPosition","filterValue","toLowerCase","filter","option","indexOf","ɵfac","GuessingFormComponent_Factory","t","ɵɵdirectiveInject","MatSnackBar","GetCountryService","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","consts","template","GuessingFormComponent_Template","ɵɵelement","ɵɵtemplate","GuessingFormComponent_Template_button_click_10_listener","_r0","ɵɵreference","directives","ɵNgNoValidate","NgControlStatusGroup","FormGroupDirective","MatFormField","MatLabel","MatInput","DefaultValueAccessor","MatAutocompleteTrigger","NgControlStatus","FormControlName","MatAutocomplete","NgForOf","MatOption","MatButton","GuessingListComponent","NgIf","pipes","UpperCasePipe","AsyncPipe","styles"],"mappings":"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","sourcesContent":["import { FormControl, FormGroup } from '@angular/forms';\nimport { map, startWith } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"src/app/services/get-country.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/autocomplete\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/core\";\nimport * as i9 from \"@angular/material/button\";\nimport * as i10 from \"../guessing-list/guessing-list.component\";\nfunction GuessingFormComponent_mat_option_8_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 7);\n    i0.ɵɵpipe(1, \"uppercase\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"uppercase\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const option_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", i0.ɵɵpipeBind1(1, 2, option_r3 == null ? null : option_r3.country));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 4, option_r3 == null ? null : option_r3.country), \" \");\n} }\nfunction GuessingFormComponent_div_15_Template(rf, ctx) { if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 8)(1, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function GuessingFormComponent_div_15_Template_button_click_1_listener() { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return ctx_r4.playAgain(); });\n    i0.ɵɵtext(2, \"PLAY AGAIN\");\n    i0.ɵɵelementEnd()();\n} }\nexport class GuessingFormComponent {\n    constructor(matSnackBar, getCountryService) {\n        var _a, _b;\n        this.matSnackBar = matSnackBar;\n        this.getCountryService = getCountryService;\n        this.guesses = [];\n        this.gameStatus = \"Started\";\n        this.countries = this.getCountryService.getCountries();\n        (_a = this.getCountryService.getRandomCountry()) === null || _a === void 0 ? void 0 : _a.subscribe((data) => {\n            this.randomCountry = data;\n            console.log(\"Guessing form\", this.randomCountry);\n        });\n        (_b = this.getCountryService.getGuesses()) === null || _b === void 0 ? void 0 : _b.subscribe((data) => {\n            this.guesses = data;\n        });\n    }\n    ngOnInit() {\n        this.initForm();\n        this.guessingForm.controls[\"country\"].valueChanges.subscribe((data) => {\n            console.log(data);\n        });\n        this.filteredOptions = this.guessingForm.controls[\"country\"].valueChanges.pipe(startWith(\"\", 1), map(value => this._filter(value)));\n    }\n    initForm() {\n        this.guessingForm = new FormGroup({\n            country: new FormControl(\"\")\n        });\n    }\n    submitGuess() {\n        var _a, _b, _c;\n        this.recentGuess = (_a = this.guessingForm.controls[\"country\"]) === null || _a === void 0 ? void 0 : _a.value;\n        if (this.recentGuess == null || !this._checkArray(this.countries, this.recentGuess)) {\n            this._initMatSnackBar(\"Unknown country\", \"\", 1000);\n        }\n        else if (this._checkArray(this.guesses, this.recentGuess)) {\n            this._initMatSnackBar(\"Country already guessed\", \"\", 1000);\n        }\n        else {\n            const regexCurrentGuess = new RegExp(\"(^|\\s)\" + this.recentGuess + \"(\\s|$)\");\n            const findCountry = this.countries.find((guess) => guess.country.toUpperCase().match(regexCurrentGuess));\n            this.getCountryService.setGuesses(findCountry);\n        }\n        this.filteredOptions = this.guessingForm.controls[\"country\"].valueChanges.pipe(startWith(\"\"), map(value => this._filter(value)));\n        this.guessingForm.reset();\n        const correctCountry = this.randomCountry.country.toUpperCase();\n        if (this.guesses.length === 5 && ((_b = this.recentGuess) === null || _b === void 0 ? void 0 : _b.toUpperCase()) !== correctCountry) {\n            this._initMatSnackBar(`THE ANSWER WAS ${correctCountry}`, \"Close\", undefined);\n            this.guessingForm.controls[\"country\"].disable();\n        }\n        else if (((_c = this.recentGuess) === null || _c === void 0 ? void 0 : _c.toUpperCase()) === correctCountry) {\n            this._initMatSnackBar(\"CORRECT\", \"Close\", undefined);\n            this.guessingForm.controls[\"country\"].disable();\n            this.gameStatus = \"Won\";\n        }\n    }\n    playAgain() {\n        const random = Math.floor(Math.random() * this.countries.length);\n        this.randomCountry = this.countries[random];\n        this.getCountryService.setRandomCountry(this.randomCountry);\n        this.getCountryService.emptyGuesses();\n        this.matSnackBar.dismiss();\n        this.guessingForm.controls[\"country\"].enable();\n        this.gameStatus = \"Started\";\n    }\n    _checkArray(array, value) {\n        const regex = new RegExp(\"(^|\\s)\" + value + \"(\\s|$)\");\n        return array.some((guess) => guess.country.toUpperCase().match(regex));\n    }\n    _initMatSnackBar(message, closeButton, duration) {\n        this.matSnackBar.open(message, closeButton, {\n            verticalPosition: \"top\",\n            duration: duration\n        });\n    }\n    _filter(value) {\n        const filterValue = value === null || value === void 0 ? void 0 : value.toLowerCase();\n        return this.countries.filter((option) => option.country.toLowerCase().indexOf(filterValue) === 0);\n    }\n}\nGuessingFormComponent.ɵfac = function GuessingFormComponent_Factory(t) { return new (t || GuessingFormComponent)(i0.ɵɵdirectiveInject(i1.MatSnackBar), i0.ɵɵdirectiveInject(i2.GetCountryService)); };\nGuessingFormComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: GuessingFormComponent, selectors: [[\"app-guessing-form\"]], decls: 16, vars: 11, consts: [[1, \"form\"], [3, \"formGroup\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"country\", \"matAutocompletePosition\", \"below\", 3, \"matAutocomplete\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [\"class\", \"play-again-btn\", 4, \"ngIf\"], [3, \"value\"], [1, \"play-again-btn\"], [\"mat-raised-button\", \"\", 3, \"click\"]], template: function GuessingFormComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"mat-form-field\")(3, \"mat-label\");\n        i0.ɵɵtext(4, \"ENTER COUNTRY\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"input\", 2);\n        i0.ɵɵelementStart(6, \"mat-autocomplete\", null, 3);\n        i0.ɵɵtemplate(8, GuessingFormComponent_mat_option_8_Template, 4, 6, \"mat-option\", 4);\n        i0.ɵɵpipe(9, \"async\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function GuessingFormComponent_Template_button_click_10_listener() { return ctx.submitGuess(); });\n        i0.ɵɵpipe(11, \"uppercase\");\n        i0.ɵɵpipe(12, \"uppercase\");\n        i0.ɵɵtext(13, \"GUESS\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(14, \"app-guessing-list\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(15, GuessingFormComponent_div_15_Template, 3, 0, \"div\", 6);\n    } if (rf & 2) {\n        const _r0 = i0.ɵɵreference(7);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.guessingForm);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"matAutocomplete\", _r0);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(9, 5, ctx.filteredOptions));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", (ctx.guesses == null ? null : ctx.guesses.length) === 5 || i0.ɵɵpipeBind1(11, 7, ctx.recentGuess) === i0.ɵɵpipeBind1(12, 9, ctx.randomCountry == null ? null : ctx.randomCountry.country));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", (ctx.guesses == null ? null : ctx.guesses.length) === 5 || ctx.gameStatus === \"Won\");\n    } }, directives: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i4.MatFormField, i4.MatLabel, i5.MatInput, i3.DefaultValueAccessor, i6.MatAutocompleteTrigger, i3.NgControlStatus, i3.FormControlName, i6.MatAutocomplete, i7.NgForOf, i8.MatOption, i9.MatButton, i10.GuessingListComponent, i7.NgIf], pipes: [i7.UpperCasePipe, i7.AsyncPipe], styles: [\"form[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  width: 80vw;\\n  max-width: 450px;\\n}\\n\\n.mat-form-field[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n\\n.mat-raised-button[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImd1ZXNzaW5nLWZvcm0uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSx1QkFBQTtFQUNBLFdBQUE7RUFDQSxnQkFBQTtBQUNKOztBQUVBO0VBQ0ksV0FBQTtBQUNKOztBQUVBO0VBQ0ksV0FBQTtBQUNKIiwiZmlsZSI6Imd1ZXNzaW5nLWZvcm0uY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJmb3JtIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgd2lkdGg6IDgwdnc7XG4gICAgbWF4LXdpZHRoOiA0NTBweDtcbn1cblxuLm1hdC1mb3JtLWZpZWxkIHtcbiAgICB3aWR0aDogMTAwJTtcbn1cblxuLm1hdC1yYWlzZWQtYnV0dG9uIHtcbiAgICB3aWR0aDogMTAwJTtcbn0iXX0= */\"] });\n"]},"metadata":{},"sourceType":"module"}