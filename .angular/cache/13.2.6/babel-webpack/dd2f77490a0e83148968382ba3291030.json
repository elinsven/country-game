{"ast":null,"code":"import { FormControl, FormGroup } from '@angular/forms';\nimport { map, startWith } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/api.service\";\nimport * as i2 from \"@angular/material/snack-bar\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/autocomplete\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/core\";\nimport * as i9 from \"@angular/material/button\";\n\nfunction GuessingFormComponent_mat_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 6);\n    i0.ɵɵpipe(1, \"uppercase\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"uppercase\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", i0.ɵɵpipeBind1(1, 2, option_r2.country));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 4, option_r2.country), \" \");\n  }\n}\n\nexport class GuessingFormComponent {\n  constructor(api, matSnackBar) {\n    this.api = api;\n    this.matSnackBar = matSnackBar;\n    this.guesses = [];\n  }\n\n  ngOnInit() {\n    this.initForm();\n  }\n\n  getCountries() {\n    this.api.getData().subscribe(res => {\n      this.countries = res;\n      this.countries.sort((a, b) => a.country > b.country ? 1 : -1);\n      const random = Math.floor(Math.random() * this.countries.length);\n      this.randomCountry = this.countries[random];\n    }, err => {\n      console.log(err);\n    });\n  }\n\n  initForm() {\n    this.guessingForm = new FormGroup({\n      country: new FormControl(null)\n    });\n  }\n\n  submitGuess() {\n    var _a, _b, _c;\n\n    this.recentGuess = (_a = this.guessingForm.get(\"country\")) === null || _a === void 0 ? void 0 : _a.value;\n\n    if (this.recentGuess == null || !this._checkArray(this.countries, this.recentGuess)) {\n      this._initMatSnackBar(\"Unknown country\", \"\", 1000);\n    } else if (this._checkArray(this.guesses, this.recentGuess)) {\n      this._initMatSnackBar(\"Country already guessed\", \"\", 1000);\n    } else {\n      const regexCurrentGuess = new RegExp(\"(^|\\s)\" + this.recentGuess + \"(\\s|$)\");\n      const findCountry = this.countries.find(guess => guess.country.toUpperCase().match(regexCurrentGuess));\n      this.guesses.push(findCountry);\n    }\n\n    this.filteredOptions = this.guessingForm.get(\"country\").valueChanges.pipe(startWith(\"\"), map(value => this._filter(value)));\n    this.guessingForm.reset();\n    const correctCountry = this.randomCountry.country.toUpperCase();\n\n    if (this.guesses.length === 5 && ((_b = this.recentGuess) === null || _b === void 0 ? void 0 : _b.toUpperCase()) !== correctCountry) {\n      this._initMatSnackBar(`THE ANSWER WAS ${correctCountry}`, \"Close\", undefined);\n\n      this.guessingForm.controls[\"country\"].disable();\n    } else if (((_c = this.recentGuess) === null || _c === void 0 ? void 0 : _c.toUpperCase()) === correctCountry) {\n      this._initMatSnackBar(\"CORRECT\", \"Close\", undefined);\n\n      this.guessingForm;\n    }\n  }\n\n  _checkArray(array, value) {\n    const regex = new RegExp(\"(^|\\s)\" + value + \"(\\s|$)\");\n    return array.some(guess => guess.country.toUpperCase().match(regex));\n  }\n\n  _initMatSnackBar(message, closeButton, duration) {\n    this.matSnackBar.open(message, closeButton, {\n      verticalPosition: \"top\",\n      duration: duration\n    });\n  }\n\n  _filter(value) {\n    const filterValue = value === null || value === void 0 ? void 0 : value.toLowerCase();\n    return this.countries.filter(option => option.country.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n}\n\nGuessingFormComponent.ɵfac = function GuessingFormComponent_Factory(t) {\n  return new (t || GuessingFormComponent)(i0.ɵɵdirectiveInject(i1.ApiService), i0.ɵɵdirectiveInject(i2.MatSnackBar));\n};\n\nGuessingFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GuessingFormComponent,\n  selectors: [[\"app-guessing-form\"]],\n  decls: 14,\n  vars: 10,\n  consts: [[1, \"form\"], [3, \"formGroup\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"country\", 3, \"matAutocomplete\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [3, \"value\"]],\n  template: function GuessingFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"mat-form-field\")(3, \"mat-label\");\n      i0.ɵɵtext(4, \"ENTER COUNTRY\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"input\", 2);\n      i0.ɵɵelementStart(6, \"mat-autocomplete\", null, 3);\n      i0.ɵɵtemplate(8, GuessingFormComponent_mat_option_8_Template, 4, 6, \"mat-option\", 4);\n      i0.ɵɵpipe(9, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function GuessingFormComponent_Template_button_click_10_listener() {\n        return ctx.submitGuess();\n      });\n      i0.ɵɵpipe(11, \"lowercase\");\n      i0.ɵɵpipe(12, \"lowercase\");\n      i0.ɵɵtext(13, \"GUESS\");\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(7);\n\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.guessingForm);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"matAutocomplete\", _r0);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(9, 4, ctx.filteredOptions));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.guesses.length == 5 || i0.ɵɵpipeBind1(11, 6, ctx.recentGuess) == i0.ɵɵpipeBind1(12, 8, ctx.randomCountry.country));\n    }\n  },\n  directives: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i4.MatFormField, i4.MatLabel, i5.MatInput, i3.DefaultValueAccessor, i6.MatAutocompleteTrigger, i3.NgControlStatus, i3.FormControlName, i6.MatAutocomplete, i7.NgForOf, i8.MatOption, i9.MatButton],\n  pipes: [i7.UpperCasePipe, i7.AsyncPipe, i7.LowerCasePipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJndWVzc2luZy1mb3JtLmNvbXBvbmVudC5zY3NzIn0= */\"]\n});","map":{"version":3,"sources":["/Users/elin/web/country-game/src/app/components/guessing-form/guessing-form.component.ts"],"names":["FormControl","FormGroup","map","startWith","i0","i1","i2","i3","i4","i5","i6","i7","i8","i9","GuessingFormComponent_mat_option_8_Template","rf","ctx","ɵɵelementStart","ɵɵpipe","ɵɵtext","ɵɵelementEnd","option_r2","$implicit","ɵɵproperty","ɵɵpipeBind1","country","ɵɵadvance","ɵɵtextInterpolate1","GuessingFormComponent","constructor","api","matSnackBar","guesses","ngOnInit","initForm","getCountries","getData","subscribe","res","countries","sort","a","b","random","Math","floor","length","randomCountry","err","console","log","guessingForm","submitGuess","_a","_b","_c","recentGuess","get","value","_checkArray","_initMatSnackBar","regexCurrentGuess","RegExp","findCountry","find","guess","toUpperCase","match","push","filteredOptions","valueChanges","pipe","_filter","reset","correctCountry","undefined","controls","disable","array","regex","some","message","closeButton","duration","open","verticalPosition","filterValue","toLowerCase","filter","option","indexOf","ɵfac","GuessingFormComponent_Factory","t","ɵɵdirectiveInject","ApiService","MatSnackBar","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","consts","template","GuessingFormComponent_Template","ɵɵelement","ɵɵtemplate","ɵɵlistener","GuessingFormComponent_Template_button_click_10_listener","_r0","ɵɵreference","directives","ɵNgNoValidate","NgControlStatusGroup","FormGroupDirective","MatFormField","MatLabel","MatInput","DefaultValueAccessor","MatAutocompleteTrigger","NgControlStatus","FormControlName","MatAutocomplete","NgForOf","MatOption","MatButton","pipes","UpperCasePipe","AsyncPipe","LowerCasePipe","styles"],"mappings":"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","sourcesContent":["import { FormControl, FormGroup } from '@angular/forms';\nimport { map, startWith } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/api.service\";\nimport * as i2 from \"@angular/material/snack-bar\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/autocomplete\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/core\";\nimport * as i9 from \"@angular/material/button\";\nfunction GuessingFormComponent_mat_option_8_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 6);\n    i0.ɵɵpipe(1, \"uppercase\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"uppercase\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const option_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", i0.ɵɵpipeBind1(1, 2, option_r2.country));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 4, option_r2.country), \" \");\n} }\nexport class GuessingFormComponent {\n    constructor(api, matSnackBar) {\n        this.api = api;\n        this.matSnackBar = matSnackBar;\n        this.guesses = [];\n    }\n    ngOnInit() {\n        this.initForm();\n    }\n    getCountries() {\n        this.api.getData().subscribe((res) => {\n            this.countries = res;\n            this.countries.sort((a, b) => (a.country > b.country) ? 1 : -1);\n            const random = Math.floor(Math.random() * this.countries.length);\n            this.randomCountry = this.countries[random];\n        }, err => {\n            console.log(err);\n        });\n    }\n    initForm() {\n        this.guessingForm = new FormGroup({\n            country: new FormControl(null)\n        });\n    }\n    submitGuess() {\n        var _a, _b, _c;\n        this.recentGuess = (_a = this.guessingForm.get(\"country\")) === null || _a === void 0 ? void 0 : _a.value;\n        if (this.recentGuess == null || !this._checkArray(this.countries, this.recentGuess)) {\n            this._initMatSnackBar(\"Unknown country\", \"\", 1000);\n        }\n        else if (this._checkArray(this.guesses, this.recentGuess)) {\n            this._initMatSnackBar(\"Country already guessed\", \"\", 1000);\n        }\n        else {\n            const regexCurrentGuess = new RegExp(\"(^|\\s)\" + this.recentGuess + \"(\\s|$)\");\n            const findCountry = this.countries.find((guess) => guess.country.toUpperCase().match(regexCurrentGuess));\n            this.guesses.push(findCountry);\n        }\n        this.filteredOptions = this.guessingForm.get(\"country\").valueChanges.pipe(startWith(\"\"), map(value => this._filter(value)));\n        this.guessingForm.reset();\n        const correctCountry = this.randomCountry.country.toUpperCase();\n        if (this.guesses.length === 5 && ((_b = this.recentGuess) === null || _b === void 0 ? void 0 : _b.toUpperCase()) !== correctCountry) {\n            this._initMatSnackBar(`THE ANSWER WAS ${correctCountry}`, \"Close\", undefined);\n            this.guessingForm.controls[\"country\"].disable();\n        }\n        else if (((_c = this.recentGuess) === null || _c === void 0 ? void 0 : _c.toUpperCase()) === correctCountry) {\n            this._initMatSnackBar(\"CORRECT\", \"Close\", undefined);\n            this.guessingForm;\n        }\n    }\n    _checkArray(array, value) {\n        const regex = new RegExp(\"(^|\\s)\" + value + \"(\\s|$)\");\n        return array.some((guess) => guess.country.toUpperCase().match(regex));\n    }\n    _initMatSnackBar(message, closeButton, duration) {\n        this.matSnackBar.open(message, closeButton, {\n            verticalPosition: \"top\",\n            duration: duration\n        });\n    }\n    _filter(value) {\n        const filterValue = value === null || value === void 0 ? void 0 : value.toLowerCase();\n        return this.countries.filter((option) => option.country.toLowerCase().indexOf(filterValue) === 0);\n    }\n}\nGuessingFormComponent.ɵfac = function GuessingFormComponent_Factory(t) { return new (t || GuessingFormComponent)(i0.ɵɵdirectiveInject(i1.ApiService), i0.ɵɵdirectiveInject(i2.MatSnackBar)); };\nGuessingFormComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: GuessingFormComponent, selectors: [[\"app-guessing-form\"]], decls: 14, vars: 10, consts: [[1, \"form\"], [3, \"formGroup\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"country\", 3, \"matAutocomplete\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [3, \"value\"]], template: function GuessingFormComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"mat-form-field\")(3, \"mat-label\");\n        i0.ɵɵtext(4, \"ENTER COUNTRY\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"input\", 2);\n        i0.ɵɵelementStart(6, \"mat-autocomplete\", null, 3);\n        i0.ɵɵtemplate(8, GuessingFormComponent_mat_option_8_Template, 4, 6, \"mat-option\", 4);\n        i0.ɵɵpipe(9, \"async\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function GuessingFormComponent_Template_button_click_10_listener() { return ctx.submitGuess(); });\n        i0.ɵɵpipe(11, \"lowercase\");\n        i0.ɵɵpipe(12, \"lowercase\");\n        i0.ɵɵtext(13, \"GUESS\");\n        i0.ɵɵelementEnd()()();\n    } if (rf & 2) {\n        const _r0 = i0.ɵɵreference(7);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.guessingForm);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"matAutocomplete\", _r0);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(9, 4, ctx.filteredOptions));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.guesses.length == 5 || i0.ɵɵpipeBind1(11, 6, ctx.recentGuess) == i0.ɵɵpipeBind1(12, 8, ctx.randomCountry.country));\n    } }, directives: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i4.MatFormField, i4.MatLabel, i5.MatInput, i3.DefaultValueAccessor, i6.MatAutocompleteTrigger, i3.NgControlStatus, i3.FormControlName, i6.MatAutocomplete, i7.NgForOf, i8.MatOption, i9.MatButton], pipes: [i7.UpperCasePipe, i7.AsyncPipe, i7.LowerCasePipe], styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJndWVzc2luZy1mb3JtLmNvbXBvbmVudC5zY3NzIn0= */\"] });\n"]},"metadata":{},"sourceType":"module"}