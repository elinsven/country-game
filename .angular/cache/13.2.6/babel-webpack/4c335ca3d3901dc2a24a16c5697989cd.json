{"ast":null,"code":"import { EventEmitter } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { map, startWith } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"@ngneat/transloco\";\nimport * as i3 from \"src/app/services/common.service\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/autocomplete\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"@angular/material/core\";\nimport * as i10 from \"@angular/material/button\";\nimport * as i11 from \"../guessing-list/guessing-list.component\";\n\nfunction GuessingFormComponent_mat_option_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 8);\n    i0.ɵɵpipe(1, \"uppercase\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"uppercase\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", i0.ɵɵpipeBind1(1, 2, option_r3 == null ? null : option_r3.country));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 4, option_r3 == null ? null : option_r3.country), \" \");\n  }\n}\n\nfunction GuessingFormComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 9)(1, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function GuessingFormComponent_div_17_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onPlayAgain();\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"transloco\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 1, \"app.playAgain\"), \" \");\n  }\n}\n\nexport class GuessingFormComponent {\n  constructor(matSnackBar, transloco, commonService) {\n    this.matSnackBar = matSnackBar;\n    this.transloco = transloco;\n    this.commonService = commonService;\n    this.playAgain = new EventEmitter();\n    this.guesses = [];\n    this.gameStatus = \"inProgress\";\n  }\n\n  ngOnInit() {\n    const getGuesses = JSON.parse(localStorage.getItem(\"GUESSES\"));\n    getGuesses ? this.guesses = getGuesses : this.guesses = [];\n    this.initForm();\n\n    this._autoCompletion();\n\n    window.onbeforeunload = () => this.ngOnDestroy();\n  }\n\n  initForm() {\n    this.guessingForm = new FormGroup({\n      country: new FormControl(null)\n    });\n  }\n\n  onSubmitGuess() {\n    var _a, _b;\n\n    if (((_a = this.guessingForm.controls[\"country\"]) === null || _a === void 0 ? void 0 : _a.value) !== null) {\n      this.recentGuess = (_b = this.guessingForm.controls[\"country\"]) === null || _b === void 0 ? void 0 : _b.value.toUpperCase();\n    }\n\n    const correctCountry = this.randomCountry.country.toUpperCase();\n\n    if (!this._checkArray(this.countries, this.recentGuess)) {\n      this._initMatSnackBar(this.transloco.translate(\"app.unknownCountry\"), \"\", 1000);\n    } else if (this._checkArray(this.guesses, this.recentGuess)) {\n      this._initMatSnackBar(this.transloco.translate(\"app.countryAlreadyGuessed\"), \"\", 1000);\n    } else {\n      const regexCurrentGuess = new RegExp(\"(^|s)\" + this.recentGuess + \"(s|$)\");\n      const findCountry = this.countries.find(guess => guess.country.toUpperCase().match(regexCurrentGuess));\n      const encryptCountry = this.commonService.encrypt(findCountry === null || findCountry === void 0 ? void 0 : findCountry.country);\n      console.log(encryptCountry);\n      findCountry.country = encryptCountry;\n      const decryptCountry = this.commonService.decrypt(encryptCountry);\n      console.log(decryptCountry);\n      this.guesses.push(findCountry);\n      localStorage.setItem(\"GUESSES\", JSON.stringify(this.guesses));\n    }\n\n    if (this.guesses.length === 5 && this.recentGuess !== correctCountry) {\n      this._initMatSnackBar(this.transloco.translate(\"app.theAnswerWas\") + correctCountry, this.transloco.translate(\"app.close\"), undefined);\n\n      this.guessingForm.controls[\"country\"].disable();\n      this.gameStatus = \"lost\";\n    } else if (this.recentGuess === correctCountry) {\n      this._initMatSnackBar(this.transloco.translate(\"app.correct\"), this.transloco.translate(\"app.close\"), undefined);\n\n      this.guessingForm.controls[\"country\"].disable();\n      this.gameStatus = \"won\";\n    }\n\n    this._autoCompletion();\n\n    this.guesses = JSON.parse(localStorage.getItem(\"GUESSES\"));\n    this.guessingForm.reset();\n  }\n\n  onPlayAgain() {\n    this.setRandomCountry();\n    this.resetGuesses();\n    this.matSnackBar.dismiss();\n    this.guessingForm.controls[\"country\"].enable();\n    this.gameStatus = \"inProgress\";\n  }\n\n  resetGuesses() {\n    localStorage.removeItem(\"GUESSES\");\n    this.guesses = [];\n  }\n\n  setRandomCountry() {\n    const random = Math.floor(Math.random() * this.countries.length);\n    this.randomCountry = this.countries[random];\n    localStorage.setItem(\"RANDOM_COUNTRY\", JSON.stringify(this.randomCountry));\n    this.playAgain.emit(this.randomCountry);\n  }\n\n  _autoCompletion() {\n    this.filteredOptions = this.guessingForm.controls[\"country\"].valueChanges.pipe(startWith(\"\"), map(value => this._filter(value)));\n  }\n\n  _checkArray(array, value) {\n    const regex = new RegExp(\"(^|s)\" + value + \"(s|$)\");\n    return array.some(guess => guess.country.toUpperCase().match(regex));\n  }\n\n  _initMatSnackBar(message, closeButton, duration) {\n    this.matSnackBar.open(message, closeButton, {\n      verticalPosition: \"top\",\n      duration: duration\n    });\n  }\n\n  _filter(value) {\n    const filterValue = value === null || value === void 0 ? void 0 : value.toLowerCase();\n    return this.countries.filter(option => option.country.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n  ngOnDestroy() {\n    if (this.gameStatus === \"won\") {\n      this.setRandomCountry();\n      this.resetGuesses();\n    } else if (this.gameStatus === \"lost\") {\n      this.setRandomCountry();\n      this.resetGuesses();\n    }\n  }\n\n}\n\nGuessingFormComponent.ɵfac = function GuessingFormComponent_Factory(t) {\n  return new (t || GuessingFormComponent)(i0.ɵɵdirectiveInject(i1.MatSnackBar), i0.ɵɵdirectiveInject(i2.TranslocoService), i0.ɵɵdirectiveInject(i3.CommonService));\n};\n\nGuessingFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GuessingFormComponent,\n  selectors: [[\"app-guessing-form\"]],\n  inputs: {\n    countries: \"countries\",\n    randomCountry: \"randomCountry\"\n  },\n  outputs: {\n    playAgain: \"playAgain\"\n  },\n  decls: 18,\n  vars: 20,\n  consts: [[1, \"wrapper\"], [3, \"formGroup\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"country\", \"matAutocompletePosition\", \"below\", 3, \"matAutocomplete\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [3, \"gameStatus\", \"guesses\", \"randomCountry\"], [\"class\", \"play-again-btn\", 4, \"ngIf\"], [3, \"value\"], [1, \"play-again-btn\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"]],\n  template: function GuessingFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"mat-form-field\")(3, \"mat-label\");\n      i0.ɵɵtext(4);\n      i0.ɵɵpipe(5, \"transloco\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 2);\n      i0.ɵɵelementStart(7, \"mat-autocomplete\", null, 3);\n      i0.ɵɵtemplate(9, GuessingFormComponent_mat_option_9_Template, 4, 6, \"mat-option\", 4);\n      i0.ɵɵpipe(10, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function GuessingFormComponent_Template_button_click_11_listener() {\n        return ctx.onSubmitGuess();\n      });\n      i0.ɵɵpipe(12, \"uppercase\");\n      i0.ɵɵpipe(13, \"uppercase\");\n      i0.ɵɵtext(14);\n      i0.ɵɵpipe(15, \"transloco\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(16, \"app-guessing-list\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(17, GuessingFormComponent_div_17_Template, 4, 3, \"div\", 7);\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(8);\n\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.guessingForm);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 10, \"app.enterCountry\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"matAutocomplete\", _r0);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(10, 12, ctx.filteredOptions));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", (ctx.guesses == null ? null : ctx.guesses.length) === 5 || i0.ɵɵpipeBind1(12, 14, ctx.recentGuess) === i0.ɵɵpipeBind1(13, 16, ctx.randomCountry == null ? null : ctx.randomCountry.country));\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(15, 18, \"app.guess\"), \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"gameStatus\", ctx.gameStatus)(\"guesses\", ctx.guesses)(\"randomCountry\", ctx.randomCountry);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.guesses == null ? null : ctx.guesses.length) === 5 || ctx.gameStatus === \"won\");\n    }\n  },\n  directives: [i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i5.MatFormField, i5.MatLabel, i6.MatInput, i4.DefaultValueAccessor, i7.MatAutocompleteTrigger, i4.NgControlStatus, i4.FormControlName, i7.MatAutocomplete, i8.NgForOf, i9.MatOption, i10.MatButton, i11.GuessingListComponent, i8.NgIf],\n  pipes: [i2.TranslocoPipe, i8.UpperCasePipe, i8.AsyncPipe],\n  styles: [\".wrapper[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n}\\n\\n.mat-form-field[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n\\n.mat-raised-button[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImd1ZXNzaW5nLWZvcm0uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFBO0VBQ0Esc0JBQUE7QUFDRjs7QUFFQTtFQUNFLFdBQUE7QUFDRjs7QUFFQTtFQUNFLFdBQUE7QUFDRiIsImZpbGUiOiJndWVzc2luZy1mb3JtLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLndyYXBwZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuXG4ubWF0LWZvcm0tZmllbGQge1xuICB3aWR0aDogMTAwJTtcbn1cblxuLm1hdC1yYWlzZWQtYnV0dG9uIHtcbiAgd2lkdGg6IDEwMCU7XG59XG4iXX0= */\"]\n});","map":{"version":3,"sources":["/Users/elin/web/country-game/src/app/components/game-page/guessing-form/guessing-form.component.ts"],"names":["EventEmitter","FormControl","FormGroup","map","startWith","i0","i1","i2","i3","i4","i5","i6","i7","i8","i9","i10","i11","GuessingFormComponent_mat_option_9_Template","rf","ctx","ɵɵelementStart","ɵɵpipe","ɵɵtext","ɵɵelementEnd","option_r3","$implicit","ɵɵproperty","ɵɵpipeBind1","country","ɵɵadvance","ɵɵtextInterpolate1","GuessingFormComponent_div_17_Template","_r5","ɵɵgetCurrentView","ɵɵlistener","GuessingFormComponent_div_17_Template_button_click_1_listener","ɵɵrestoreView","ctx_r4","ɵɵnextContext","onPlayAgain","GuessingFormComponent","constructor","matSnackBar","transloco","commonService","playAgain","guesses","gameStatus","ngOnInit","getGuesses","JSON","parse","localStorage","getItem","initForm","_autoCompletion","window","onbeforeunload","ngOnDestroy","guessingForm","onSubmitGuess","_a","_b","controls","value","recentGuess","toUpperCase","correctCountry","randomCountry","_checkArray","countries","_initMatSnackBar","translate","regexCurrentGuess","RegExp","findCountry","find","guess","match","encryptCountry","encrypt","console","log","decryptCountry","decrypt","push","setItem","stringify","length","undefined","disable","reset","setRandomCountry","resetGuesses","dismiss","enable","removeItem","random","Math","floor","emit","filteredOptions","valueChanges","pipe","_filter","array","regex","some","message","closeButton","duration","open","verticalPosition","filterValue","toLowerCase","filter","option","indexOf","ɵfac","GuessingFormComponent_Factory","t","ɵɵdirectiveInject","MatSnackBar","TranslocoService","CommonService","ɵcmp","ɵɵdefineComponent","type","selectors","inputs","outputs","decls","vars","consts","template","GuessingFormComponent_Template","ɵɵelement","ɵɵtemplate","GuessingFormComponent_Template_button_click_11_listener","_r0","ɵɵreference","ɵɵtextInterpolate","directives","ɵNgNoValidate","NgControlStatusGroup","FormGroupDirective","MatFormField","MatLabel","MatInput","DefaultValueAccessor","MatAutocompleteTrigger","NgControlStatus","FormControlName","MatAutocomplete","NgForOf","MatOption","MatButton","GuessingListComponent","NgIf","pipes","TranslocoPipe","UpperCasePipe","AsyncPipe","styles"],"mappings":"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","sourcesContent":["import { EventEmitter, } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { map, startWith } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"@ngneat/transloco\";\nimport * as i3 from \"src/app/services/common.service\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/autocomplete\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"@angular/material/core\";\nimport * as i10 from \"@angular/material/button\";\nimport * as i11 from \"../guessing-list/guessing-list.component\";\nfunction GuessingFormComponent_mat_option_9_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 8);\n    i0.ɵɵpipe(1, \"uppercase\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"uppercase\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const option_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", i0.ɵɵpipeBind1(1, 2, option_r3 == null ? null : option_r3.country));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 4, option_r3 == null ? null : option_r3.country), \" \");\n} }\nfunction GuessingFormComponent_div_17_Template(rf, ctx) { if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 9)(1, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function GuessingFormComponent_div_17_Template_button_click_1_listener() { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return ctx_r4.onPlayAgain(); });\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"transloco\");\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 1, \"app.playAgain\"), \" \");\n} }\nexport class GuessingFormComponent {\n    constructor(matSnackBar, transloco, commonService) {\n        this.matSnackBar = matSnackBar;\n        this.transloco = transloco;\n        this.commonService = commonService;\n        this.playAgain = new EventEmitter();\n        this.guesses = [];\n        this.gameStatus = \"inProgress\";\n    }\n    ngOnInit() {\n        const getGuesses = JSON.parse(localStorage.getItem(\"GUESSES\"));\n        getGuesses ? (this.guesses = getGuesses) : (this.guesses = []);\n        this.initForm();\n        this._autoCompletion();\n        window.onbeforeunload = () => this.ngOnDestroy();\n    }\n    initForm() {\n        this.guessingForm = new FormGroup({\n            country: new FormControl(null),\n        });\n    }\n    onSubmitGuess() {\n        var _a, _b;\n        if (((_a = this.guessingForm.controls[\"country\"]) === null || _a === void 0 ? void 0 : _a.value) !== null) {\n            this.recentGuess =\n                (_b = this.guessingForm.controls[\"country\"]) === null || _b === void 0 ? void 0 : _b.value.toUpperCase();\n        }\n        const correctCountry = this.randomCountry.country.toUpperCase();\n        if (!this._checkArray(this.countries, this.recentGuess)) {\n            this._initMatSnackBar(this.transloco.translate(\"app.unknownCountry\"), \"\", 1000);\n        }\n        else if (this._checkArray(this.guesses, this.recentGuess)) {\n            this._initMatSnackBar(this.transloco.translate(\"app.countryAlreadyGuessed\"), \"\", 1000);\n        }\n        else {\n            const regexCurrentGuess = new RegExp(\"(^|s)\" + this.recentGuess + \"(s|$)\");\n            const findCountry = this.countries.find((guess) => guess.country.toUpperCase().match(regexCurrentGuess));\n            const encryptCountry = this.commonService.encrypt(findCountry === null || findCountry === void 0 ? void 0 : findCountry.country);\n            console.log(encryptCountry);\n            findCountry.country = encryptCountry;\n            const decryptCountry = this.commonService.decrypt(encryptCountry);\n            console.log(decryptCountry);\n            this.guesses.push(findCountry);\n            localStorage.setItem(\"GUESSES\", JSON.stringify(this.guesses));\n        }\n        if (this.guesses.length === 5 && this.recentGuess !== correctCountry) {\n            this._initMatSnackBar(this.transloco.translate(\"app.theAnswerWas\") + correctCountry, this.transloco.translate(\"app.close\"), undefined);\n            this.guessingForm.controls[\"country\"].disable();\n            this.gameStatus = \"lost\";\n        }\n        else if (this.recentGuess === correctCountry) {\n            this._initMatSnackBar(this.transloco.translate(\"app.correct\"), this.transloco.translate(\"app.close\"), undefined);\n            this.guessingForm.controls[\"country\"].disable();\n            this.gameStatus = \"won\";\n        }\n        this._autoCompletion();\n        this.guesses = JSON.parse(localStorage.getItem(\"GUESSES\"));\n        this.guessingForm.reset();\n    }\n    onPlayAgain() {\n        this.setRandomCountry();\n        this.resetGuesses();\n        this.matSnackBar.dismiss();\n        this.guessingForm.controls[\"country\"].enable();\n        this.gameStatus = \"inProgress\";\n    }\n    resetGuesses() {\n        localStorage.removeItem(\"GUESSES\");\n        this.guesses = [];\n    }\n    setRandomCountry() {\n        const random = Math.floor(Math.random() * this.countries.length);\n        this.randomCountry = this.countries[random];\n        localStorage.setItem(\"RANDOM_COUNTRY\", JSON.stringify(this.randomCountry));\n        this.playAgain.emit(this.randomCountry);\n    }\n    _autoCompletion() {\n        this.filteredOptions = this.guessingForm.controls[\"country\"].valueChanges.pipe(startWith(\"\"), map((value) => this._filter(value)));\n    }\n    _checkArray(array, value) {\n        const regex = new RegExp(\"(^|s)\" + value + \"(s|$)\");\n        return array.some((guess) => guess.country.toUpperCase().match(regex));\n    }\n    _initMatSnackBar(message, closeButton, duration) {\n        this.matSnackBar.open(message, closeButton, {\n            verticalPosition: \"top\",\n            duration: duration,\n        });\n    }\n    _filter(value) {\n        const filterValue = value === null || value === void 0 ? void 0 : value.toLowerCase();\n        return this.countries.filter((option) => option.country.toLowerCase().indexOf(filterValue) === 0);\n    }\n    ngOnDestroy() {\n        if (this.gameStatus === \"won\") {\n            this.setRandomCountry();\n            this.resetGuesses();\n        }\n        else if (this.gameStatus === \"lost\") {\n            this.setRandomCountry();\n            this.resetGuesses();\n        }\n    }\n}\nGuessingFormComponent.ɵfac = function GuessingFormComponent_Factory(t) { return new (t || GuessingFormComponent)(i0.ɵɵdirectiveInject(i1.MatSnackBar), i0.ɵɵdirectiveInject(i2.TranslocoService), i0.ɵɵdirectiveInject(i3.CommonService)); };\nGuessingFormComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: GuessingFormComponent, selectors: [[\"app-guessing-form\"]], inputs: { countries: \"countries\", randomCountry: \"randomCountry\" }, outputs: { playAgain: \"playAgain\" }, decls: 18, vars: 20, consts: [[1, \"wrapper\"], [3, \"formGroup\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"country\", \"matAutocompletePosition\", \"below\", 3, \"matAutocomplete\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [3, \"gameStatus\", \"guesses\", \"randomCountry\"], [\"class\", \"play-again-btn\", 4, \"ngIf\"], [3, \"value\"], [1, \"play-again-btn\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"]], template: function GuessingFormComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"mat-form-field\")(3, \"mat-label\");\n        i0.ɵɵtext(4);\n        i0.ɵɵpipe(5, \"transloco\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"input\", 2);\n        i0.ɵɵelementStart(7, \"mat-autocomplete\", null, 3);\n        i0.ɵɵtemplate(9, GuessingFormComponent_mat_option_9_Template, 4, 6, \"mat-option\", 4);\n        i0.ɵɵpipe(10, \"async\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(11, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function GuessingFormComponent_Template_button_click_11_listener() { return ctx.onSubmitGuess(); });\n        i0.ɵɵpipe(12, \"uppercase\");\n        i0.ɵɵpipe(13, \"uppercase\");\n        i0.ɵɵtext(14);\n        i0.ɵɵpipe(15, \"transloco\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(16, \"app-guessing-list\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(17, GuessingFormComponent_div_17_Template, 4, 3, \"div\", 7);\n    } if (rf & 2) {\n        const _r0 = i0.ɵɵreference(8);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.guessingForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 10, \"app.enterCountry\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"matAutocomplete\", _r0);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(10, 12, ctx.filteredOptions));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", (ctx.guesses == null ? null : ctx.guesses.length) === 5 || i0.ɵɵpipeBind1(12, 14, ctx.recentGuess) === i0.ɵɵpipeBind1(13, 16, ctx.randomCountry == null ? null : ctx.randomCountry.country));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(15, 18, \"app.guess\"), \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"gameStatus\", ctx.gameStatus)(\"guesses\", ctx.guesses)(\"randomCountry\", ctx.randomCountry);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.guesses == null ? null : ctx.guesses.length) === 5 || ctx.gameStatus === \"won\");\n    } }, directives: [i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i5.MatFormField, i5.MatLabel, i6.MatInput, i4.DefaultValueAccessor, i7.MatAutocompleteTrigger, i4.NgControlStatus, i4.FormControlName, i7.MatAutocomplete, i8.NgForOf, i9.MatOption, i10.MatButton, i11.GuessingListComponent, i8.NgIf], pipes: [i2.TranslocoPipe, i8.UpperCasePipe, i8.AsyncPipe], styles: [\".wrapper[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n}\\n\\n.mat-form-field[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n\\n.mat-raised-button[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImd1ZXNzaW5nLWZvcm0uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFBO0VBQ0Esc0JBQUE7QUFDRjs7QUFFQTtFQUNFLFdBQUE7QUFDRjs7QUFFQTtFQUNFLFdBQUE7QUFDRiIsImZpbGUiOiJndWVzc2luZy1mb3JtLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLndyYXBwZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuXG4ubWF0LWZvcm0tZmllbGQge1xuICB3aWR0aDogMTAwJTtcbn1cblxuLm1hdC1yYWlzZWQtYnV0dG9uIHtcbiAgd2lkdGg6IDEwMCU7XG59XG4iXX0= */\"] });\n"]},"metadata":{},"sourceType":"module"}