{"ast":null,"code":"import { FormControl, FormGroup } from '@angular/forms';\nimport { map, startWith } from 'rxjs';\nimport { GameStatus } from 'src/app/shared/models/models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngneat/transloco\";\nimport * as i2 from \"@angular/material/snack-bar\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/autocomplete\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/core\";\nimport * as i9 from \"@angular/material/button\";\n\nfunction GuessingInputComponent_mat_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 5);\n    i0.ɵɵpipe(1, \"uppercase\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"uppercase\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", i0.ɵɵpipeBind1(1, 2, option_r2 == null ? null : option_r2.country));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 4, option_r2 == null ? null : option_r2.country), \" \");\n  }\n}\n\nexport class GuessingInputComponent {\n  constructor(transloco, matSnackBar) {\n    this.transloco = transloco;\n    this.matSnackBar = matSnackBar;\n    this.guesses = [];\n    this.gameStatus = GameStatus.IN_PROGRESS;\n  }\n\n  ngOnInit() {\n    this.initForm();\n    this.autoCompletion();\n  }\n\n  initForm() {\n    this.guessingForm = new FormGroup({\n      country: new FormControl(null)\n    });\n  }\n\n  onSubmitGuess() {\n    var _a;\n\n    this.recentGuess = (_a = this.guessingForm.get(\"country\")) === null || _a === void 0 ? void 0 : _a.value.toUpperCase();\n    const correctCountry = this.randomCountry.country.toUpperCase();\n\n    if (!this.checkArray(this.countries, this.recentGuess)) {\n      this.initMatSnackBar(this.transloco.translate(\"app.unknownCountry\"), \"\", 1000);\n    } else if (this.checkArray(this.guesses, this.recentGuess)) {\n      this.initMatSnackBar(this.transloco.translate(\"app.countryAlreadyGuessed\"), \"\", 1000);\n    } else {\n      const regexCurrentGuess = new RegExp(\"(^|s)\" + this.recentGuess + \"(s|$)\");\n      const findCountry = this.countries.find(guess => guess.country.toUpperCase().match(regexCurrentGuess));\n      this.guesses.push(findCountry);\n      localStorage.setItem(\"GUESSES\", JSON.stringify(this.guesses));\n    }\n\n    if (this.guesses.length === 5 && this.recentGuess !== correctCountry) {\n      this.gameEnd(\"app.theAnswerWas\", GameStatus.LOST, correctCountry);\n    } else if (this.recentGuess === correctCountry) {\n      this.gameEnd(\"app.correct\", GameStatus.WON, \"\");\n    }\n\n    this.autoCompletion();\n    this.guesses = JSON.parse(localStorage.getItem(\"GUESSES\"));\n    this.guessingForm.reset();\n  }\n\n  checkArray(array, value) {\n    const regex = new RegExp(\"(^|s)\" + value + \"(s|$)\");\n    return array.some(guess => guess.country.toUpperCase().match(regex));\n  }\n\n  initMatSnackBar(message, closeButton, duration) {\n    this.matSnackBar.open(message, closeButton, {\n      verticalPosition: \"top\",\n      duration: duration\n    });\n  }\n\n  gameEnd(notificationMessage, gameStatus, correctCountry) {\n    var _a;\n\n    this.initMatSnackBar(this.transloco.translate(notificationMessage) + correctCountry, this.transloco.translate(\"app.close\"), undefined);\n    (_a = this.guessingForm.get(\"country\")) === null || _a === void 0 ? void 0 : _a.disable();\n    this.gameStatus = gameStatus;\n  }\n\n  autoCompletion() {\n    this.filteredOptions = this.guessingForm.controls[\"country\"].valueChanges.pipe(startWith(\"\"), map(value => this.filter(value)));\n  }\n\n  filter(value) {\n    const filterValue = value === null || value === void 0 ? void 0 : value.toLowerCase();\n    return this.countries.filter(option => option.country.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n}\n\nGuessingInputComponent.ɵfac = function GuessingInputComponent_Factory(t) {\n  return new (t || GuessingInputComponent)(i0.ɵɵdirectiveInject(i1.TranslocoService), i0.ɵɵdirectiveInject(i2.MatSnackBar));\n};\n\nGuessingInputComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GuessingInputComponent,\n  selectors: [[\"app-guessing-input\"]],\n  inputs: {\n    countries: \"countries\",\n    randomCountry: \"randomCountry\"\n  },\n  decls: 15,\n  vars: 16,\n  consts: [[3, \"formGroup\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"country\", \"matAutocompletePosition\", \"below\", 3, \"matAutocomplete\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [3, \"value\"]],\n  template: function GuessingInputComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0)(1, \"mat-form-field\")(2, \"mat-label\");\n      i0.ɵɵtext(3);\n      i0.ɵɵpipe(4, \"transloco\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"input\", 1);\n      i0.ɵɵelementStart(6, \"mat-autocomplete\", null, 2);\n      i0.ɵɵtemplate(8, GuessingInputComponent_mat_option_8_Template, 4, 6, \"mat-option\", 3);\n      i0.ɵɵpipe(9, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"button\", 4);\n      i0.ɵɵlistener(\"click\", function GuessingInputComponent_Template_button_click_10_listener() {\n        return ctx.onSubmitGuess();\n      });\n      i0.ɵɵpipe(11, \"uppercase\");\n      i0.ɵɵpipe(12, \"uppercase\");\n      i0.ɵɵtext(13);\n      i0.ɵɵpipe(14, \"transloco\");\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(7);\n\n      i0.ɵɵproperty(\"formGroup\", ctx.guessingForm);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 6, \"app.enterCountry\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"matAutocomplete\", _r0);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(9, 8, ctx.filteredOptions));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", (ctx.guesses == null ? null : ctx.guesses.length) === 5 || i0.ɵɵpipeBind1(11, 10, ctx.recentGuess) === i0.ɵɵpipeBind1(12, 12, ctx.randomCountry == null ? null : ctx.randomCountry.country));\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(14, 14, \"app.guess\"), \" \");\n    }\n  },\n  directives: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i4.MatFormField, i4.MatLabel, i5.MatInput, i3.DefaultValueAccessor, i6.MatAutocompleteTrigger, i3.NgControlStatus, i3.FormControlName, i6.MatAutocomplete, i7.NgForOf, i8.MatOption, i9.MatButton],\n  pipes: [i1.TranslocoPipe, i7.UpperCasePipe, i7.AsyncPipe],\n  styles: [\".mat-form-field[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImd1ZXNzaW5nLWlucHV0LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsV0FBQTtBQUNGIiwiZmlsZSI6Imd1ZXNzaW5nLWlucHV0LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm1hdC1mb3JtLWZpZWxkIHtcbiAgd2lkdGg6IDEwMCU7XG59Il19 */\"]\n});","map":{"version":3,"sources":["/Users/elin/web/country-game/src/app/core/components/game-page/guessing-input/guessing-input.component.ts"],"names":["FormControl","FormGroup","map","startWith","GameStatus","i0","i1","i2","i3","i4","i5","i6","i7","i8","i9","GuessingInputComponent_mat_option_8_Template","rf","ctx","ɵɵelementStart","ɵɵpipe","ɵɵtext","ɵɵelementEnd","option_r2","$implicit","ɵɵproperty","ɵɵpipeBind1","country","ɵɵadvance","ɵɵtextInterpolate1","GuessingInputComponent","constructor","transloco","matSnackBar","guesses","gameStatus","IN_PROGRESS","ngOnInit","initForm","autoCompletion","guessingForm","onSubmitGuess","_a","recentGuess","get","value","toUpperCase","correctCountry","randomCountry","checkArray","countries","initMatSnackBar","translate","regexCurrentGuess","RegExp","findCountry","find","guess","match","push","localStorage","setItem","JSON","stringify","length","gameEnd","LOST","WON","parse","getItem","reset","array","regex","some","message","closeButton","duration","open","verticalPosition","notificationMessage","undefined","disable","filteredOptions","controls","valueChanges","pipe","filter","filterValue","toLowerCase","option","indexOf","ɵfac","GuessingInputComponent_Factory","t","ɵɵdirectiveInject","TranslocoService","MatSnackBar","ɵcmp","ɵɵdefineComponent","type","selectors","inputs","decls","vars","consts","template","GuessingInputComponent_Template","ɵɵelement","ɵɵtemplate","ɵɵlistener","GuessingInputComponent_Template_button_click_10_listener","_r0","ɵɵreference","ɵɵtextInterpolate","directives","ɵNgNoValidate","NgControlStatusGroup","FormGroupDirective","MatFormField","MatLabel","MatInput","DefaultValueAccessor","MatAutocompleteTrigger","NgControlStatus","FormControlName","MatAutocomplete","NgForOf","MatOption","MatButton","pipes","TranslocoPipe","UpperCasePipe","AsyncPipe","styles"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,QAAuC,gBAAvC;AACA,SAASC,GAAT,EAAcC,SAAd,QAA+B,MAA/B;AACA,SAASC,UAAT,QAA2B,8BAA3B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,mBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,6BAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,gBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,8BAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,yBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,gCAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,wBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,0BAApB;;AACA,SAASC,4CAAT,CAAsDC,EAAtD,EAA0DC,GAA1D,EAA+D;AAAE,MAAID,EAAE,GAAG,CAAT,EAAY;AACzEX,IAAAA,EAAE,CAACa,cAAH,CAAkB,CAAlB,EAAqB,YAArB,EAAmC,CAAnC;AACAb,IAAAA,EAAE,CAACc,MAAH,CAAU,CAAV,EAAa,WAAb;AACAd,IAAAA,EAAE,CAACe,MAAH,CAAU,CAAV;AACAf,IAAAA,EAAE,CAACc,MAAH,CAAU,CAAV,EAAa,WAAb;AACAd,IAAAA,EAAE,CAACgB,YAAH;AACH;;AAAC,MAAIL,EAAE,GAAG,CAAT,EAAY;AACV,UAAMM,SAAS,GAAGL,GAAG,CAACM,SAAtB;AACAlB,IAAAA,EAAE,CAACmB,UAAH,CAAc,OAAd,EAAuBnB,EAAE,CAACoB,WAAH,CAAe,CAAf,EAAkB,CAAlB,EAAqBH,SAAS,IAAI,IAAb,GAAoB,IAApB,GAA2BA,SAAS,CAACI,OAA1D,CAAvB;AACArB,IAAAA,EAAE,CAACsB,SAAH,CAAa,CAAb;AACAtB,IAAAA,EAAE,CAACuB,kBAAH,CAAsB,GAAtB,EAA2BvB,EAAE,CAACoB,WAAH,CAAe,CAAf,EAAkB,CAAlB,EAAqBH,SAAS,IAAI,IAAb,GAAoB,IAApB,GAA2BA,SAAS,CAACI,OAA1D,CAA3B,EAA+F,GAA/F;AACH;AAAE;;AACH,OAAO,MAAMG,sBAAN,CAA6B;AAChCC,EAAAA,WAAW,CAACC,SAAD,EAAYC,WAAZ,EAAyB;AAChC,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,UAAL,GAAkB9B,UAAU,CAAC+B,WAA7B;AACH;;AACDC,EAAAA,QAAQ,GAAG;AACP,SAAKC,QAAL;AACA,SAAKC,cAAL;AACH;;AACDD,EAAAA,QAAQ,GAAG;AACP,SAAKE,YAAL,GAAoB,IAAItC,SAAJ,CAAc;AAC9ByB,MAAAA,OAAO,EAAE,IAAI1B,WAAJ,CAAgB,IAAhB;AADqB,KAAd,CAApB;AAGH;;AACDwC,EAAAA,aAAa,GAAG;AACZ,QAAIC,EAAJ;;AACA,SAAKC,WAAL,GACI,CAACD,EAAE,GAAG,KAAKF,YAAL,CAAkBI,GAAlB,CAAsB,SAAtB,CAAN,MAA4C,IAA5C,IAAoDF,EAAE,KAAK,KAAK,CAAhE,GAAoE,KAAK,CAAzE,GAA6EA,EAAE,CAACG,KAAH,CAASC,WAAT,EADjF;AAEA,UAAMC,cAAc,GAAG,KAAKC,aAAL,CAAmBrB,OAAnB,CAA2BmB,WAA3B,EAAvB;;AACA,QAAI,CAAC,KAAKG,UAAL,CAAgB,KAAKC,SAArB,EAAgC,KAAKP,WAArC,CAAL,EAAwD;AACpD,WAAKQ,eAAL,CAAqB,KAAKnB,SAAL,CAAeoB,SAAf,CAAyB,oBAAzB,CAArB,EAAqE,EAArE,EAAyE,IAAzE;AACH,KAFD,MAGK,IAAI,KAAKH,UAAL,CAAgB,KAAKf,OAArB,EAA8B,KAAKS,WAAnC,CAAJ,EAAqD;AACtD,WAAKQ,eAAL,CAAqB,KAAKnB,SAAL,CAAeoB,SAAf,CAAyB,2BAAzB,CAArB,EAA4E,EAA5E,EAAgF,IAAhF;AACH,KAFI,MAGA;AACD,YAAMC,iBAAiB,GAAG,IAAIC,MAAJ,CAAW,UAAU,KAAKX,WAAf,GAA6B,OAAxC,CAA1B;AACA,YAAMY,WAAW,GAAG,KAAKL,SAAL,CAAeM,IAAf,CAAqBC,KAAD,IAAWA,KAAK,CAAC9B,OAAN,CAAcmB,WAAd,GAA4BY,KAA5B,CAAkCL,iBAAlC,CAA/B,CAApB;AACA,WAAKnB,OAAL,CAAayB,IAAb,CAAkBJ,WAAlB;AACAK,MAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCC,IAAI,CAACC,SAAL,CAAe,KAAK7B,OAApB,CAAhC;AACH;;AACD,QAAI,KAAKA,OAAL,CAAa8B,MAAb,KAAwB,CAAxB,IAA6B,KAAKrB,WAAL,KAAqBI,cAAtD,EAAsE;AAClE,WAAKkB,OAAL,CAAa,kBAAb,EAAiC5D,UAAU,CAAC6D,IAA5C,EAAkDnB,cAAlD;AACH,KAFD,MAGK,IAAI,KAAKJ,WAAL,KAAqBI,cAAzB,EAAyC;AAC1C,WAAKkB,OAAL,CAAa,aAAb,EAA4B5D,UAAU,CAAC8D,GAAvC,EAA4C,EAA5C;AACH;;AACD,SAAK5B,cAAL;AACA,SAAKL,OAAL,GAAe4B,IAAI,CAACM,KAAL,CAAWR,YAAY,CAACS,OAAb,CAAqB,SAArB,CAAX,CAAf;AACA,SAAK7B,YAAL,CAAkB8B,KAAlB;AACH;;AACDrB,EAAAA,UAAU,CAACsB,KAAD,EAAQ1B,KAAR,EAAe;AACrB,UAAM2B,KAAK,GAAG,IAAIlB,MAAJ,CAAW,UAAUT,KAAV,GAAkB,OAA7B,CAAd;AACA,WAAO0B,KAAK,CAACE,IAAN,CAAYhB,KAAD,IAAWA,KAAK,CAAC9B,OAAN,CAAcmB,WAAd,GAA4BY,KAA5B,CAAkCc,KAAlC,CAAtB,CAAP;AACH;;AACDrB,EAAAA,eAAe,CAACuB,OAAD,EAAUC,WAAV,EAAuBC,QAAvB,EAAiC;AAC5C,SAAK3C,WAAL,CAAiB4C,IAAjB,CAAsBH,OAAtB,EAA+BC,WAA/B,EAA4C;AACxCG,MAAAA,gBAAgB,EAAE,KADsB;AAExCF,MAAAA,QAAQ,EAAEA;AAF8B,KAA5C;AAIH;;AACDX,EAAAA,OAAO,CAACc,mBAAD,EAAsB5C,UAAtB,EAAkCY,cAAlC,EAAkD;AACrD,QAAIL,EAAJ;;AACA,SAAKS,eAAL,CAAqB,KAAKnB,SAAL,CAAeoB,SAAf,CAAyB2B,mBAAzB,IAAgDhC,cAArE,EAAqF,KAAKf,SAAL,CAAeoB,SAAf,CAAyB,WAAzB,CAArF,EAA4H4B,SAA5H;AACA,KAACtC,EAAE,GAAG,KAAKF,YAAL,CAAkBI,GAAlB,CAAsB,SAAtB,CAAN,MAA4C,IAA5C,IAAoDF,EAAE,KAAK,KAAK,CAAhE,GAAoE,KAAK,CAAzE,GAA6EA,EAAE,CAACuC,OAAH,EAA7E;AACA,SAAK9C,UAAL,GAAkBA,UAAlB;AACH;;AACDI,EAAAA,cAAc,GAAG;AACb,SAAK2C,eAAL,GAAuB,KAAK1C,YAAL,CAAkB2C,QAAlB,CAA2B,SAA3B,EAAsCC,YAAtC,CAAmDC,IAAnD,CAAwDjF,SAAS,CAAC,EAAD,CAAjE,EAAuED,GAAG,CAAE0C,KAAD,IAAW,KAAKyC,MAAL,CAAYzC,KAAZ,CAAZ,CAA1E,CAAvB;AACH;;AACDyC,EAAAA,MAAM,CAACzC,KAAD,EAAQ;AACV,UAAM0C,WAAW,GAAG1C,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAAC2C,WAAN,EAAlE;AACA,WAAO,KAAKtC,SAAL,CAAeoC,MAAf,CAAuBG,MAAD,IAAYA,MAAM,CAAC9D,OAAP,CAAe6D,WAAf,GAA6BE,OAA7B,CAAqCH,WAArC,MAAsD,CAAxF,CAAP;AACH;;AAjE+B;;AAmEpCzD,sBAAsB,CAAC6D,IAAvB,GAA8B,SAASC,8BAAT,CAAwCC,CAAxC,EAA2C;AAAE,SAAO,KAAKA,CAAC,IAAI/D,sBAAV,EAAkCxB,EAAE,CAACwF,iBAAH,CAAqBvF,EAAE,CAACwF,gBAAxB,CAAlC,EAA6EzF,EAAE,CAACwF,iBAAH,CAAqBtF,EAAE,CAACwF,WAAxB,CAA7E,CAAP;AAA4H,CAAvM;;AACAlE,sBAAsB,CAACmE,IAAvB,GAA8B,aAAc3F,EAAE,CAAC4F,iBAAH,CAAqB;AAAEC,EAAAA,IAAI,EAAErE,sBAAR;AAAgCsE,EAAAA,SAAS,EAAE,CAAC,CAAC,oBAAD,CAAD,CAA3C;AAAqEC,EAAAA,MAAM,EAAE;AAAEnD,IAAAA,SAAS,EAAE,WAAb;AAA0BF,IAAAA,aAAa,EAAE;AAAzC,GAA7E;AAAyIsD,EAAAA,KAAK,EAAE,EAAhJ;AAAoJC,EAAAA,IAAI,EAAE,EAA1J;AAA8JC,EAAAA,MAAM,EAAE,CAAC,CAAC,CAAD,EAAI,WAAJ,CAAD,EAAmB,CAAC,UAAD,EAAa,EAAb,EAAiB,MAAjB,EAAyB,MAAzB,EAAiC,iBAAjC,EAAoD,SAApD,EAA+D,yBAA/D,EAA0F,OAA1F,EAAmG,CAAnG,EAAsG,iBAAtG,CAAnB,EAA6I,CAAC,MAAD,EAAS,iBAAT,CAA7I,EAA0K,CAAC,CAAD,EAAI,OAAJ,EAAa,CAAb,EAAgB,OAAhB,EAAyB,SAAzB,CAA1K,EAA+M,CAAC,mBAAD,EAAsB,EAAtB,EAA0B,OAA1B,EAAmC,SAAnC,EAA8C,MAA9C,EAAsD,QAAtD,EAAgE,CAAhE,EAAmE,UAAnE,EAA+E,OAA/E,CAA/M,EAAwS,CAAC,CAAD,EAAI,OAAJ,CAAxS,CAAtK;AAA6dC,EAAAA,QAAQ,EAAE,SAASC,+BAAT,CAAyCzF,EAAzC,EAA6CC,GAA7C,EAAkD;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AAChmBX,MAAAA,EAAE,CAACa,cAAH,CAAkB,CAAlB,EAAqB,MAArB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,gBAAnC,EAAqD,CAArD,EAAwD,WAAxD;AACAb,MAAAA,EAAE,CAACe,MAAH,CAAU,CAAV;AACAf,MAAAA,EAAE,CAACc,MAAH,CAAU,CAAV,EAAa,WAAb;AACAd,MAAAA,EAAE,CAACgB,YAAH;AACAhB,MAAAA,EAAE,CAACqG,SAAH,CAAa,CAAb,EAAgB,OAAhB,EAAyB,CAAzB;AACArG,MAAAA,EAAE,CAACa,cAAH,CAAkB,CAAlB,EAAqB,kBAArB,EAAyC,IAAzC,EAA+C,CAA/C;AACAb,MAAAA,EAAE,CAACsG,UAAH,CAAc,CAAd,EAAiB5F,4CAAjB,EAA+D,CAA/D,EAAkE,CAAlE,EAAqE,YAArE,EAAmF,CAAnF;AACAV,MAAAA,EAAE,CAACc,MAAH,CAAU,CAAV,EAAa,OAAb;AACAd,MAAAA,EAAE,CAACgB,YAAH;AACAhB,MAAAA,EAAE,CAACa,cAAH,CAAkB,EAAlB,EAAsB,QAAtB,EAAgC,CAAhC;AACAb,MAAAA,EAAE,CAACuG,UAAH,CAAc,OAAd,EAAuB,SAASC,wDAAT,GAAoE;AAAE,eAAO5F,GAAG,CAACuB,aAAJ,EAAP;AAA6B,OAA1H;AACAnC,MAAAA,EAAE,CAACc,MAAH,CAAU,EAAV,EAAc,WAAd;AACAd,MAAAA,EAAE,CAACc,MAAH,CAAU,EAAV,EAAc,WAAd;AACAd,MAAAA,EAAE,CAACe,MAAH,CAAU,EAAV;AACAf,MAAAA,EAAE,CAACc,MAAH,CAAU,EAAV,EAAc,WAAd;AACAd,MAAAA,EAAE,CAACgB,YAAH;AACH;;AAAC,QAAIL,EAAE,GAAG,CAAT,EAAY;AACV,YAAM8F,GAAG,GAAGzG,EAAE,CAAC0G,WAAH,CAAe,CAAf,CAAZ;;AACA1G,MAAAA,EAAE,CAACmB,UAAH,CAAc,WAAd,EAA2BP,GAAG,CAACsB,YAA/B;AACAlC,MAAAA,EAAE,CAACsB,SAAH,CAAa,CAAb;AACAtB,MAAAA,EAAE,CAAC2G,iBAAH,CAAqB3G,EAAE,CAACoB,WAAH,CAAe,CAAf,EAAkB,CAAlB,EAAqB,kBAArB,CAArB;AACApB,MAAAA,EAAE,CAACsB,SAAH,CAAa,CAAb;AACAtB,MAAAA,EAAE,CAACmB,UAAH,CAAc,iBAAd,EAAiCsF,GAAjC;AACAzG,MAAAA,EAAE,CAACsB,SAAH,CAAa,CAAb;AACAtB,MAAAA,EAAE,CAACmB,UAAH,CAAc,SAAd,EAAyBnB,EAAE,CAACoB,WAAH,CAAe,CAAf,EAAkB,CAAlB,EAAqBR,GAAG,CAACgE,eAAzB,CAAzB;AACA5E,MAAAA,EAAE,CAACsB,SAAH,CAAa,CAAb;AACAtB,MAAAA,EAAE,CAACmB,UAAH,CAAc,UAAd,EAA0B,CAACP,GAAG,CAACgB,OAAJ,IAAe,IAAf,GAAsB,IAAtB,GAA6BhB,GAAG,CAACgB,OAAJ,CAAY8B,MAA1C,MAAsD,CAAtD,IAA2D1D,EAAE,CAACoB,WAAH,CAAe,EAAf,EAAmB,EAAnB,EAAuBR,GAAG,CAACyB,WAA3B,MAA4CrC,EAAE,CAACoB,WAAH,CAAe,EAAf,EAAmB,EAAnB,EAAuBR,GAAG,CAAC8B,aAAJ,IAAqB,IAArB,GAA4B,IAA5B,GAAmC9B,GAAG,CAAC8B,aAAJ,CAAkBrB,OAA5E,CAAjI;AACArB,MAAAA,EAAE,CAACsB,SAAH,CAAa,CAAb;AACAtB,MAAAA,EAAE,CAACuB,kBAAH,CAAsB,GAAtB,EAA2BvB,EAAE,CAACoB,WAAH,CAAe,EAAf,EAAmB,EAAnB,EAAuB,WAAvB,CAA3B,EAAgE,GAAhE;AACH;AAAE,GA9B0D;AA8BxDwF,EAAAA,UAAU,EAAE,CAACzG,EAAE,CAAC0G,aAAJ,EAAmB1G,EAAE,CAAC2G,oBAAtB,EAA4C3G,EAAE,CAAC4G,kBAA/C,EAAmE3G,EAAE,CAAC4G,YAAtE,EAAoF5G,EAAE,CAAC6G,QAAvF,EAAiG5G,EAAE,CAAC6G,QAApG,EAA8G/G,EAAE,CAACgH,oBAAjH,EAAuI7G,EAAE,CAAC8G,sBAA1I,EAAkKjH,EAAE,CAACkH,eAArK,EAAsLlH,EAAE,CAACmH,eAAzL,EAA0MhH,EAAE,CAACiH,eAA7M,EAA8NhH,EAAE,CAACiH,OAAjO,EAA0OhH,EAAE,CAACiH,SAA7O,EAAwPhH,EAAE,CAACiH,SAA3P,CA9B4C;AA8B2NC,EAAAA,KAAK,EAAE,CAAC1H,EAAE,CAAC2H,aAAJ,EAAmBrH,EAAE,CAACsH,aAAtB,EAAqCtH,EAAE,CAACuH,SAAxC,CA9BlO;AA8BsRC,EAAAA,MAAM,EAAE,CAAC,wXAAD;AA9B9R,CAArB,CAA5C","sourcesContent":["import { FormControl, FormGroup } from '@angular/forms';\nimport { map, startWith } from 'rxjs';\nimport { GameStatus } from 'src/app/shared/models/models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngneat/transloco\";\nimport * as i2 from \"@angular/material/snack-bar\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/autocomplete\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/core\";\nimport * as i9 from \"@angular/material/button\";\nfunction GuessingInputComponent_mat_option_8_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 5);\n    i0.ɵɵpipe(1, \"uppercase\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"uppercase\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const option_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", i0.ɵɵpipeBind1(1, 2, option_r2 == null ? null : option_r2.country));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 4, option_r2 == null ? null : option_r2.country), \" \");\n} }\nexport class GuessingInputComponent {\n    constructor(transloco, matSnackBar) {\n        this.transloco = transloco;\n        this.matSnackBar = matSnackBar;\n        this.guesses = [];\n        this.gameStatus = GameStatus.IN_PROGRESS;\n    }\n    ngOnInit() {\n        this.initForm();\n        this.autoCompletion();\n    }\n    initForm() {\n        this.guessingForm = new FormGroup({\n            country: new FormControl(null),\n        });\n    }\n    onSubmitGuess() {\n        var _a;\n        this.recentGuess =\n            (_a = this.guessingForm.get(\"country\")) === null || _a === void 0 ? void 0 : _a.value.toUpperCase();\n        const correctCountry = this.randomCountry.country.toUpperCase();\n        if (!this.checkArray(this.countries, this.recentGuess)) {\n            this.initMatSnackBar(this.transloco.translate(\"app.unknownCountry\"), \"\", 1000);\n        }\n        else if (this.checkArray(this.guesses, this.recentGuess)) {\n            this.initMatSnackBar(this.transloco.translate(\"app.countryAlreadyGuessed\"), \"\", 1000);\n        }\n        else {\n            const regexCurrentGuess = new RegExp(\"(^|s)\" + this.recentGuess + \"(s|$)\");\n            const findCountry = this.countries.find((guess) => guess.country.toUpperCase().match(regexCurrentGuess));\n            this.guesses.push(findCountry);\n            localStorage.setItem(\"GUESSES\", JSON.stringify(this.guesses));\n        }\n        if (this.guesses.length === 5 && this.recentGuess !== correctCountry) {\n            this.gameEnd(\"app.theAnswerWas\", GameStatus.LOST, correctCountry);\n        }\n        else if (this.recentGuess === correctCountry) {\n            this.gameEnd(\"app.correct\", GameStatus.WON, \"\");\n        }\n        this.autoCompletion();\n        this.guesses = JSON.parse(localStorage.getItem(\"GUESSES\"));\n        this.guessingForm.reset();\n    }\n    checkArray(array, value) {\n        const regex = new RegExp(\"(^|s)\" + value + \"(s|$)\");\n        return array.some((guess) => guess.country.toUpperCase().match(regex));\n    }\n    initMatSnackBar(message, closeButton, duration) {\n        this.matSnackBar.open(message, closeButton, {\n            verticalPosition: \"top\",\n            duration: duration,\n        });\n    }\n    gameEnd(notificationMessage, gameStatus, correctCountry) {\n        var _a;\n        this.initMatSnackBar(this.transloco.translate(notificationMessage) + correctCountry, this.transloco.translate(\"app.close\"), undefined);\n        (_a = this.guessingForm.get(\"country\")) === null || _a === void 0 ? void 0 : _a.disable();\n        this.gameStatus = gameStatus;\n    }\n    autoCompletion() {\n        this.filteredOptions = this.guessingForm.controls[\"country\"].valueChanges.pipe(startWith(\"\"), map((value) => this.filter(value)));\n    }\n    filter(value) {\n        const filterValue = value === null || value === void 0 ? void 0 : value.toLowerCase();\n        return this.countries.filter((option) => option.country.toLowerCase().indexOf(filterValue) === 0);\n    }\n}\nGuessingInputComponent.ɵfac = function GuessingInputComponent_Factory(t) { return new (t || GuessingInputComponent)(i0.ɵɵdirectiveInject(i1.TranslocoService), i0.ɵɵdirectiveInject(i2.MatSnackBar)); };\nGuessingInputComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: GuessingInputComponent, selectors: [[\"app-guessing-input\"]], inputs: { countries: \"countries\", randomCountry: \"randomCountry\" }, decls: 15, vars: 16, consts: [[3, \"formGroup\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"country\", \"matAutocompletePosition\", \"below\", 3, \"matAutocomplete\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [3, \"value\"]], template: function GuessingInputComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0)(1, \"mat-form-field\")(2, \"mat-label\");\n        i0.ɵɵtext(3);\n        i0.ɵɵpipe(4, \"transloco\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"input\", 1);\n        i0.ɵɵelementStart(6, \"mat-autocomplete\", null, 2);\n        i0.ɵɵtemplate(8, GuessingInputComponent_mat_option_8_Template, 4, 6, \"mat-option\", 3);\n        i0.ɵɵpipe(9, \"async\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function GuessingInputComponent_Template_button_click_10_listener() { return ctx.onSubmitGuess(); });\n        i0.ɵɵpipe(11, \"uppercase\");\n        i0.ɵɵpipe(12, \"uppercase\");\n        i0.ɵɵtext(13);\n        i0.ɵɵpipe(14, \"transloco\");\n        i0.ɵɵelementEnd()();\n    } if (rf & 2) {\n        const _r0 = i0.ɵɵreference(7);\n        i0.ɵɵproperty(\"formGroup\", ctx.guessingForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 6, \"app.enterCountry\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"matAutocomplete\", _r0);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(9, 8, ctx.filteredOptions));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", (ctx.guesses == null ? null : ctx.guesses.length) === 5 || i0.ɵɵpipeBind1(11, 10, ctx.recentGuess) === i0.ɵɵpipeBind1(12, 12, ctx.randomCountry == null ? null : ctx.randomCountry.country));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(14, 14, \"app.guess\"), \" \");\n    } }, directives: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i4.MatFormField, i4.MatLabel, i5.MatInput, i3.DefaultValueAccessor, i6.MatAutocompleteTrigger, i3.NgControlStatus, i3.FormControlName, i6.MatAutocomplete, i7.NgForOf, i8.MatOption, i9.MatButton], pipes: [i1.TranslocoPipe, i7.UpperCasePipe, i7.AsyncPipe], styles: [\".mat-form-field[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImd1ZXNzaW5nLWlucHV0LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsV0FBQTtBQUNGIiwiZmlsZSI6Imd1ZXNzaW5nLWlucHV0LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm1hdC1mb3JtLWZpZWxkIHtcbiAgd2lkdGg6IDEwMCU7XG59Il19 */\"] });\n"]},"metadata":{},"sourceType":"module"}