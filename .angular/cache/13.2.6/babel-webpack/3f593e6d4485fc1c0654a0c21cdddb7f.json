{"ast":null,"code":"import { EventEmitter } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { map, startWith } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"@ngneat/transloco\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/autocomplete\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/core\";\nimport * as i9 from \"@angular/material/button\";\nimport * as i10 from \"../guessing-list/guessing-list.component\";\n\nfunction GuessingFormComponent_mat_option_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 8);\n    i0.ɵɵpipe(1, \"uppercase\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"uppercase\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", i0.ɵɵpipeBind1(1, 2, option_r3 == null ? null : option_r3.country));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 4, option_r3 == null ? null : option_r3.country), \" \");\n  }\n}\n\nfunction GuessingFormComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 9)(1, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function GuessingFormComponent_div_18_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onPlayAgain();\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"transloco\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 1, \"app.playAgain\"), \" \");\n  }\n}\n\nexport class GuessingFormComponent {\n  constructor(matSnackBar, transloco) {\n    this.matSnackBar = matSnackBar;\n    this.transloco = transloco;\n    this.playAgain = new EventEmitter();\n    this.guesses = [];\n    this.gameStatus = \"InProgress\";\n  }\n\n  ngOnInit() {\n    this.initForm();\n\n    this._autoCompletion();\n  }\n\n  initForm() {\n    this.guessingForm = new FormGroup({\n      country: new FormControl(\"\")\n    });\n  }\n\n  onSubmitGuess() {\n    var _a;\n\n    this.recentGuess = (_a = this.guessingForm.controls[\"country\"]) === null || _a === void 0 ? void 0 : _a.value.toUpperCase();\n    const correctCountry = this.randomCountry.country.toUpperCase();\n\n    if (!this._checkArray(this.countries, this.recentGuess)) {\n      this._initMatSnackBar(this.transloco.translate(\"app.unknownCountry\"), \"\", 1000);\n    } else if (this._checkArray(this.guesses, this.recentGuess)) {\n      this._initMatSnackBar(this.transloco.translate(\"app.countryAlreadyGuessed\"), \"\", 1000);\n    } else {\n      const regexCurrentGuess = new RegExp(\"(^|s)\" + this.recentGuess + \"(s|$)\");\n      const findCountry = this.countries.find(guess => guess.country.toUpperCase().match(regexCurrentGuess));\n      this.guesses.push(findCountry);\n    }\n\n    if (this.guesses.length === 5 && this.recentGuess !== correctCountry) {\n      this._initMatSnackBar(this.transloco.translate(\"app.theAnswerWas\") + correctCountry, this.transloco.translate(\"app.close\"), undefined);\n\n      this.guessingForm.controls[\"country\"].disable();\n    } else if (this.recentGuess === correctCountry) {\n      this._initMatSnackBar(this.transloco.translate(\"app.correct\"), this.transloco.translate(\"app.close\"), undefined);\n\n      this.guessingForm.controls[\"country\"].disable();\n      this.gameStatus = \"Won\";\n    }\n\n    this._autoCompletion();\n\n    this.guessingForm.reset();\n  }\n\n  onPlayAgain() {\n    const random = Math.floor(Math.random() * this.countries.length);\n    this.randomCountry = this.countries[random];\n    this.playAgain.emit(this.randomCountry);\n    this.guesses = [];\n    this.matSnackBar.dismiss();\n    this.guessingForm.controls[\"country\"].enable();\n    this.gameStatus = \"InProgress\";\n  }\n\n  _autoCompletion() {\n    this.filteredOptions = this.guessingForm.controls[\"country\"].valueChanges.pipe(startWith(\"\"), map(value => this._filter(value)));\n  }\n\n  _checkArray(array, value) {\n    const regex = new RegExp(\"(^|s)\" + value + \"(s|$)\");\n    return array.some(guess => guess.country.toUpperCase().match(regex));\n  }\n\n  _initMatSnackBar(message, closeButton, duration) {\n    this.matSnackBar.open(message, closeButton, {\n      verticalPosition: \"top\",\n      duration: duration\n    });\n  }\n\n  _filter(value) {\n    const filterValue = value === null || value === void 0 ? void 0 : value.toLowerCase();\n    return this.countries.filter(option => option.country.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n}\n\nGuessingFormComponent.ɵfac = function GuessingFormComponent_Factory(t) {\n  return new (t || GuessingFormComponent)(i0.ɵɵdirectiveInject(i1.MatSnackBar), i0.ɵɵdirectiveInject(i2.TranslocoService));\n};\n\nGuessingFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GuessingFormComponent,\n  selectors: [[\"app-guessing-form\"]],\n  inputs: {\n    countries: \"countries\",\n    randomCountry: \"randomCountry\"\n  },\n  outputs: {\n    playAgain: \"playAgain\"\n  },\n  decls: 19,\n  vars: 20,\n  consts: [[1, \"form\"], [3, \"formGroup\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"country\", \"matAutocompletePosition\", \"below\", 3, \"matAutocomplete\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [3, \"gameStatus\", \"guesses\", \"randomCountry\"], [\"class\", \"play-again-btn\", 4, \"ngIf\"], [3, \"value\"], [1, \"play-again-btn\"], [\"mat-raised-button\", \"\", 3, \"click\"]],\n  template: function GuessingFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"mat-form-field\")(3, \"mat-label\");\n      i0.ɵɵtext(4);\n      i0.ɵɵpipe(5, \"transloco\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 2);\n      i0.ɵɵelementStart(7, \"mat-autocomplete\", null, 3);\n      i0.ɵɵtemplate(9, GuessingFormComponent_mat_option_9_Template, 4, 6, \"mat-option\", 4);\n      i0.ɵɵpipe(10, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function GuessingFormComponent_Template_button_click_11_listener() {\n        return ctx.onSubmitGuess();\n      });\n      i0.ɵɵpipe(12, \"uppercase\");\n      i0.ɵɵpipe(13, \"uppercase\");\n      i0.ɵɵelementStart(14, \"p\");\n      i0.ɵɵtext(15);\n      i0.ɵɵpipe(16, \"transloco\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelement(17, \"app-guessing-list\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(18, GuessingFormComponent_div_18_Template, 4, 3, \"div\", 7);\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(8);\n\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.guessingForm);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 10, \"app.enterCountry\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"matAutocomplete\", _r0);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(10, 12, ctx.filteredOptions));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", (ctx.guesses == null ? null : ctx.guesses.length) === 5 || i0.ɵɵpipeBind1(12, 14, ctx.recentGuess) === i0.ɵɵpipeBind1(13, 16, ctx.randomCountry == null ? null : ctx.randomCountry.country));\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(16, 18, \"app.guess\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"gameStatus\", ctx.gameStatus)(\"guesses\", ctx.guesses)(\"randomCountry\", ctx.randomCountry);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.guesses == null ? null : ctx.guesses.length) === 5 || ctx.gameStatus === \"Won\");\n    }\n  },\n  directives: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i4.MatFormField, i4.MatLabel, i5.MatInput, i3.DefaultValueAccessor, i6.MatAutocompleteTrigger, i3.NgControlStatus, i3.FormControlName, i6.MatAutocomplete, i7.NgForOf, i8.MatOption, i9.MatButton, i10.GuessingListComponent, i7.NgIf],\n  pipes: [i2.TranslocoPipe, i7.UpperCasePipe, i7.AsyncPipe],\n  styles: [\"form[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  width: 80vw;\\n  max-width: 450px;\\n}\\n\\n.mat-form-field[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n\\n.mat-raised-button[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImd1ZXNzaW5nLWZvcm0uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSx1QkFBQTtFQUNBLFdBQUE7RUFDQSxnQkFBQTtBQUNGOztBQUVBO0VBQ0UsV0FBQTtBQUNGOztBQUVBO0VBQ0UsV0FBQTtBQUNGIiwiZmlsZSI6Imd1ZXNzaW5nLWZvcm0uY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJmb3JtIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIHdpZHRoOiA4MHZ3O1xuICBtYXgtd2lkdGg6IDQ1MHB4O1xufVxuXG4ubWF0LWZvcm0tZmllbGQge1xuICB3aWR0aDogMTAwJTtcbn1cblxuLm1hdC1yYWlzZWQtYnV0dG9uIHtcbiAgd2lkdGg6IDEwMCU7XG59XG4iXX0= */\"]\n});","map":{"version":3,"sources":["/Users/elin/web/country-game/src/app/components/guessing-form/guessing-form.component.ts"],"names":["EventEmitter","FormControl","FormGroup","map","startWith","i0","i1","i2","i3","i4","i5","i6","i7","i8","i9","i10","GuessingFormComponent_mat_option_9_Template","rf","ctx","ɵɵelementStart","ɵɵpipe","ɵɵtext","ɵɵelementEnd","option_r3","$implicit","ɵɵproperty","ɵɵpipeBind1","country","ɵɵadvance","ɵɵtextInterpolate1","GuessingFormComponent_div_18_Template","_r5","ɵɵgetCurrentView","ɵɵlistener","GuessingFormComponent_div_18_Template_button_click_1_listener","ɵɵrestoreView","ctx_r4","ɵɵnextContext","onPlayAgain","GuessingFormComponent","constructor","matSnackBar","transloco","playAgain","guesses","gameStatus","ngOnInit","initForm","_autoCompletion","guessingForm","onSubmitGuess","_a","recentGuess","controls","value","toUpperCase","correctCountry","randomCountry","_checkArray","countries","_initMatSnackBar","translate","regexCurrentGuess","RegExp","findCountry","find","guess","match","push","length","undefined","disable","reset","random","Math","floor","emit","dismiss","enable","filteredOptions","valueChanges","pipe","_filter","array","regex","some","message","closeButton","duration","open","verticalPosition","filterValue","toLowerCase","filter","option","indexOf","ɵfac","GuessingFormComponent_Factory","t","ɵɵdirectiveInject","MatSnackBar","TranslocoService","ɵcmp","ɵɵdefineComponent","type","selectors","inputs","outputs","decls","vars","consts","template","GuessingFormComponent_Template","ɵɵelement","ɵɵtemplate","GuessingFormComponent_Template_button_click_11_listener","_r0","ɵɵreference","ɵɵtextInterpolate","directives","ɵNgNoValidate","NgControlStatusGroup","FormGroupDirective","MatFormField","MatLabel","MatInput","DefaultValueAccessor","MatAutocompleteTrigger","NgControlStatus","FormControlName","MatAutocomplete","NgForOf","MatOption","MatButton","GuessingListComponent","NgIf","pipes","TranslocoPipe","UpperCasePipe","AsyncPipe","styles"],"mappings":"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","sourcesContent":["import { EventEmitter } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { map, startWith } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"@ngneat/transloco\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/autocomplete\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/core\";\nimport * as i9 from \"@angular/material/button\";\nimport * as i10 from \"../guessing-list/guessing-list.component\";\nfunction GuessingFormComponent_mat_option_9_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 8);\n    i0.ɵɵpipe(1, \"uppercase\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"uppercase\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const option_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", i0.ɵɵpipeBind1(1, 2, option_r3 == null ? null : option_r3.country));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 4, option_r3 == null ? null : option_r3.country), \" \");\n} }\nfunction GuessingFormComponent_div_18_Template(rf, ctx) { if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 9)(1, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function GuessingFormComponent_div_18_Template_button_click_1_listener() { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return ctx_r4.onPlayAgain(); });\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"transloco\");\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 1, \"app.playAgain\"), \" \");\n} }\nexport class GuessingFormComponent {\n    constructor(matSnackBar, transloco) {\n        this.matSnackBar = matSnackBar;\n        this.transloco = transloco;\n        this.playAgain = new EventEmitter();\n        this.guesses = [];\n        this.gameStatus = \"InProgress\";\n    }\n    ngOnInit() {\n        this.initForm();\n        this._autoCompletion();\n    }\n    initForm() {\n        this.guessingForm = new FormGroup({\n            country: new FormControl(\"\"),\n        });\n    }\n    onSubmitGuess() {\n        var _a;\n        this.recentGuess =\n            (_a = this.guessingForm.controls[\"country\"]) === null || _a === void 0 ? void 0 : _a.value.toUpperCase();\n        const correctCountry = this.randomCountry.country.toUpperCase();\n        if (!this._checkArray(this.countries, this.recentGuess)) {\n            this._initMatSnackBar(this.transloco.translate(\"app.unknownCountry\"), \"\", 1000);\n        }\n        else if (this._checkArray(this.guesses, this.recentGuess)) {\n            this._initMatSnackBar(this.transloco.translate(\"app.countryAlreadyGuessed\"), \"\", 1000);\n        }\n        else {\n            const regexCurrentGuess = new RegExp(\"(^|s)\" + this.recentGuess + \"(s|$)\");\n            const findCountry = this.countries.find((guess) => guess.country.toUpperCase().match(regexCurrentGuess));\n            this.guesses.push(findCountry);\n        }\n        if (this.guesses.length === 5 && this.recentGuess !== correctCountry) {\n            this._initMatSnackBar(this.transloco.translate(\"app.theAnswerWas\") + correctCountry, this.transloco.translate(\"app.close\"), undefined);\n            this.guessingForm.controls[\"country\"].disable();\n        }\n        else if (this.recentGuess === correctCountry) {\n            this._initMatSnackBar(this.transloco.translate(\"app.correct\"), this.transloco.translate(\"app.close\"), undefined);\n            this.guessingForm.controls[\"country\"].disable();\n            this.gameStatus = \"Won\";\n        }\n        this._autoCompletion();\n        this.guessingForm.reset();\n    }\n    onPlayAgain() {\n        const random = Math.floor(Math.random() * this.countries.length);\n        this.randomCountry = this.countries[random];\n        this.playAgain.emit(this.randomCountry);\n        this.guesses = [];\n        this.matSnackBar.dismiss();\n        this.guessingForm.controls[\"country\"].enable();\n        this.gameStatus = \"InProgress\";\n    }\n    _autoCompletion() {\n        this.filteredOptions = this.guessingForm.controls[\"country\"].valueChanges.pipe(startWith(\"\"), map((value) => this._filter(value)));\n    }\n    _checkArray(array, value) {\n        const regex = new RegExp(\"(^|s)\" + value + \"(s|$)\");\n        return array.some((guess) => guess.country.toUpperCase().match(regex));\n    }\n    _initMatSnackBar(message, closeButton, duration) {\n        this.matSnackBar.open(message, closeButton, {\n            verticalPosition: \"top\",\n            duration: duration,\n        });\n    }\n    _filter(value) {\n        const filterValue = value === null || value === void 0 ? void 0 : value.toLowerCase();\n        return this.countries.filter((option) => option.country.toLowerCase().indexOf(filterValue) === 0);\n    }\n}\nGuessingFormComponent.ɵfac = function GuessingFormComponent_Factory(t) { return new (t || GuessingFormComponent)(i0.ɵɵdirectiveInject(i1.MatSnackBar), i0.ɵɵdirectiveInject(i2.TranslocoService)); };\nGuessingFormComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: GuessingFormComponent, selectors: [[\"app-guessing-form\"]], inputs: { countries: \"countries\", randomCountry: \"randomCountry\" }, outputs: { playAgain: \"playAgain\" }, decls: 19, vars: 20, consts: [[1, \"form\"], [3, \"formGroup\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"country\", \"matAutocompletePosition\", \"below\", 3, \"matAutocomplete\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [3, \"gameStatus\", \"guesses\", \"randomCountry\"], [\"class\", \"play-again-btn\", 4, \"ngIf\"], [3, \"value\"], [1, \"play-again-btn\"], [\"mat-raised-button\", \"\", 3, \"click\"]], template: function GuessingFormComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"mat-form-field\")(3, \"mat-label\");\n        i0.ɵɵtext(4);\n        i0.ɵɵpipe(5, \"transloco\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"input\", 2);\n        i0.ɵɵelementStart(7, \"mat-autocomplete\", null, 3);\n        i0.ɵɵtemplate(9, GuessingFormComponent_mat_option_9_Template, 4, 6, \"mat-option\", 4);\n        i0.ɵɵpipe(10, \"async\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(11, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function GuessingFormComponent_Template_button_click_11_listener() { return ctx.onSubmitGuess(); });\n        i0.ɵɵpipe(12, \"uppercase\");\n        i0.ɵɵpipe(13, \"uppercase\");\n        i0.ɵɵelementStart(14, \"p\");\n        i0.ɵɵtext(15);\n        i0.ɵɵpipe(16, \"transloco\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelement(17, \"app-guessing-list\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(18, GuessingFormComponent_div_18_Template, 4, 3, \"div\", 7);\n    } if (rf & 2) {\n        const _r0 = i0.ɵɵreference(8);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.guessingForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 10, \"app.enterCountry\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"matAutocomplete\", _r0);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(10, 12, ctx.filteredOptions));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", (ctx.guesses == null ? null : ctx.guesses.length) === 5 || i0.ɵɵpipeBind1(12, 14, ctx.recentGuess) === i0.ɵɵpipeBind1(13, 16, ctx.randomCountry == null ? null : ctx.randomCountry.country));\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(16, 18, \"app.guess\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"gameStatus\", ctx.gameStatus)(\"guesses\", ctx.guesses)(\"randomCountry\", ctx.randomCountry);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.guesses == null ? null : ctx.guesses.length) === 5 || ctx.gameStatus === \"Won\");\n    } }, directives: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i4.MatFormField, i4.MatLabel, i5.MatInput, i3.DefaultValueAccessor, i6.MatAutocompleteTrigger, i3.NgControlStatus, i3.FormControlName, i6.MatAutocomplete, i7.NgForOf, i8.MatOption, i9.MatButton, i10.GuessingListComponent, i7.NgIf], pipes: [i2.TranslocoPipe, i7.UpperCasePipe, i7.AsyncPipe], styles: [\"form[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  width: 80vw;\\n  max-width: 450px;\\n}\\n\\n.mat-form-field[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n\\n.mat-raised-button[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImd1ZXNzaW5nLWZvcm0uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSx1QkFBQTtFQUNBLFdBQUE7RUFDQSxnQkFBQTtBQUNGOztBQUVBO0VBQ0UsV0FBQTtBQUNGOztBQUVBO0VBQ0UsV0FBQTtBQUNGIiwiZmlsZSI6Imd1ZXNzaW5nLWZvcm0uY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJmb3JtIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIHdpZHRoOiA4MHZ3O1xuICBtYXgtd2lkdGg6IDQ1MHB4O1xufVxuXG4ubWF0LWZvcm0tZmllbGQge1xuICB3aWR0aDogMTAwJTtcbn1cblxuLm1hdC1yYWlzZWQtYnV0dG9uIHtcbiAgd2lkdGg6IDEwMCU7XG59XG4iXX0= */\"] });\n"]},"metadata":{},"sourceType":"module"}