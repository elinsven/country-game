{"ast":null,"code":"import { FormControl, FormGroup } from \"@angular/forms\";\nimport { map, startWith } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/api.service\";\nimport * as i2 from \"@angular/platform-browser\";\nimport * as i3 from \"@angular/material/snack-bar\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/progress-spinner\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/autocomplete\";\nimport * as i10 from \"@angular/material/core\";\nimport * as i11 from \"@angular/material/button\";\nimport * as i12 from \"@angular/material/list\";\nimport * as i13 from \"@angular/material/icon\";\nimport * as i14 from \"@angular/material/divider\";\n\nfunction AppComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 2);\n    i0.ɵɵelement(2, \"mat-spinner\");\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4, \"Loading game...\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction AppComponent_ng_container_2_mat_option_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 15);\n    i0.ɵɵpipe(1, \"uppercase\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"uppercase\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", i0.ɵɵpipeBind1(1, 2, option_r6.country));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 4, option_r6.country), \" \");\n  }\n}\n\nfunction AppComponent_ng_container_2_mat_list_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-list\", 16)(1, \"mat-list-item\", 17)(2, \"div\", 18)(3, \"div\", 19)(4, \"p\");\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"uppercase\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 20)(8, \"p\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(10, \"div\", 21)(11, \"mat-icon\", 22);\n    i0.ɵɵtext(12, \"south\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelement(13, \"mat-divider\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const guess_r7 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 3, guess_r7.country));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r4.getDistanceFromLatLonInKm(guess_r7.location[0], guess_r7.location[1], ctx_r4.randomCountry.location[0], ctx_r4.randomCountry.location[1]), \"km\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r4.calculateIconDirection(guess_r7.location[0], guess_r7.location[1]));\n  }\n}\n\nfunction AppComponent_ng_container_2_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 23)(1, \"button\", 24);\n    i0.ɵɵlistener(\"click\", function AppComponent_ng_container_2_div_19_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return ctx_r8.playAgain();\n    });\n    i0.ɵɵtext(2, \"Play again\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction AppComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 3);\n    i0.ɵɵelement(2, \"img\", 4);\n    i0.ɵɵelementStart(3, \"div\", 5)(4, \"form\", 6)(5, \"mat-form-field\")(6, \"mat-label\");\n    i0.ɵɵtext(7, \"Enter country\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(8, \"input\", 7);\n    i0.ɵɵelementStart(9, \"mat-autocomplete\", 8, 9);\n    i0.ɵɵtemplate(11, AppComponent_ng_container_2_mat_option_11_Template, 4, 6, \"mat-option\", 10);\n    i0.ɵɵpipe(12, \"async\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(13, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function AppComponent_ng_container_2_Template_button_click_13_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.guessSubmit();\n    });\n    i0.ɵɵpipe(14, \"lowercase\");\n    i0.ɵɵpipe(15, \"lowercase\");\n    i0.ɵɵtext(16, \"Guess\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(17, \"div\", 12);\n    i0.ɵɵtemplate(18, AppComponent_ng_container_2_mat_list_18_Template, 14, 5, \"mat-list\", 13);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(19, AppComponent_ng_container_2_div_19_Template, 3, 0, \"div\", 14);\n    i0.ɵɵpipe(20, \"lowercase\");\n    i0.ɵɵpipe(21, \"lowercase\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const _r2 = i0.ɵɵreference(10);\n\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"src\", ctx_r1.sanitize(\"data:image/jpg;base64, \" + ctx_r1.arrayBufferToBase64(ctx_r1.randomCountry.countryimage == null ? null : ctx_r1.randomCountry.countryimage.data)), i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.form);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"matAutocomplete\", _r2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(12, 7, ctx_r1.filteredOptions));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r1.guesses.length == 5 || i0.ɵɵpipeBind1(14, 9, ctx_r1.currentGuess) == i0.ɵɵpipeBind1(15, 11, ctx_r1.randomCountry.country));\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.guesses);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.guesses.length == 5 || i0.ɵɵpipeBind1(20, 13, ctx_r1.currentGuess) == i0.ɵɵpipeBind1(21, 15, ctx_r1.randomCountry.country));\n  }\n}\n\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(api, sanitizer, matSnackBar) {\n      this.api = api;\n      this.sanitizer = sanitizer;\n      this.matSnackBar = matSnackBar;\n      this.guesses = [];\n    }\n\n    ngOnInit() {\n      this.getDataFromAPI();\n      this.initForm();\n      this.filteredOptions = this.form.get(\"country\").valueChanges.pipe(startWith(\"\"), map(value => this._filter(value)));\n    }\n\n    getDataFromAPI() {\n      this.api.getData().subscribe(res => {\n        this.countries = res;\n        let random = Math.floor(Math.random() * this.countries.length);\n        this.randomCountry = this.countries[random];\n      }, err => {\n        console.log(err);\n      });\n    }\n\n    arrayBufferToBase64(buffer) {\n      let binary = \"\";\n      let bytes = new Uint8Array(buffer);\n      let len = bytes.byteLength;\n\n      for (let i = 0; i < len; i++) {\n        binary += String.fromCharCode(bytes[i]);\n      }\n\n      return window.btoa(binary);\n    }\n\n    sanitize(url) {\n      return this.sanitizer.bypassSecurityTrustUrl(url);\n    }\n\n    initForm() {\n      this.form = new FormGroup({\n        country: new FormControl(null)\n      });\n    }\n\n    guessSubmit() {\n      var _a, _b, _c, _d;\n\n      this.currentGuess = (_a = this.form.get(\"country\")) === null || _a === void 0 ? void 0 : _a.value;\n\n      if (this.currentGuess == null || !this.countries.some(guess => guess.country.toUpperCase().includes(this.currentGuess))) {\n        this.matSnackBar.open(\"Unknown country\", \"\", {\n          verticalPosition: \"top\",\n          duration: 1000\n        });\n      } else if (this.guesses.some(guess => {\n        var _a;\n\n        return guess.country.toUpperCase().includes((_a = this.form.get(\"country\")) === null || _a === void 0 ? void 0 : _a.value);\n      })) {\n        this.matSnackBar.open(\"Country already guessed\", \"\", {\n          verticalPosition: \"top\",\n          duration: 1000\n        });\n      } else {\n        let findCountry = this.countries.find(guess => guess.country.toUpperCase().includes(this.currentGuess));\n        this.guesses.push(findCountry);\n      }\n\n      this.filteredOptions = this.form.get(\"country\").valueChanges.pipe(startWith(\"\"), map(value => this._filter(value)));\n      this.form.reset();\n\n      if (this.guesses.length == 5) {\n        let message = \"THE ANSWER WAS: \" + ((_b = this.randomCountry.country) === null || _b === void 0 ? void 0 : _b.toUpperCase());\n        this.matSnackBar.open(message, \"Close\", {\n          verticalPosition: \"top\"\n        });\n      } else if (((_c = this.currentGuess) === null || _c === void 0 ? void 0 : _c.toUpperCase()) == ((_d = this.randomCountry.country) === null || _d === void 0 ? void 0 : _d.toUpperCase())) {\n        let message = \"CORRECT\";\n        this.matSnackBar.open(message, \"Close\", {\n          verticalPosition: \"top\"\n        });\n      }\n    }\n\n    _filter(value) {\n      const filterValue = value === null || value === void 0 ? void 0 : value.toLowerCase();\n      return this.countries.filter(option => {\n        var _a;\n\n        return (_a = option.country) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(filterValue);\n      });\n    }\n\n    getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n      let R = 6371; // Radius of the earth in km\n\n      let dLat = this.toRadians(lat2 - lat1); // toRadians below\n\n      let dLon = this.toRadians(lon2 - lon1);\n      let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n      let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n      let d = R * c; // Distance in km\n\n      return Math.round(d);\n    }\n\n    toRadians(deg) {\n      return deg * (Math.PI / 180);\n    }\n\n    toDegrees(radians) {\n      let pi = Math.PI;\n      return radians * (180 / pi);\n    }\n\n    calculateBearing(startLat, startLng, destLat, destLng) {\n      startLat = this.toRadians(startLat);\n      startLng = this.toRadians(startLng);\n      destLat = this.toRadians(destLat);\n      destLng = this.toRadians(destLng);\n      let y = Math.sin(destLng - startLng) * Math.cos(destLat);\n      let x = Math.cos(startLat) * Math.sin(destLat) - Math.sin(startLat) * Math.cos(destLat) * Math.cos(destLng - startLng);\n      let brng = Math.atan2(y, x);\n      brng = this.toDegrees(brng);\n      return (brng + 360) % 360;\n    }\n\n    calculateIconDirection(lat1, long1) {\n      let degree = this.calculateBearing(this.randomCountry.location[0], this.randomCountry.location[1], lat1, long1);\n      return {\n        'transform': 'rotate(' + degree + 'deg)'\n      };\n    }\n\n    playAgain() {\n      let random = Math.floor(Math.random() * this.countries.length);\n      this.randomCountry = this.countries[random];\n      this.guesses = [];\n      this.matSnackBar.dismiss();\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.ApiService), i0.ɵɵdirectiveInject(i2.DomSanitizer), i0.ɵɵdirectiveInject(i3.MatSnackBar));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 3,\n    vars: 2,\n    consts: [[1, \"container\"], [4, \"ngIf\"], [1, \"loading-screen\"], [1, \"content\"], [3, \"src\"], [1, \"form\"], [3, \"formGroup\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"country\", 3, \"matAutocomplete\"], [\"autoActiveFirstOption\", \"\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [1, \"guessing-list\"], [\"role\", \"list\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"play-again-btn\", 4, \"ngIf\"], [3, \"value\"], [\"role\", \"list\"], [\"role\", \"listitem\"], [1, \"item-row\"], [\"id\", \"country-name\"], [\"id\", \"distance\"], [\"id\", \"direction\"], [3, \"ngStyle\"], [1, \"play-again-btn\"], [\"mat-raised-button\", \"\", 3, \"click\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, AppComponent_ng_container_1_Template, 5, 0, \"ng-container\", 1);\n        i0.ɵɵtemplate(2, AppComponent_ng_container_2_Template, 22, 17, \"ng-container\", 1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.randomCountry);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.randomCountry);\n      }\n    },\n    directives: [i4.NgIf, i5.MatProgressSpinner, i6.ɵNgNoValidate, i6.NgControlStatusGroup, i6.FormGroupDirective, i7.MatFormField, i7.MatLabel, i8.MatInput, i6.DefaultValueAccessor, i9.MatAutocompleteTrigger, i6.NgControlStatus, i6.FormControlName, i9.MatAutocomplete, i4.NgForOf, i10.MatOption, i11.MatButton, i12.MatList, i12.MatListItem, i13.MatIcon, i4.NgStyle, i14.MatDivider],\n    pipes: [i4.UpperCasePipe, i4.AsyncPipe, i4.LowerCasePipe],\n    styles: [\".container[_ngcontent-%COMP%]{margin:20px 0}.loading-screen[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:center;align-items:center;height:85vh}.loading-screen[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin-top:10px}.content[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center}img[_ngcontent-%COMP%]{width:60%;max-width:450px;height:auto;margin-bottom:40px}.form[_ngcontent-%COMP%], form[_ngcontent-%COMP%]{width:80vw;max-width:450px}.mat-form-field[_ngcontent-%COMP%], .mat-raised-button[_ngcontent-%COMP%]{width:100%}.mat-list-base[_ngcontent-%COMP%]{padding:0}.guessing-list[_ngcontent-%COMP%]{margin:20px 0}.guessing-list[_ngcontent-%COMP%]   .item-row[_ngcontent-%COMP%]{width:100%;display:flex;align-items:center}.guessing-list[_ngcontent-%COMP%]   #country-name[_ngcontent-%COMP%], .guessing-list[_ngcontent-%COMP%]   #distance[_ngcontent-%COMP%], .guessing-list[_ngcontent-%COMP%]   #direction[_ngcontent-%COMP%]{width:33.3333333333%;text-align:center;flex:0 0 auto}.guessing-list[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin:0}\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}