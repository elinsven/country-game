{"ast":null,"code":"import { MatAutocompleteTrigger } from '@angular/material/autocomplete';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/form-field\";\nimport * as i3 from \"@angular/material/input\";\nimport * as i4 from \"@angular/material/autocomplete\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/core\";\nimport * as i7 from \"@angular/material/button\";\n\nfunction GuessingFormComponent_mat_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 6);\n    i0.ɵɵpipe(1, \"uppercase\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"uppercase\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", i0.ɵɵpipeBind1(1, 2, option_r2.country));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 4, option_r2.country), \" \");\n  }\n}\n\nexport class GuessingFormComponent {\n  constructor() {}\n\n  ngOnInit() {}\n\n  onKeydown() {\n    this.autocomplete.autocompleteDisabled = false;\n  }\n\n}\n\nGuessingFormComponent.ɵfac = function GuessingFormComponent_Factory(t) {\n  return new (t || GuessingFormComponent)();\n};\n\nGuessingFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GuessingFormComponent,\n  selectors: [[\"app-guessing-form\"]],\n  viewQuery: function GuessingFormComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(MatAutocompleteTrigger, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.autocomplete = _t.first);\n    }\n  },\n  decls: 14,\n  vars: 10,\n  consts: [[1, \"form\"], [3, \"formGroup\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"country\", 3, \"matAutocomplete\", \"keydown\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [3, \"value\"]],\n  template: function GuessingFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"mat-form-field\")(3, \"mat-label\");\n      i0.ɵɵtext(4, \"ENTER COUNTRY\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"input\", 2);\n      i0.ɵɵlistener(\"keydown\", function GuessingFormComponent_Template_input_keydown_5_listener() {\n        return ctx.onKeydown();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"mat-autocomplete\", null, 3);\n      i0.ɵɵtemplate(8, GuessingFormComponent_mat_option_8_Template, 4, 6, \"mat-option\", 4);\n      i0.ɵɵpipe(9, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function GuessingFormComponent_Template_button_click_10_listener() {\n        return ctx.guessSubmit();\n      });\n      i0.ɵɵpipe(11, \"lowercase\");\n      i0.ɵɵpipe(12, \"lowercase\");\n      i0.ɵɵtext(13, \"GUESS\");\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(7);\n\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.guessingForm);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"matAutocomplete\", _r0);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(9, 4, ctx.filteredOptions));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.guesses.length == 5 || i0.ɵɵpipeBind1(11, 6, ctx.currentGuess) == i0.ɵɵpipeBind1(12, 8, ctx.randomCountry.country));\n    }\n  },\n  directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i2.MatFormField, i2.MatLabel, i3.MatInput, i1.DefaultValueAccessor, i4.MatAutocompleteTrigger, i1.NgControlStatus, i1.FormControlName, i4.MatAutocomplete, i5.NgForOf, i6.MatOption, i7.MatButton],\n  pipes: [i5.UpperCasePipe, i5.AsyncPipe, i5.LowerCasePipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJndWVzc2luZy1mb3JtLmNvbXBvbmVudC5zY3NzIn0= */\"]\n});","map":{"version":3,"sources":["/Users/elin/web/country-game/src/app/components/guessing-form/guessing-form.component.ts"],"names":["MatAutocompleteTrigger","i0","i1","i2","i3","i4","i5","i6","i7","GuessingFormComponent_mat_option_8_Template","rf","ctx","ɵɵelementStart","ɵɵpipe","ɵɵtext","ɵɵelementEnd","option_r2","$implicit","ɵɵproperty","ɵɵpipeBind1","country","ɵɵadvance","ɵɵtextInterpolate1","GuessingFormComponent","constructor","ngOnInit","onKeydown","autocomplete","autocompleteDisabled","ɵfac","GuessingFormComponent_Factory","t","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","GuessingFormComponent_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","decls","vars","consts","template","GuessingFormComponent_Template","ɵɵlistener","GuessingFormComponent_Template_input_keydown_5_listener","ɵɵtemplate","GuessingFormComponent_Template_button_click_10_listener","guessSubmit","_r0","ɵɵreference","guessingForm","filteredOptions","guesses","length","currentGuess","randomCountry","directives","ɵNgNoValidate","NgControlStatusGroup","FormGroupDirective","MatFormField","MatLabel","MatInput","DefaultValueAccessor","NgControlStatus","FormControlName","MatAutocomplete","NgForOf","MatOption","MatButton","pipes","UpperCasePipe","AsyncPipe","LowerCasePipe","styles"],"mappings":"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","sourcesContent":["import { MatAutocompleteTrigger } from '@angular/material/autocomplete';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/form-field\";\nimport * as i3 from \"@angular/material/input\";\nimport * as i4 from \"@angular/material/autocomplete\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/core\";\nimport * as i7 from \"@angular/material/button\";\nfunction GuessingFormComponent_mat_option_8_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 6);\n    i0.ɵɵpipe(1, \"uppercase\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"uppercase\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const option_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", i0.ɵɵpipeBind1(1, 2, option_r2.country));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 4, option_r2.country), \" \");\n} }\nexport class GuessingFormComponent {\n    constructor() { }\n    ngOnInit() {\n    }\n    onKeydown() {\n        this.autocomplete.autocompleteDisabled = false;\n    }\n}\nGuessingFormComponent.ɵfac = function GuessingFormComponent_Factory(t) { return new (t || GuessingFormComponent)(); };\nGuessingFormComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: GuessingFormComponent, selectors: [[\"app-guessing-form\"]], viewQuery: function GuessingFormComponent_Query(rf, ctx) { if (rf & 1) {\n        i0.ɵɵviewQuery(MatAutocompleteTrigger, 5);\n    } if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.autocomplete = _t.first);\n    } }, decls: 14, vars: 10, consts: [[1, \"form\"], [3, \"formGroup\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"country\", 3, \"matAutocomplete\", \"keydown\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [3, \"value\"]], template: function GuessingFormComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"mat-form-field\")(3, \"mat-label\");\n        i0.ɵɵtext(4, \"ENTER COUNTRY\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"input\", 2);\n        i0.ɵɵlistener(\"keydown\", function GuessingFormComponent_Template_input_keydown_5_listener() { return ctx.onKeydown(); });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"mat-autocomplete\", null, 3);\n        i0.ɵɵtemplate(8, GuessingFormComponent_mat_option_8_Template, 4, 6, \"mat-option\", 4);\n        i0.ɵɵpipe(9, \"async\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function GuessingFormComponent_Template_button_click_10_listener() { return ctx.guessSubmit(); });\n        i0.ɵɵpipe(11, \"lowercase\");\n        i0.ɵɵpipe(12, \"lowercase\");\n        i0.ɵɵtext(13, \"GUESS\");\n        i0.ɵɵelementEnd()()();\n    } if (rf & 2) {\n        const _r0 = i0.ɵɵreference(7);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.guessingForm);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"matAutocomplete\", _r0);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(9, 4, ctx.filteredOptions));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.guesses.length == 5 || i0.ɵɵpipeBind1(11, 6, ctx.currentGuess) == i0.ɵɵpipeBind1(12, 8, ctx.randomCountry.country));\n    } }, directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i2.MatFormField, i2.MatLabel, i3.MatInput, i1.DefaultValueAccessor, i4.MatAutocompleteTrigger, i1.NgControlStatus, i1.FormControlName, i4.MatAutocomplete, i5.NgForOf, i6.MatOption, i7.MatButton], pipes: [i5.UpperCasePipe, i5.AsyncPipe, i5.LowerCasePipe], styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJndWVzc2luZy1mb3JtLmNvbXBvbmVudC5zY3NzIn0= */\"] });\n"]},"metadata":{},"sourceType":"module"}