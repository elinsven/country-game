{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { map, startWith } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/material/form-field\";\nimport * as i4 from \"@angular/material/input\";\nimport * as i5 from \"@angular/material/autocomplete\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/material/core\";\nimport * as i8 from \"@angular/material/button\";\nimport * as i9 from \"../guessing-list/guessing-list.component\";\n\nfunction GuessingFormComponent_mat_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 8);\n    i0.ɵɵpipe(1, \"uppercase\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"uppercase\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", i0.ɵɵpipeBind1(1, 2, option_r3 == null ? null : option_r3.country));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 4, option_r3 == null ? null : option_r3.country), \" \");\n  }\n}\n\nfunction GuessingFormComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 9)(1, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function GuessingFormComponent_div_15_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onPlayAgain();\n    });\n    i0.ɵɵtext(2, \"PLAY AGAIN\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nexport class GuessingFormComponent {\n  constructor(matSnackBar) {\n    this.matSnackBar = matSnackBar;\n    this.playAgain = new EventEmitter();\n    this.guesses = [];\n    this.gameStatus = \"InProgress\";\n  }\n\n  ngOnInit() {\n    this.initForm();\n    this.autoCompletion();\n  }\n\n  initForm() {\n    this.guessingForm = new FormGroup({\n      country: new FormControl(\"\")\n    });\n  }\n\n  onSubmitGuess() {\n    var _a, _b, _c;\n\n    this.recentGuess = (_a = this.guessingForm.controls[\"country\"]) === null || _a === void 0 ? void 0 : _a.value.toUpperCase();\n\n    if (this.recentGuess == null || !this._checkArray(this.countries, this.recentGuess)) {\n      this._initMatSnackBar(\"Unknown country\", \"\", 1000);\n    } else if (this._checkArray(this.guesses, this.recentGuess)) {\n      this._initMatSnackBar(\"Country already guessed\", \"\", 1000);\n    } else {\n      const regexCurrentGuess = new RegExp(\"(^|\\s)\" + this.recentGuess + \"(\\s|$)\");\n      const findCountry = this.countries.find(guess => guess.country.toUpperCase().match(regexCurrentGuess));\n      this.guesses.push(findCountry);\n    }\n\n    this.autoCompletion();\n    this.guessingForm.reset();\n    const correctCountry = this.randomCountry.country.toUpperCase();\n\n    if (this.guesses.length === 5 && ((_b = this.recentGuess) === null || _b === void 0 ? void 0 : _b.toUpperCase()) !== correctCountry) {\n      this._initMatSnackBar(`THE ANSWER WAS ${correctCountry}`, \"Close\", undefined);\n\n      this.guessingForm.controls[\"country\"].disable();\n    } else if (((_c = this.recentGuess) === null || _c === void 0 ? void 0 : _c.toUpperCase()) === correctCountry) {\n      this._initMatSnackBar(\"CORRECT\", \"Close\", undefined);\n\n      this.guessingForm.controls[\"country\"].disable();\n      this.gameStatus = \"Won\";\n    }\n  }\n\n  onPlayAgain() {\n    const random = Math.floor(Math.random() * this.countries.length);\n    this.randomCountry = this.countries[random];\n    this.playAgain.emit(this.randomCountry);\n    this.guesses = [];\n    this.matSnackBar.dismiss();\n    this.guessingForm.controls[\"country\"].enable();\n    this.gameStatus = \"InProgress\";\n  }\n\n  autoCompletion() {\n    this.filteredOptions = this.guessingForm.controls[\"country\"].valueChanges.pipe(startWith(\"\"), map(value => this._filter(value)));\n  }\n\n  _checkArray(array, value) {\n    const regex = new RegExp(\"(^|\\s)\" + value + \"(\\s|$)\");\n    return array.some(guess => guess.country.toUpperCase().match(regex));\n  }\n\n  _initMatSnackBar(message, closeButton, duration) {\n    this.matSnackBar.open(message, closeButton, {\n      verticalPosition: \"top\",\n      duration: duration\n    });\n  }\n\n  _filter(value) {\n    const filterValue = value === null || value === void 0 ? void 0 : value.toLowerCase();\n    return this.countries.filter(option => option.country.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n}\n\nGuessingFormComponent.ɵfac = function GuessingFormComponent_Factory(t) {\n  return new (t || GuessingFormComponent)(i0.ɵɵdirectiveInject(i1.MatSnackBar));\n};\n\nGuessingFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GuessingFormComponent,\n  selectors: [[\"app-guessing-form\"]],\n  inputs: {\n    countries: \"countries\",\n    randomCountry: \"randomCountry\"\n  },\n  outputs: {\n    playAgain: \"playAgain\"\n  },\n  decls: 16,\n  vars: 14,\n  consts: [[1, \"form\"], [3, \"formGroup\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"country\", \"matAutocompletePosition\", \"below\", 3, \"matAutocomplete\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [3, \"gameStatus\", \"guesses\", \"randomCountry\"], [\"class\", \"play-again-btn\", 4, \"ngIf\"], [3, \"value\"], [1, \"play-again-btn\"], [\"mat-raised-button\", \"\", 3, \"click\"]],\n  template: function GuessingFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"mat-form-field\")(3, \"mat-label\");\n      i0.ɵɵtext(4, \"ENTER COUNTRY\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"input\", 2);\n      i0.ɵɵelementStart(6, \"mat-autocomplete\", null, 3);\n      i0.ɵɵtemplate(8, GuessingFormComponent_mat_option_8_Template, 4, 6, \"mat-option\", 4);\n      i0.ɵɵpipe(9, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function GuessingFormComponent_Template_button_click_10_listener() {\n        return ctx.onSubmitGuess();\n      });\n      i0.ɵɵpipe(11, \"uppercase\");\n      i0.ɵɵpipe(12, \"uppercase\");\n      i0.ɵɵtext(13, \"GUESS\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(14, \"app-guessing-list\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(15, GuessingFormComponent_div_15_Template, 3, 0, \"div\", 7);\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(7);\n\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.guessingForm);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"matAutocomplete\", _r0);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(9, 8, ctx.filteredOptions));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", (ctx.guesses == null ? null : ctx.guesses.length) === 5 || i0.ɵɵpipeBind1(11, 10, ctx.recentGuess) === i0.ɵɵpipeBind1(12, 12, ctx.randomCountry == null ? null : ctx.randomCountry.country));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"gameStatus\", ctx.gameStatus)(\"guesses\", ctx.guesses)(\"randomCountry\", ctx.randomCountry);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.guesses == null ? null : ctx.guesses.length) === 5 || ctx.gameStatus === \"Won\");\n    }\n  },\n  directives: [i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i3.MatFormField, i3.MatLabel, i4.MatInput, i2.DefaultValueAccessor, i5.MatAutocompleteTrigger, i2.NgControlStatus, i2.FormControlName, i5.MatAutocomplete, i6.NgForOf, i7.MatOption, i8.MatButton, i9.GuessingListComponent, i6.NgIf],\n  pipes: [i6.UpperCasePipe, i6.AsyncPipe],\n  styles: [\"form[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  width: 80vw;\\n  max-width: 450px;\\n}\\n\\n.mat-form-field[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n\\n.mat-raised-button[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImd1ZXNzaW5nLWZvcm0uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSx1QkFBQTtFQUNBLFdBQUE7RUFDQSxnQkFBQTtBQUNKOztBQUVBO0VBQ0ksV0FBQTtBQUNKOztBQUVBO0VBQ0ksV0FBQTtBQUNKIiwiZmlsZSI6Imd1ZXNzaW5nLWZvcm0uY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJmb3JtIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgd2lkdGg6IDgwdnc7XG4gICAgbWF4LXdpZHRoOiA0NTBweDtcbn1cblxuLm1hdC1mb3JtLWZpZWxkIHtcbiAgICB3aWR0aDogMTAwJTtcbn1cblxuLm1hdC1yYWlzZWQtYnV0dG9uIHtcbiAgICB3aWR0aDogMTAwJTtcbn0iXX0= */\"]\n});","map":{"version":3,"sources":["/Users/elin/web/country-game/src/app/components/guessing-form/guessing-form.component.ts"],"names":["EventEmitter","FormControl","FormGroup","map","startWith","i0","i1","i2","i3","i4","i5","i6","i7","i8","i9","GuessingFormComponent_mat_option_8_Template","rf","ctx","ɵɵelementStart","ɵɵpipe","ɵɵtext","ɵɵelementEnd","option_r3","$implicit","ɵɵproperty","ɵɵpipeBind1","country","ɵɵadvance","ɵɵtextInterpolate1","GuessingFormComponent_div_15_Template","_r5","ɵɵgetCurrentView","ɵɵlistener","GuessingFormComponent_div_15_Template_button_click_1_listener","ɵɵrestoreView","ctx_r4","ɵɵnextContext","onPlayAgain","GuessingFormComponent","constructor","matSnackBar","playAgain","guesses","gameStatus","ngOnInit","initForm","autoCompletion","guessingForm","onSubmitGuess","_a","_b","_c","recentGuess","controls","value","toUpperCase","_checkArray","countries","_initMatSnackBar","regexCurrentGuess","RegExp","findCountry","find","guess","match","push","reset","correctCountry","randomCountry","length","undefined","disable","random","Math","floor","emit","dismiss","enable","filteredOptions","valueChanges","pipe","_filter","array","regex","some","message","closeButton","duration","open","verticalPosition","filterValue","toLowerCase","filter","option","indexOf","ɵfac","GuessingFormComponent_Factory","t","ɵɵdirectiveInject","MatSnackBar","ɵcmp","ɵɵdefineComponent","type","selectors","inputs","outputs","decls","vars","consts","template","GuessingFormComponent_Template","ɵɵelement","ɵɵtemplate","GuessingFormComponent_Template_button_click_10_listener","_r0","ɵɵreference","directives","ɵNgNoValidate","NgControlStatusGroup","FormGroupDirective","MatFormField","MatLabel","MatInput","DefaultValueAccessor","MatAutocompleteTrigger","NgControlStatus","FormControlName","MatAutocomplete","NgForOf","MatOption","MatButton","GuessingListComponent","NgIf","pipes","UpperCasePipe","AsyncPipe","styles"],"mappings":"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","sourcesContent":["import { EventEmitter } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { map, startWith } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/material/form-field\";\nimport * as i4 from \"@angular/material/input\";\nimport * as i5 from \"@angular/material/autocomplete\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/material/core\";\nimport * as i8 from \"@angular/material/button\";\nimport * as i9 from \"../guessing-list/guessing-list.component\";\nfunction GuessingFormComponent_mat_option_8_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 8);\n    i0.ɵɵpipe(1, \"uppercase\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"uppercase\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const option_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", i0.ɵɵpipeBind1(1, 2, option_r3 == null ? null : option_r3.country));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 4, option_r3 == null ? null : option_r3.country), \" \");\n} }\nfunction GuessingFormComponent_div_15_Template(rf, ctx) { if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 9)(1, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function GuessingFormComponent_div_15_Template_button_click_1_listener() { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return ctx_r4.onPlayAgain(); });\n    i0.ɵɵtext(2, \"PLAY AGAIN\");\n    i0.ɵɵelementEnd()();\n} }\nexport class GuessingFormComponent {\n    constructor(matSnackBar) {\n        this.matSnackBar = matSnackBar;\n        this.playAgain = new EventEmitter();\n        this.guesses = [];\n        this.gameStatus = \"InProgress\";\n    }\n    ngOnInit() {\n        this.initForm();\n        this.autoCompletion();\n    }\n    initForm() {\n        this.guessingForm = new FormGroup({\n            country: new FormControl(\"\")\n        });\n    }\n    onSubmitGuess() {\n        var _a, _b, _c;\n        this.recentGuess = (_a = this.guessingForm.controls[\"country\"]) === null || _a === void 0 ? void 0 : _a.value.toUpperCase();\n        if (this.recentGuess == null || !this._checkArray(this.countries, this.recentGuess)) {\n            this._initMatSnackBar(\"Unknown country\", \"\", 1000);\n        }\n        else if (this._checkArray(this.guesses, this.recentGuess)) {\n            this._initMatSnackBar(\"Country already guessed\", \"\", 1000);\n        }\n        else {\n            const regexCurrentGuess = new RegExp(\"(^|\\s)\" + this.recentGuess + \"(\\s|$)\");\n            const findCountry = this.countries.find((guess) => guess.country.toUpperCase().match(regexCurrentGuess));\n            this.guesses.push(findCountry);\n        }\n        this.autoCompletion();\n        this.guessingForm.reset();\n        const correctCountry = this.randomCountry.country.toUpperCase();\n        if (this.guesses.length === 5 && ((_b = this.recentGuess) === null || _b === void 0 ? void 0 : _b.toUpperCase()) !== correctCountry) {\n            this._initMatSnackBar(`THE ANSWER WAS ${correctCountry}`, \"Close\", undefined);\n            this.guessingForm.controls[\"country\"].disable();\n        }\n        else if (((_c = this.recentGuess) === null || _c === void 0 ? void 0 : _c.toUpperCase()) === correctCountry) {\n            this._initMatSnackBar(\"CORRECT\", \"Close\", undefined);\n            this.guessingForm.controls[\"country\"].disable();\n            this.gameStatus = \"Won\";\n        }\n    }\n    onPlayAgain() {\n        const random = Math.floor(Math.random() * this.countries.length);\n        this.randomCountry = this.countries[random];\n        this.playAgain.emit(this.randomCountry);\n        this.guesses = [];\n        this.matSnackBar.dismiss();\n        this.guessingForm.controls[\"country\"].enable();\n        this.gameStatus = \"InProgress\";\n    }\n    autoCompletion() {\n        this.filteredOptions = this.guessingForm.controls[\"country\"].valueChanges.pipe(startWith(\"\"), map(value => this._filter(value)));\n    }\n    _checkArray(array, value) {\n        const regex = new RegExp(\"(^|\\s)\" + value + \"(\\s|$)\");\n        return array.some((guess) => guess.country.toUpperCase().match(regex));\n    }\n    _initMatSnackBar(message, closeButton, duration) {\n        this.matSnackBar.open(message, closeButton, {\n            verticalPosition: \"top\",\n            duration: duration\n        });\n    }\n    _filter(value) {\n        const filterValue = value === null || value === void 0 ? void 0 : value.toLowerCase();\n        return this.countries.filter((option) => option.country.toLowerCase().indexOf(filterValue) === 0);\n    }\n}\nGuessingFormComponent.ɵfac = function GuessingFormComponent_Factory(t) { return new (t || GuessingFormComponent)(i0.ɵɵdirectiveInject(i1.MatSnackBar)); };\nGuessingFormComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: GuessingFormComponent, selectors: [[\"app-guessing-form\"]], inputs: { countries: \"countries\", randomCountry: \"randomCountry\" }, outputs: { playAgain: \"playAgain\" }, decls: 16, vars: 14, consts: [[1, \"form\"], [3, \"formGroup\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"country\", \"matAutocompletePosition\", \"below\", 3, \"matAutocomplete\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [3, \"gameStatus\", \"guesses\", \"randomCountry\"], [\"class\", \"play-again-btn\", 4, \"ngIf\"], [3, \"value\"], [1, \"play-again-btn\"], [\"mat-raised-button\", \"\", 3, \"click\"]], template: function GuessingFormComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"mat-form-field\")(3, \"mat-label\");\n        i0.ɵɵtext(4, \"ENTER COUNTRY\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"input\", 2);\n        i0.ɵɵelementStart(6, \"mat-autocomplete\", null, 3);\n        i0.ɵɵtemplate(8, GuessingFormComponent_mat_option_8_Template, 4, 6, \"mat-option\", 4);\n        i0.ɵɵpipe(9, \"async\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function GuessingFormComponent_Template_button_click_10_listener() { return ctx.onSubmitGuess(); });\n        i0.ɵɵpipe(11, \"uppercase\");\n        i0.ɵɵpipe(12, \"uppercase\");\n        i0.ɵɵtext(13, \"GUESS\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(14, \"app-guessing-list\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(15, GuessingFormComponent_div_15_Template, 3, 0, \"div\", 7);\n    } if (rf & 2) {\n        const _r0 = i0.ɵɵreference(7);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.guessingForm);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"matAutocomplete\", _r0);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(9, 8, ctx.filteredOptions));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", (ctx.guesses == null ? null : ctx.guesses.length) === 5 || i0.ɵɵpipeBind1(11, 10, ctx.recentGuess) === i0.ɵɵpipeBind1(12, 12, ctx.randomCountry == null ? null : ctx.randomCountry.country));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"gameStatus\", ctx.gameStatus)(\"guesses\", ctx.guesses)(\"randomCountry\", ctx.randomCountry);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.guesses == null ? null : ctx.guesses.length) === 5 || ctx.gameStatus === \"Won\");\n    } }, directives: [i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i3.MatFormField, i3.MatLabel, i4.MatInput, i2.DefaultValueAccessor, i5.MatAutocompleteTrigger, i2.NgControlStatus, i2.FormControlName, i5.MatAutocomplete, i6.NgForOf, i7.MatOption, i8.MatButton, i9.GuessingListComponent, i6.NgIf], pipes: [i6.UpperCasePipe, i6.AsyncPipe], styles: [\"form[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  width: 80vw;\\n  max-width: 450px;\\n}\\n\\n.mat-form-field[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n\\n.mat-raised-button[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImd1ZXNzaW5nLWZvcm0uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSx1QkFBQTtFQUNBLFdBQUE7RUFDQSxnQkFBQTtBQUNKOztBQUVBO0VBQ0ksV0FBQTtBQUNKOztBQUVBO0VBQ0ksV0FBQTtBQUNKIiwiZmlsZSI6Imd1ZXNzaW5nLWZvcm0uY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJmb3JtIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgd2lkdGg6IDgwdnc7XG4gICAgbWF4LXdpZHRoOiA0NTBweDtcbn1cblxuLm1hdC1mb3JtLWZpZWxkIHtcbiAgICB3aWR0aDogMTAwJTtcbn1cblxuLm1hdC1yYWlzZWQtYnV0dG9uIHtcbiAgICB3aWR0aDogMTAwJTtcbn0iXX0= */\"] });\n"]},"metadata":{},"sourceType":"module"}